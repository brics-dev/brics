/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package gov.nih.cit.brics.file.mvc.controller.swagger;

import java.io.File;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody;

import gov.nih.cit.brics.file.mvc.model.swagger.FileDetails;
import gov.nih.cit.brics.file.mvc.model.swagger.FileUploadDetails;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;


@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-27T13:24:40.472-04:00[America/New_York]")
@Api(value = "files", description = "the files API")
public interface FilesApi {

	@ApiOperation(value = "Deletes a file from the system that matches the given file ID.", nickname = "deleteFile", notes = "", response = FileDetails.class, authorizations = {
			@Authorization(value = "bearerAuth")}, tags = {"file",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "A JSON object with the details of the file that was just deleted. Or an empty JSON object if the file ID is not found in the system.", response = FileDetails.class),
			@ApiResponse(code = 401, message = "When the user is not logged in."),
			@ApiResponse(code = 403, message = "When there is a perimssions valiation on the file being accessed."),
			@ApiResponse(code = 500, message = "When there is either a database, file system, or JSON construction error.")})
	@RequestMapping(value = "/files/{fileId}", produces = "application/json", method = RequestMethod.DELETE)
	ResponseEntity<FileDetails> deleteFile(
			@ApiParam(value = "The alphanumeric ID of the file to be deleted.", required = true) @PathVariable("fileId") String fileId);


	@ApiOperation(value = "Downloads a specified file from the server's file system.", nickname = "downloadFile", notes = "", response = File.class, authorizations = {
			@Authorization(value = "bearerAuth")}, tags = {"file",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The file data that corresponds to the given file ID.", response = File.class),
			@ApiResponse(code = 206, message = "The file data being sent is a sub-section of the requested file as indicated by the \"Range\" header in the request"),
			@ApiResponse(code = 401, message = "When the user is not logged in."),
			@ApiResponse(code = 403, message = "When there is a perimssions valiation on the file being accessed."),
			@ApiResponse(code = 404, message = "If the given file ID is not found in the system."),
			@ApiResponse(code = 416, message = "If the \"Range\" header of the request refers to an invalid range of the requested file."),
			@ApiResponse(code = 500, message = "When there is either a database or file system.")})
	@RequestMapping(value = "/files/{fileId}", produces = "application/octet-stream", method = RequestMethod.GET)
	ResponseEntity<StreamingResponseBody> downloadFile(
			@ApiParam(value = "The alphanumeric ID of the file to be downloaded.", required = true) @PathVariable("fileId") String fileId,
			@ApiParam(value = "Its existance indicates that an interrupted download will need to be resumed starting at the indicated range.") @RequestHeader(value = "Range", required = false) String range);


	@ApiOperation(value = "Downloads a specified file from the data drop share location.", nickname = "downloadLegacyFile", notes = "", response = File.class, authorizations = {
			@Authorization(value = "bearerAuth")}, tags = {"file",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The file data that corresponds to the given UserFile ID.", response = File.class),
			@ApiResponse(code = 206, message = "The file data being sent is a sub-section of the requested file as indicated by the \"Range\" header in the request"),
			@ApiResponse(code = 401, message = "When the user is not logged in."),
			@ApiResponse(code = 403, message = "When there is a perimssions valiation on the file being accessed."),
			@ApiResponse(code = 404, message = "If the given UserFile ID is not found in the system."),
			@ApiResponse(code = 416, message = "If the \"Range\" header of the request refers to an invalid range of the requested file."),
			@ApiResponse(code = 500, message = "When there is either a database or file system.")})
	@RequestMapping(value = "/files/getUserFile/{userFileId}", produces = "application/octet-stream", method = RequestMethod.GET)
	ResponseEntity<StreamingResponseBody> downloadLegacyFile(
			@ApiParam(value = "The ID of the UserFile to be downloaded.", required = true) @PathVariable("userFileId") Long userFileId,
			@ApiParam(value = "Its existance indicates that an interrupted download will need to be resumed starting at the indicated range.") @RequestHeader(value = "Range", required = false) String range);


	@ApiOperation(value = "Sends back all of the HTTP methods that this endpoint supports. Needed for some JS file uploading frameworks.", nickname = "handleHeadRequest", notes = "", authorizations = {
			@Authorization(value = "bearerAuth")}, tags = {"file",})
	@ApiResponses(value = {@ApiResponse(code = 200, message = "No content is sent just headers.")})
	@RequestMapping(value = "/files", method = RequestMethod.HEAD)
	ResponseEntity<Void> handleHeadRequest();


	@ApiOperation(value = "Handles any HTTP OPTIONS requests from JS file uploading frameworks.", nickname = "handleOptionsRequest", notes = "", authorizations = {
			@Authorization(value = "bearerAuth")}, tags = {"file",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Only headers are sent which contains all of the HTTP methods that is supported by this endpoint.")})
	@RequestMapping(value = "/files", method = RequestMethod.OPTIONS)
	ResponseEntity<Void> handleOptionsRequest();


	@ApiOperation(value = "Saves a file or part of a file to the server's file system.", nickname = "saveFileData", notes = "", response = FileUploadDetails.class, authorizations = {
			@Authorization(value = "bearerAuth")}, tags = {"file",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "A JSON object with the details of the file or chunk that was just saved.", response = FileUploadDetails.class),
			@ApiResponse(code = 401, message = "When the user is not logged in."),
			@ApiResponse(code = 403, message = "When there is a perimssions valiation on the file being accessed."),
			@ApiResponse(code = 500, message = "When there is any database, file system, or JSON construction errors.")})
	@RequestMapping(value = "/files", produces = "application/json", consumes = "multipart/form-data", method = RequestMethod.POST)
	ResponseEntity<FileUploadDetails> saveFileData(
			@ApiParam(value = "", required = true) @RequestParam(value = "fileId", required = true) String fileId,
			@ApiParam(value = "", required = true) @RequestParam(value = "fileCategoryId", required = true) Long fileCategoryId,
			@ApiParam(value = "", required = true) @RequestParam(value = "linkedObjectId", required = true) Long linkedObjectId,
			@ApiParam(value = "", required = true) @RequestParam(value = "file", required = true) org.springframework.web.multipart.MultipartFile file,
			@ApiParam(value = "This can be either be the size of the uploaded file (in bytes) or the size of the chunk of the file.", required = true) @RequestHeader(value = "Content-Length", required = true) Long contentLength,
			@ApiParam(value = "Its existence indicates that only part of the file was sent. It provides the range of bytes sent, as well as the size of the original file.") @RequestHeader(value = "Content-Range", required = false) String contentRange);


	@ApiOperation(value = "Creates or updates a database record that will or currently represent a file stored on the server's file system. Should be called first before a file upload is attempted.", nickname = "saveFileDbRecord", notes = "", response = FileDetails.class, authorizations = {
			@Authorization(value = "bearerAuth")}, tags = {"file",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "A JSON object with the file details that were just saved in the system.", response = FileDetails.class),
			@ApiResponse(code = 400, message = "If the instance and/or the group IDs are not given."),
			@ApiResponse(code = 401, message = "When the user is not logged in."),
			@ApiResponse(code = 403, message = "When there is a perimssions valiation if the user can't create or update the file that is associated with a BRICS module."),
			@ApiResponse(code = 404, message = "If the given file ID is not found in the system."),
			@ApiResponse(code = 500, message = "When there was either a database, file system, or JSON generation error.")})
	@RequestMapping(value = "/files/saveFileDetails", produces = "application/json", consumes = "application/x-www-form-urlencoded", method = RequestMethod.POST)
	ResponseEntity<FileDetails> saveFileDbRecord(
			@ApiParam(value = "", required = false) @RequestParam(value = "fileId", required = false) String fileId,
			@ApiParam(value = "", required = true) @RequestParam(value = "fileCategoryId", required = true) Long fileCategoryId,
			@ApiParam(value = "", required = true) @RequestParam(value = "linkedObjectId", required = true) Long linkedObjectId,
			@ApiParam(value = "", required = true) @RequestParam(value = "fileName", required = true) String fileName,
			@ApiParam(value = "", required = false) @RequestParam(value = "legacyUserFileId", required = false) Long legacyUserFileId);

}
