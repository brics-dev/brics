/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package gov.nih.cit.brics.file.mvc.controller.swagger;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import gov.nih.cit.brics.file.mvc.model.swagger.ValidationResult;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-12-19T16:34:07.992-05:00[America/New_York]")
@Api(value = "validate", description = "the validate API")
public interface ValidateApi {

	@ApiOperation(value = "Generate an CRC hash of a file associated with the specified file ID, and checks it against a given hash", nickname = "checkCrcValue", notes = "", response = ValidationResult.class, authorizations = {
			@Authorization(value = "bearerAuth")}, tags = {"validate",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "JSON Object identifying the results of the comparison", response = ValidationResult.class),
			@ApiResponse(code = 401, message = "When the user is not logged in."),
			@ApiResponse(code = 403, message = "When there is a perimssions valiation on the file being accessed."),
			@ApiResponse(code = 404, message = "The file ID was not found in the system."),
			@ApiResponse(code = 500, message = "An error resulting from reading the file from the file system, database error, or an error with contructing the response JSON object.")})
	@RequestMapping(value = "/validate/crcCheck/{fileId}/{clientCrc}", produces = "application/json", method = RequestMethod.GET)
	ResponseEntity<ValidationResult> checkCrcValue(
			@ApiParam(value = "the ID of the file", required = true) @PathVariable("fileId") String fileId,
			@ApiParam(value = "The CRC hash provided by the client", required = true) @PathVariable("clientCrc") String clientCrc);


	@ApiOperation(value = "Generate an MD5 hash of a file associated with the specified file ID, and checks it against a given hash", nickname = "checkMd5Hash", notes = "", response = ValidationResult.class, authorizations = {
			@Authorization(value = "bearerAuth")}, tags = {"validate",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "JSON Object identifying the results of the comparison", response = ValidationResult.class),
			@ApiResponse(code = 401, message = "If the user is not logged into the system."),
			@ApiResponse(code = 403, message = "When there is a perimssions valiation on the file being accessed."),
			@ApiResponse(code = 404, message = "The file ID was not found in the system."),
			@ApiResponse(code = 500, message = "An error resulting from reading the file from the file system, database error, or an error with contructing the response JSON object.")})
	@RequestMapping(value = "/validate/md5Hash/{fileId}/{clientHash}", produces = "application/json", method = RequestMethod.GET)
	ResponseEntity<ValidationResult> checkMd5Hash(
			@ApiParam(value = "the ID of the file", required = true) @PathVariable("fileId") String fileId,
			@ApiParam(value = "The MD5 hash provided by the client", required = true) @PathVariable("clientHash") String clientHash);

}
