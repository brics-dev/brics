package gov.nih.tbi.service.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Service;

import gov.nih.tbi.constants.ApplicationConstants;
import gov.nih.tbi.exceptions.TriplanarException;
import gov.nih.tbi.service.TriplanarManager;
import gov.nih.tbi.service.model.TriplanarQueue;
import gov.nih.tbi.util.QueryRestProviderUtils;
import gov.nih.tbi.ws.provider.QueryToolWebserviceProvider;
import gov.nih.tbi.ws.provider.RestRepositoryProvider;

@Service
@Scope(value = "session", proxyMode = ScopedProxyMode.INTERFACES)
public class TriplanarManagerImpl implements TriplanarManager, Serializable {

	private static final long serialVersionUID = -1280022478727742104L;
	private static final Logger log = Logger.getLogger(TriplanarManagerImpl.class);

	@Autowired
	ApplicationConstants constants;

	@Autowired
	TriplanarQueue triplanarQueue;

	// A text file generated by MIPAV containing the time slice information for 4-D image.
	private static final String CHECK_INFO_FILE_NAME = "info.txt";

	private static final String RESULT_FILE_POSTFIX = "_result";

	public boolean isTriplanarReady(String studyPrefixedId, String datasetName, String triplanarName)
			throws UnsupportedEncodingException, FileNotFoundException {

		boolean isReady = false;

		// Full file path to store all generated image and info files.
		String resultFilePath = getOutputFilePath(studyPrefixedId, datasetName, triplanarName);
		String resultZipFile = triplanarName.substring(0, triplanarName.lastIndexOf(".")) + RESULT_FILE_POSTFIX + ".zip";

		// Check if triplanar file already in queue
		if (!triplanarQueue.isTriplanarExisting(resultFilePath)) {

			log.info(resultFilePath + " does not exist in the queue.");

			// Check if the result already exists in the desired folder
			if (!isResultInfoExisting(resultFilePath)) {
				RestRepositoryProvider restRepositoryProvider =
						new RestRepositoryProvider(constants.getModulesSTURL(),
								QueryRestProviderUtils.getProxyTicket(constants.getModulesSTURL()));
				String filePath =
						restRepositoryProvider.getDatasetFilePath(constants.getDatasetFilePathURL(), studyPrefixedId,
								datasetName, triplanarName);

				// Verify file path exists.
				if (filePath == null) {
					throw new FileNotFoundException("The SFTP file path to the " + datasetName
							+ " dataset could not be found for the " + triplanarName + " triplanar image.");
				}

				String originalPath = filePath.substring(0, (filePath.lastIndexOf("/") + 1));
				log.info("Triplanar original file path: " + originalPath + triplanarName);

				boolean isComplete =
						generateTriplanarImages(originalPath, triplanarName, resultFilePath, resultZipFile);

				if (isComplete) {
					triplanarQueue.addInProcessTriplanar(resultFilePath);
				}
			} else {
				triplanarQueue.addReadyTriplanar(resultFilePath);
				isReady = true;
			}

		} else if (triplanarQueue.isTriplanarInProcess(resultFilePath)) {  // If triplanar file status is in process

			// Check if the result already exists in the desired folder
			if (isResultInfoExisting(resultFilePath)) {
				log.info("Result file finished processing, adding location " + resultFilePath);
				triplanarQueue.addReadyTriplanar(resultFilePath);
				isReady = true;

			} else {
				log.info(resultFilePath + " is still in process, please wait ... ");
			}

		} else {
			isReady = true;
			log.info(resultFilePath + " is generated.");
		}

		return isReady;
	}


	/**
	 * Result info file was generated at the end of the image processing, its existence indicates all image files have
	 * been generated in the result file path.
	 * 
	 * @param resultFilePath - Full file path of the result info file
	 * @return true if the result info file has been generated
	 */
	private boolean isResultInfoExisting(String resultFilePath) {
		String resultInfoFile = resultFilePath + CHECK_INFO_FILE_NAME;

		File resultFile = new File(resultInfoFile);
		return resultFile.exists();
	}

	/**
	 * {@inheritDoc}
	 */
	public int check4DImage(String studyName, String datasetName, String triplanarName)
			throws NumberFormatException, IOException {
		int timeSlice = 0;
		String filePath = this.getOutputFilePath(studyName, datasetName, triplanarName);
		String checkInfoFile = filePath + CHECK_INFO_FILE_NAME;
		File testFile = new File(checkInfoFile);

		if (testFile.exists()) {
			BufferedReader br = new BufferedReader(new FileReader(checkInfoFile));

			try {
				String timeSliceStr = br.readLine();

				if (!StringUtils.isEmpty(timeSliceStr) && StringUtils.isNumeric(timeSliceStr)) {
					timeSlice = Integer.parseInt(timeSliceStr);

					if (timeSlice > 1) {
						log.info("----------This is a 4D image set! ");
					}
				}

			} finally {
				br.close();
			}
		}

		return timeSlice;
	}


	/**
	 * Call the web service provider to generate the triplanar result zip file.
	 * 
	 * @param originalPath
	 * @param originalFile
	 * @param newPath
	 * @param newFile
	 * @return if the web service call is successful
	 */
	public boolean generateTriplanarImages(String originalPath, String originalFile, String newPath, String newFile)
			throws TriplanarException {

		log.info("Calling web service to generate " + newPath + newFile + " from " + originalPath + originalFile);

		QueryToolWebserviceProvider queryToolWebserviceProvider =
				new QueryToolWebserviceProvider(constants.getModulesAccountURL(),
						QueryRestProviderUtils.getProxyTicket(constants.getModulesAccountURL()));

		boolean result = false;
		try {
			result =
					queryToolWebserviceProvider.generateTriplanarImages(originalPath, originalFile, newPath, newFile,
							constants.getTriplanarImageGenerateWebServiceUrl(), constants.getModulesAccountURL());

		} catch (UnsupportedEncodingException e) {
			String errMsg = "UnsupportedEncodingException thrown when calling generateTriplanarImages for "
					+ originalPath + originalFile;
			throw new TriplanarException(errMsg, e);
		}

		return result;
	}


	public String getOutputFilePath(String studyPrefixedId, String datasetName, String triplanarName) {
		if (triplanarName.contains(".")) {
			triplanarName = triplanarName.substring(0, triplanarName.lastIndexOf("."));
		}

		StringBuilder sb = new StringBuilder();
		sb.append(constants.getTriplanarBaseDir()).append(studyPrefixedId).append(File.separator).append(datasetName)
				.append(File.separator).append(triplanarName).append(File.separator);
		String filePath = sb.toString();
		filePath = filePath.replaceAll("\\s+", "_").replaceAll("\\\\'", "");
		return filePath;
	}
}
