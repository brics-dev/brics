package gov.nih.tbi.common.util;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.jasig.cas.client.validation.Assertion;
import org.springframework.security.cas.authentication.CasAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;

import gov.nih.tbi.commons.service.ServiceConstants;

public class BaseWsProvider {
	private static final Logger logger = Logger.getLogger(BaseWsProvider.class);
	private static final String CAS_SECURITY_CHECK_PATH_SEG = "j_spring_cas_security_check";

	public static final String PROXY_TICKET_QUERY_PARAM = "ticket";

	public BaseWsProvider() {}

	/**
	 * Generates the proxy ticket for a proxied web service. The resulting ticket will need to be appended to your
	 * request URL with ?ticket=<this ticket>. The {@link #compileProxiedWebserviceUrl(String, String)} method can also
	 * append the returned proxy ticket to the request URL.
	 * 
	 * @param baseURL - The base URL of the requested service (i.e. https://fitbir.nih.gov/[portal | proforms]).
	 * @return A proxy ticket that can be used to securely authenticate with a CAS protected web service.
	 * @throws IOException - When there is an error communicating with CAS to generate the proxy ticket.
	 */
	protected final String getProxyTicket(String baseURL) throws IOException {
		String ticket = null;
		CasAuthenticationToken auth = (CasAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();
		Assertion assertion = auth.getAssertion();
		String url = baseURL + BaseWsProvider.CAS_SECURITY_CHECK_PATH_SEG;

		logger.info("requesting proxy ticket from: " + url);
		ticket = assertion.getPrincipal().getProxyTicketFor(url);
		logger.info("proxy ticket is: " + ticket);

		return ticket;
	}

	/**
	 * Compiles a given web service call URL into one with a proxy ticket. The given proxy ticket should have been
	 * generated by the {@link #getProxyTicket(String)} method.
	 * 
	 * @param baseUrl - The original web service URL.
	 * @param ticket - The pre-requested ticket to apply to this URL
	 * @return The compiled string URL that includes the proxy ticket, or null if the base URL is null or blank.
	 */
	protected final String compileProxiedWebserviceUrl(String baseUrl, String ticket) {
		String compiledUrl = null;

		if (StringUtils.isNotBlank(baseUrl)) {
			if (baseUrl.contains("?")) {
				compiledUrl = baseUrl + "&ticket=" + ticket;
			} else {
				compiledUrl = baseUrl + "?ticket=" + ticket;
			}
		}

		return compiledUrl;
	}
	
	protected static String encodeUrlParam(String param) throws UnsupportedEncodingException {

		if (param == null || ServiceConstants.EMPTY_STRING.equals(param)) {
			return param;
		}

		String encoded = URLEncoder.encode(param, "UTF-8");
		return encoded;
	}
}
