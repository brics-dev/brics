/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package gov.nih.brics.auth.controller;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-01-16T10:51:52.786-05:00[America/New_York]")
@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "Log in provided for the BRICS system (already logged in through CAS)", nickname = "bricsLogin", notes = "This is a temporary method allowing the BRICS system to log in an already-authenticated user from the portal/etc server back-end to get a valid microservice JWT.  This is temporary pending move away from CAS for standard user login.", response = String.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Login Successful", response = String.class),
        @ApiResponse(code = 401, message = "Username or password was incorrect", response = String.class),
        @ApiResponse(code = 403, message = "User credentials are correct but user is unauthorized (normally, account locked or expired)", response = String.class) })
    @RequestMapping(value = "/user/bricslogin",
        produces = "text/plain", 
        consumes = "application/x-www-form-urlencoded",
        method = RequestMethod.POST)
    ResponseEntity<String> bricsLogin(@ApiParam(value = "", required=true) @RequestParam(value="username", required=true)  String username,@ApiParam(value = "", required=true) @RequestParam(value="password", required=true)  String password);


    @ApiOperation(value = "Log in using user credentials to get a JWT", nickname = "login", notes = "", response = String.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Login Successful", response = String.class),
        @ApiResponse(code = 401, message = "Username or password was incorrect", response = String.class),
        @ApiResponse(code = 403, message = "User credentials are correct but user is unauthorized (normally, account locked or expired)", response = String.class) })
    @RequestMapping(value = "/user/login",
        produces = "text/plain", 
        consumes = "application/x-www-form-urlencoded",
        method = RequestMethod.POST)
    ResponseEntity<String> login(@ApiParam(value = "", required=true) @RequestParam(value="username", required=true)  String username,@ApiParam(value = "", required=true) @RequestParam(value="password", required=true)  String password);


    @ApiOperation(value = "log out user from the system", nickname = "logout", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "logout successful"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid") })
    @RequestMapping(value = "/user/logout",
        method = RequestMethod.GET)
    ResponseEntity<Void> logout();


    @ApiOperation(value = "giving a valid login, get a new one with extended expiration", nickname = "renew", notes = "", response = String.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Renewal Successful", response = String.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid") })
    @RequestMapping(value = "/user/renew",
        produces = "text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> renew();


    @ApiOperation(value = "receives a (potentially) valid JWT and responds with a message about whether the JWT is valid or not", nickname = "verify", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The JWT is valid"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid") })
    @RequestMapping(value = "/user/verify",
        method = RequestMethod.GET)
    ResponseEntity<Void> verify();

}
