/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package gov.nih.brics.downloadtool.controller;

import gov.nih.brics.downloadtool.model.DownloadToolPackage;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-04-07T12:51:25.246-04:00[America/New_York]")
@Api(value = "queue", description = "the queue API")
public interface QueueApi {

    @ApiOperation(value = "(EXPERIMENTAL ONLY) Add a new dataset to the download queue", nickname = "addToQueue", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "downloadQueue", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully added dataset to the download queue"),
        @ApiResponse(code = 400, message = "Invalid ID supplied") })
    @RequestMapping(value = "/queue/{datasetId}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> addToQueue(@ApiParam(value = "ID of dataset to add to the download queue",required=true) @PathVariable("datasetId") Long datasetId);


    @ApiOperation(value = "Get all download packages in the user's download queue", nickname = "getAll", notes = "", response = DownloadToolPackage.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "downloadQueue", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "list obtained successfully", response = DownloadToolPackage.class, responseContainer = "List") })
    @RequestMapping(value = "/queue",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<DownloadToolPackage>> getAll();


    @ApiOperation(value = "Remove one or more downloadables from the download queue", nickname = "removeFromQueue", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "downloadQueue", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully removed"),
        @ApiResponse(code = 400, message = "no IDs were sent"),
        @ApiResponse(code = 401, message = "supplied user may not delete these downloadables") })
    @RequestMapping(value = "/queue",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeFromQueue(@NotNull @ApiParam(value = "IDs of downloadables to remove from the download queue", required = true) @Valid @RequestParam(value = "downloadableIds", required = true) List<Long> downloadableIds);


    @ApiOperation(value = "Remove an entire download package from the queue", nickname = "removePackageFromQueue", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "downloadQueue", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully removed"),
        @ApiResponse(code = 400, message = "no ID was sent"),
        @ApiResponse(code = 401, message = "supplied user may not delete this package") })
    @RequestMapping(value = "/queue/package/{packageId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removePackageFromQueue(@ApiParam(value = "IDs of package to remove from the download queue",required=true) @PathVariable("packageId") Long packageId);

}
