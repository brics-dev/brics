

package gov.nih.tbi.dictionary.validation.engine;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import java.util.concurrent.Callable;

import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.xml.ws.WebServiceException;

import org.apache.log4j.Logger;
import org.openrdf.query.algebra.Clear;

import gov.nih.tbi.ApplicationsConstants;
import gov.nih.tbi.ModelConstants;
import gov.nih.tbi.commons.model.DataElementStatus;
import gov.nih.tbi.commons.model.DataType;
import gov.nih.tbi.commons.model.InputRestrictions;
import gov.nih.tbi.commons.model.RepeatableType;
import gov.nih.tbi.commons.model.RequiredType;
import gov.nih.tbi.commons.service.ServiceConstants;
import gov.nih.tbi.dictionary.model.Translations;
import gov.nih.tbi.dictionary.model.hibernate.MapElement;
import gov.nih.tbi.dictionary.model.hibernate.RepeatableGroup;
import gov.nih.tbi.dictionary.model.hibernate.StructuralDataElement;
import gov.nih.tbi.dictionary.model.hibernate.StructuralFormStructure;
import gov.nih.tbi.dictionary.validation.model.DataStructureTable;
import gov.nih.tbi.dictionary.validation.model.FileNode;
import gov.nih.tbi.dictionary.validation.model.FileNode.FileType;
import gov.nih.tbi.dictionary.validation.model.RepeatableGroupTable;
import gov.nih.tbi.dictionary.validation.model.ValidationOutput;
import gov.nih.tbi.dictionary.validation.model.ValidationOutput.OutputType;
import gov.nih.tbi.dictionary.validation.view.ValidationClient;
import gov.nih.tbi.dictionary.ws.validation.ConditionalValidator;
import gov.nih.tbi.dictionary.ws.validation.DictionaryAccessor;
import gov.nih.tbi.dictionary.ws.validation.Normalizer;
import gov.nih.tbi.dictionary.ws.validation.RangeValidator;
import gov.nih.tbi.dictionary.ws.validation.TypeValidator;
import gov.nih.tbi.dictionary.ws.validation.ValidationConstants;
import gov.nih.tbi.dictionary.ws.validation.ValidationUtil;
import gov.nih.tbi.dictionary.ws.validation.XmlCharactersValidator;
import gov.nih.tbi.repository.ws.AccessionWebService;
import gov.nih.tbi.repository.ws.model.Accession;
import gov.nih.tbi.repository.ws.model.AccessionReturnType;

public class TableValidator extends DictionaryAccessor implements ConditionalValidator, Callable<FileNode> {

	private TypeValidator typer;
	private RangeValidator ranger;
	private Normalizer normer;
	private XmlCharactersValidator xmlValidator;
	private static Translations translations;
	private DataStructureTable table;
	private HashMap<String, HashSet<String>> references;
	private FileNode node;
	static Logger logger = Logger.getLogger(TableValidator.class);
	private AccessionWebService accClient;
	private final static int GUID_CHUNK_SIZE = 2500;
	private final static int TABLE_ROW_OFFSET_SIZE = 3;
	private Integer staticGuidIndex = new Integer(0);
	private static HashMap<String, Boolean> extraValidation;
	private boolean isComingFromProforms;
	private int numberWarnings = 0;
	private HashMap<String, Boolean> guidHaveBaselineMap;
	

	private static final int MAX_WARNINGS_SIZE = 1000;

	

	public TableValidator(List<StructuralFormStructure> dictionary, DataStructureTable table,
			HashMap<String, HashSet<String>> references, FileNode node, AccessionWebService provider,
			boolean isComingFromProforms) {

		super.dictionary = dictionary;
		typer = new TypeValidator(dictionary);
		ranger = new RangeValidator(dictionary);
		xmlValidator = new XmlCharactersValidator();
		this.isComingFromProforms = isComingFromProforms;

		setTable(table, references, node);

		accClient = provider;
	}

	/**
	 * Sets the translation rule to use
	 * 
	 * @param translations
	 */
	public static void setTranslationRule(Translations translations) {

		TableValidator.translations = translations;
	}
	
	public static void setExtraValidation(HashMap<String, Boolean> extraValidation) {
		TableValidator.extraValidation = extraValidation;
	}
	
	private void setGuidIndex(RepeatableGroupTable main) {
		staticGuidIndex = main.findColumn(ApplicationsConstants.GUID);
		
	}

	/**
	 * Returns the translation rule currently being used to validate
	 * 
	 * @return
	 */
	public static Translations getTranslationRule() {

		return translations;
	}

	// These are theoretically reusable, single threaded approach would reuse one
	public void setTable(DataStructureTable table, HashMap<String, HashSet<String>> references, FileNode node) {

		this.table = table;
		this.references = references;
		this.node = node;
	}
	/**
	 * Returns the Excel column lettering for the specified column number
	 * 
	 * @param columnNum
	 * @return
	 */
	public String convertColumnNumToChar(Integer columnNum) {
		String columnName = "";
		Integer dividend = columnNum;
		Integer modulo;
		if (dividend != null) {
			while (dividend > 0) {
				modulo = (dividend - 1) % 26;
				columnName = columnName + ((char) (modulo + 65));
				dividend = (dividend - modulo) / 26;
			}
		}
		return columnName;
	}

	public String getConstraintType(String rowRef) throws RuntimeException {

		String[] split = rowRef.substring(1).split("\\" + ValidationConstants.VALUE_REFERENCE_DIVIDER);
		MapElement current = getElement(split[0], split[1]);

		return current.getStructuralDataElement().getType().name();
	}

	public void validate() {
		// This set will be used to validate duplicate file names if applicable.
		Set<String> fileNames = new HashSet<String>();

		normer = new Normalizer(dictionary, ranger, translations);

		if (FileType.TRANSLATION_RULE.equals(node.getType())) {
			if (normer.validate() != null) {
				table.addOutput(new ValidationOutput(table, OutputType.ERROR, -1, -1, "The form structure "
						+ normer.validate() + " referenced in the translation rule does not exist in your data."));
			}
		} else {
			try {

				StructuralFormStructure structure = table.getStructure();
				Vector<MapElement> elements = new Vector<MapElement>(); // populate with only the
																		// Elements that are present
																		// in this table

				HashMap<MapElement, List<Accession>> accessions = new HashMap<MapElement, List<Accession>>();// element
																												// to
																												// column
																												// data

				
				for (MapElement me : table.getStructure().getDataElements()) {
					// AbstractDataElement element = DictionaryAccessor.getDataElementByName( structure, elementName,
					// null );
					elements.add(me);
					if (DataType.GUID.equals(me.getStructuralDataElement().getType())) {
						accessions.put(me, new ArrayList<Accession>());
					}
				}

				// HashMap<String, String> elementValues = new HashMap<String, String>(); // element name to row data

				// Find the main repeatable group. This is important for conditionally required elements.
				RepeatableGroupTable mainTable = null;
				for (int search = 0; search < table.getColumnCount(); search++) {
					RepeatableGroupTable rgTable = table.getRepeatableGroupTable(search);

					if (rgTable.findColumn(ApplicationsConstants.GUID) > -1) {
						mainTable = rgTable;
						break;
					}
				}
				
				if(mainTable != null) {
					setGuidIndex(mainTable);
				}
				
				
				// subject_row_id = current row (a single subject); repeatable_group_id = current column( type of
				// repeatable repeatable group) in data structure table
				
				Vector<Vector<Vector<String>>> columnNameVector = new Vector<Vector<Vector<String>>>();
				Vector<Vector<Vector<String>>> dataVector = new Vector<Vector<Vector<String>>>();
				for (int subject_row_id = 0; subject_row_id < table.getRowCount(); subject_row_id++) {
					columnNameVector.clear();
					dataVector.clear();
					// for each repeatable group
					for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
						columnNameVector.add(new Vector<Vector<String>>());
						dataVector.add(new Vector<Vector<String>>());
						RepeatableGroupTable rgTable = table.getRepeatableGroupTable(repeatable_group_id);
						RepeatableGroup rg = rgTable.getRepeatableGroup();
						ArrayList<Integer> rgEntries =
								table.getAllReferences(subject_row_id, repeatable_group_id, null);

						validateRepeatableGroupCount(subject_row_id, repeatable_group_id, rg, rgEntries);

						// group_row_index = iteration over all the rgs in a single cell on the DS table;
						// group_column_index = column position of the elements in the rg
						
						for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
							columnNameVector.get(repeatable_group_id).add(new Vector<String>());
							dataVector.get(repeatable_group_id).add(new Vector<String>());
							for (int group_column_index = 0; group_column_index < rgTable.getColumnCount(); group_column_index++) {
								MapElement mapElement = rgTable.getElementMapping(group_column_index);

								if (mapElement.getStructuralDataElement().getStatus().equals(DataElementStatus.RETIRED)) {
									table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, rgEntries
											.get(group_row_index), group_column_index, structure.getShortName()
											+ ServiceConstants.RETIRED_DE_IN_FS_MSG
											+ mapElement.getStructuralDataElement().getName()));
								}

								// run the raw data through the translation rule
								/*
								 * String data = normer.normalize(structure, mapElement.getStructuralDataElement(),
								 * (String) rgTable.getValueAt(rgEntries.get(group_row_index),
								 * group_column_index)).trim();
								 */
								String data =
										normer.normalize(structure, mapElement.getStructuralDataElement(),
												(String) rgTable.getValueAt(rgEntries.get(group_row_index),
														group_column_index));
								if (data != null) {
									data = data.trim();
								}
				
								String currentColumnName = rgTable.getColumnName(group_column_index);
								columnNameVector.get(repeatable_group_id).get(group_row_index).add(currentColumnName);
								dataVector.get(repeatable_group_id).get(group_row_index).add(data);
						         
								

								DataType dataElementType = mapElement.getStructuralDataElement().getType();
								// Mess around with the slashes in the file path
								if ((DataType.FILE.equals(dataElementType)
										|| DataType.THUMBNAIL.equals(dataElementType) || DataType.TRIPLANAR
											.equals(dataElementType)) && data != null && !data.isEmpty()) {

									// make sure to remove the absolute path
									FileNode parent = (FileNode) node.getParent();
									if (data.toLowerCase().startsWith(parent.getConicalPath().toLowerCase())) {
										data = data.substring(parent.getConicalPath().length());
									}

									if (!data.startsWith("\\") && !data.startsWith("/")) {
										data = "/" + data;
									}
									data = data.replace("\\", "/");

								}

								// flag used by conditionally required to denote required status without having to
								// change map element states
								boolean required = false;

								// Check to make sure that the data isn't empty if it is required
								if ((required || RequiredType.REQUIRED.equals(mapElement.getRequiredType()))
										&& (data == null || data.isEmpty())) {
									String message =
											String.format(ApplicationsConstants.LOC_ROW_COLUMN_NAME,
													getRawDataRow(subject_row_id, group_row_index),
													convertColumnNumToChar(rgTable.getDataFilePositionMapping(group_column_index)),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(group_column_index));

									message =
											message
													+ String.format(ApplicationsConstants.ERR_COLUMN_REQUIRED,
															table.getStructureName());

									table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, rgEntries
											.get(group_row_index), group_column_index, message));
									required = false;
								}

								// if the data is empty, and it is recommended, add a warning
								if (RequiredType.RECOMMENDED.equals(mapElement.getRequiredType())
										&& (data == null || data.isEmpty()) && table.getWarningCount() < MAX_WARNINGS_SIZE) {

									String message =
											String.format(ApplicationsConstants.LOC_ROW_COLUMN_NAME,
													getRawDataRow(subject_row_id, group_row_index),
													convertColumnNumToChar(rgTable.getDataFilePositionMapping(group_column_index)),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(group_column_index));

									message =
											message
													+ String.format(ApplicationsConstants.ERR_COLUMN_RECOMMENDED,
															table.getStructureName());

									table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, rgEntries
											.get(group_row_index), group_column_index, message));
								}
								// Validate contents of cell
								if (data != null && !data.isEmpty()) {

									// validate type
									if (!typer.validate(mapElement, data)) {
										String message =
												String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data,
														getRawDataRow(subject_row_id, group_row_index),
														convertColumnNumToChar(rgTable.getDataFilePositionMapping(group_column_index)),
														rgTable.getRepeatableGroupName(),
														rgTable.getColumnName(group_column_index));

										message =
												message
														+ String.format(ApplicationsConstants.ERR_TYPE_INCORRECT,
																mapElement.getStructuralDataElement().getType()
																		.getValue());
										if(mapElement.getStructuralDataElement().getType() == DataType.DATE) {
											message = message.concat(String.format(ApplicationsConstants.ERR_DATE_ADDENDUM));
										}

										table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, rgEntries
												.get(group_row_index), group_column_index, message));

										//validate if data in value range contains duplicates
									} else if (ranger.hasDuplicates(data).size() > 0){
										String message =
												String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data,
														getRawDataRow(subject_row_id, group_row_index),
														convertColumnNumToChar(rgTable.getDataFilePositionMapping(group_column_index)),
														rgTable.getRepeatableGroupName(),
														rgTable.getColumnName(group_column_index));
										message = message + String.format(ApplicationsConstants.ERR_DUPLICATE_RANGE_VALUE, 
																ranger.hasDuplicates(data).toString());
										
										table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, rgEntries
												.get(group_row_index), group_column_index, message));
										
										// validate range
									} else if (!ranger.validate(mapElement, data)) {
										String message =
												String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data,
														getRawDataRow(subject_row_id, group_row_index),
														convertColumnNumToChar(rgTable.getDataFilePositionMapping(group_column_index)),
														rgTable.getRepeatableGroupName(),
														rgTable.getColumnName(group_column_index));
										if (DataType.DATE.equals(dataElementType)) {
											message = message + String.format(ApplicationsConstants.ERR_RANGE_DATE);
										} else {
											message = message.concat(String.format(ranger.pvOutsideRange(data, 
													mapElement.getStructuralDataElement())));
											message =
													message
															+ String.format(ApplicationsConstants.ERR_RANGE_INCORRECT,
																	mapElement.getStructuralDataElement()
																			.displayValueRange());
										}
										table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, rgEntries
												.get(group_row_index), group_column_index, message));

									} else if (!xmlValidator.validate(mapElement, data)) {
										String message =
												String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data,
														getRawDataRow(subject_row_id, group_row_index),
														convertColumnNumToChar(rgTable.getDataFilePositionMapping(group_column_index)),
														rgTable.getRepeatableGroupName(),
														rgTable.getColumnName(group_column_index));

										message = message + String.format(ApplicationsConstants.ERR_INVALID_CHAR);

										table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, rgEntries
												.get(group_row_index), group_column_index, message));

									} else {

										// evaluateConditional( elementValues,
										// name,
										// type,
										// data,
										// loc,
										// i );

										if (DataType.ALPHANUMERIC.equals(dataElementType)) {

											validateAlphanumeric(subject_row_id, rgTable, rgEntries, group_row_index,
													group_column_index, mapElement.getStructuralDataElement(), data);

										} else if (DataType.BIOSAMPLE.equals(dataElementType)) {
											validateBiosample(subject_row_id, rgTable, rgEntries, group_row_index,
													group_column_index, mapElement.getStructuralDataElement(), data);
										} else if (DataType.NUMERIC.equals(dataElementType)) {
											validateInputRestrictions(subject_row_id, rgTable, rgEntries,
													group_row_index, group_column_index,
													mapElement.getStructuralDataElement(), data);

										} else if (DataType.FILE.equals(dataElementType)
												|| DataType.THUMBNAIL.equals(dataElementType)
												|| DataType.TRIPLANAR.equals(dataElementType)) {
											validateFile(subject_row_id, rgTable, rgEntries, group_row_index,
													group_column_index, mapElement.getStructuralDataElement(), data,
													fileNames);
										}

										// Accession type - populate a list of accessions per column
										if (DataType.GUID.equals(mapElement.getStructuralDataElement().getType())
												&& (accClient != null)) {
											accessions.get(mapElement).add(new Accession(data));
										}
									}// end of valid type/range else statement
								}// end if(!data.isEmpty())
							}// end group_column_index
						}// end group_row_index
					}// end repeatable_group_id 
					
					if(!isComingFromProforms) {
						validateCalculation(structure, columnNameVector, dataVector, subject_row_id, table);
					}
					
				}// end subject_row_id
				

				// For each column that is an accession pass to the provider and find failures
				for (MapElement mapElement : accessions.keySet()) {
					// cast element as a ME to get the RG name and pass it along to the validation method
					String elementRGName = mapElement.getRepeatableGroup().getName();

					String name = mapElement.getStructuralDataElement().getName();
					String type = mapElement.getStructuralDataElement().getType().name();

					// logger.info("This is the name of the map element being processed " + name);

					if (!accessions.get(mapElement).isEmpty()) {
						validateAccessions(accessions, mapElement, name, type, elementRGName);

					}

				}
			}// end try
			catch (Exception e) {
				e.printStackTrace();
				String message =
						"An unknown exception has been encountered preventing validation from completing. Please submit a ticket regarding this file.";
				table.addOutput(new ValidationOutput(table, OutputType.ERROR, -1, -1, message));
			}
		}
	}
	
	private void validateCalculation(StructuralFormStructure structure, 
			Vector<Vector<Vector<String>>> columnNameVector, 
			Vector<Vector<Vector<String>>> dataVector,
			int subject_row_id, DataStructureTable table) throws Exception {
		// Note that the repeatable_group_id may not occur in the same
		// order as in the source file.  This must be taken into account
		// in validatePSQI where calculations require a visit date, in
		// validateCOWAT, and in validateAUDITC where the components and
		// sum are in different repeatable_group_id.
	    String shortName = structure.getShortName();
	    //System.out.println("shortName = " + shortName);
	    if ((extraValidation != null) && 
	    		(extraValidation.get(shortName) != null) && extraValidation.get(shortName)) {
	    	if (shortName.equalsIgnoreCase("ASSIST_FITBIR")) {
				validateASSIST(structure, columnNameVector, dataVector, subject_row_id, 
						table);
			}
	    	else if (shortName.equalsIgnoreCase("AUDITC")) {
				validateAUDITC(structure, columnNameVector, dataVector, subject_row_id, 
						table);
			}
	    	else if (shortName.equalsIgnoreCase("AUDIT_FITBIR")) {
				validateAUDIT(structure, columnNameVector, dataVector, subject_row_id, 
						table);
			}
	    	else if (shortName.equalsIgnoreCase("BAI")) {
				validateBAI(structure, columnNameVector, dataVector, subject_row_id, 
						table);
			}
	    	else if (shortName.equalsIgnoreCase("BESS")) {
				validateBESS(structure, columnNameVector, dataVector, subject_row_id, 
						table);
			}
	    	else if (shortName.equalsIgnoreCase("BDI2")) {
				validateBDI2(structure, columnNameVector, dataVector, subject_row_id, 
						table);
			}
			else if (shortName.equalsIgnoreCase("BSI18")) {
				validateBSI18(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("BVMTR")) {
				validateBVMTR(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("COWAT")) {
				validateCOWAT(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("DAST10")) {
				validateDAST10(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("DHI")) {
				validateDHI(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("DRRI2COMBAT")) {
				validateDRRI2COMBAT(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("DRS_TBI_FITBIR")) {
				validateDRS(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("FIM_Instrument")) {
				validateFIM(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("GCS")) {
				validateGCS(structure, columnNameVector, dataVector, subject_row_id,
					    table);
			}
			else if (shortName.equalsIgnoreCase("GOSE_Peds")) {
				validateGOSE_Peds(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("GOSE_Standard")) {
				validateGOSE_Standard(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("GPT")) {
				validateGPT(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("HIT6")) {
				validateHIT6(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("ImPACT")) {
				validateImPACT(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("InsomniaSeverityIndex_FIT")) {
				validateInsomnia(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("KingDevickTest")) {
				validateKingDevick(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("MDS_UPDRS")) {
				validateMDS_UPDRS(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("MoCA")) {
				validateMoCA(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("MPAI4")) {
				validateMPAI4(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("NSI1")) {
				validateNSI1(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("PCSI_P")) {
				validatePCSI_P(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("PHQ9")) {
				validatePHQ9(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("PSQI")) {
				validatePSQI(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (shortName.equalsIgnoreCase("PCLC_Standard")) {
				validatePCLC_Standard(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (structure.getShortName().equalsIgnoreCase("Rivermead")) {
				validateRivermead(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (structure.getShortName().equalsIgnoreCase("SCAT3")) {
				validateSCAT3(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (structure.getShortName().equalsIgnoreCase("SF12")) {
				validateSF12(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (structure.getShortName().equalsIgnoreCase("SF36v2")) {
				validateSF36v2(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (structure.getShortName().equalsIgnoreCase("SWLS_CDISC_FITBIR")) {
				validateSWLS(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (structure.getShortName().equalsIgnoreCase("TMT_Standard")) {
				validateTMT(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (structure.getShortName().equalsIgnoreCase("TOMM")) {
				validateTOMM(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
			else if (structure.getShortName().equalsIgnoreCase("VOMS")) {
				validateVOMS(structure, columnNameVector, dataVector, subject_row_id,
						table);
			}
	    }
	}
 
	private void validateAUDITC(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	AUDITC
		// table.getColumnCount = 4
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBIMB932RL7
		// group_column_index = 1 group_column_name = subjectidnum data = 1234
		// group_column_index = 2 group_column_name = ageyrs data = 56
		// group_column_index = 3 group_column_name = vitstatus data = Alive
		// group_column_index = 4 group_column_name = visitdate data = 22-Apr-51
		// group_column_index = 5 group_column_name = sitename data = Gqgjrs
		// group_column_index = 6 group_column_name = dayssincebaseline data = 0
		// group_column_index = 7 group_column_name = casecontrlind data = Case
		// group_column_index = 8 group_column_name = generalnotestxt data = male
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = AUDITC
		// rgTable.getSize() = 3
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 3
		// group_column_index = 0 group_column_name = auditdrnkcontainalcfreqscore data = 0
		// group_column_index = 1 group_column_name = auditalcdrnktypcldaynumscore data = 2
		// group_column_index = 2 group_column_name = auditmorethan6alcdrnkfreqscore data = 1
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = contexttype data = Last month
		// group_column_index = 1 group_column_name = contexttypeoth data = null
		// group_column_index = 2 group_column_name = datasource data = null
		// group_column_index = 3 group_column_name = datasourceoth data = null
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = AUDITC Scoring
		// rgTable.getSize() = 1
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 1
		// group_column_index = 0 group_column_name = auditctotalscore data = 3
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveAUDITC = true;
        RepeatableGroupTable AUDITCTable = null;
        int AUDITCIndex[] = new int[3];
        for (i = 0; i < 3; i++) {
        	AUDITCIndex[i] = -1;
        }
        boolean haveAUDITCScoring = true;
        RepeatableGroupTable AUDITCScoringTable = null;
        int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("AUDITC")) {
					haveAUDITC = false;
					AUDITCTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("AUDITC Scoring")) {
					haveAUDITCScoring = false;
					AUDITCScoringTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			 // System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		    // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		    // for (i = 0; i < columnNameVector.size(); i++) {
		    //   System.out.println("group_column_index = " + i +
		    //    " group_column_name = " + columnNameVector.get(i) +
		    //   " data = " + dataVector.get(i)) ;	
		    // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("AUDITC")) {
				if (columnNameVector.get(i).equalsIgnoreCase("auditdrnkcontainalcfreqscore")) {
					AUDITCIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("auditalcdrnktypcldaynumscore")) {
					AUDITCIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("auditmorethan6alcdrnkfreqscore")) {
					AUDITCIndex[2] = bufSizeIndex;
				}	
			}
			else if (repeatableGroupName.equalsIgnoreCase("AUDITC Scoring")) {
				if (columnNameVector.get(i).equalsIgnoreCase("auditctotalscore")) {
				    totalScoreIndex = bufSizeIndex;	
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveAUDITC) {
			numberScoresMissing = 3;
			for (i = 0; i <= 2; i++) {
				if (AUDITCTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									AUDITCTable.getRepeatableGroupName(),
									AUDITCTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(AUDITCTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									AUDITCTable.getDataFilePositionMapping(i),
									AUDITCTable.getRepeatableGroupName(),
									AUDITCTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(AUDITCTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							AUDITCTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 2; i++)			
	    } // if (!haveAUDITC)
		else { // haveAUDITC
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
			for (j = 0; j < AUDITCIndex.length; j++) { 
		    	i = AUDITCIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					        calculatedTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		} // else haveAUDITC
		
		if (!haveAUDITCScoring) {
			if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
				if (AUDITCScoringTable.getDataFilePositionMapping(0) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									AUDITCScoringTable.getRepeatableGroupName(),
									AUDITCScoringTable.getColumnName(0));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											"blank",String.valueOf(calculatedTotalScore));
					table.addOutput(new ValidationOutput(AUDITCScoringTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									AUDITCScoringTable.getDataFilePositionMapping(0),
									AUDITCScoringTable.getRepeatableGroupName(),
									AUDITCScoringTable.getColumnName(0));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											"blank",String.valueOf(calculatedTotalScore));
					table.addOutput(new ValidationOutput(AUDITCScoringTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							AUDITCScoringTable.getDataFilePositionMapping(0), message));
				}
			} // if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0))
	    } // if (!haveAUDITCScoring)
		else { // haveAUDITCScoring
			if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1,message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveAUDITCScoring
	}
	
	private void validateAUDIT(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	AUDIT_FITBIR
		// table.getColumnCount = 2
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBI_INVXN170PVJ
		// group_column_index = 1 group_column_name = subjectidnum data = 1BI_01
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = visitdate data = 2016-10-25T00:00:00Z
		// group_column_index = 4 group_column_name = sitename data = University of Miami
		// group_column_index = 5 group_column_name = dayssincebaseline data = 150
		// group_column_index = 6 group_column_name = casecontrlind data = control
		// group_column_index = 7 group_column_name = generalnotestxt data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = AUDIT
		// rgTable.getSize() = 11
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 11
		// group_column_index = 0 group_column_name = auditdrnkcontainalcfreqscore data = 1
		// group_column_index = 1 group_column_name = auditalcdrnktypcldaynumscore data = 0
		// group_column_index = 2 group_column_name = auditmorethan6alcdrnkfreqscore data = 1
		// group_column_index = 3 group_column_name = auditcantstopdrnkalcfreqscore data = 0
		// group_column_index = 4 group_column_name = auditfailnrmlactdrnkfreqscore data = 0
		// group_column_index = 5 group_column_name = auditmorndrnkaftdrnkfreqscore data = 0
		// group_column_index = 6 group_column_name = auditgltrmrseaftrdrnkfreqscore data = 0
		// group_column_index = 7 group_column_name = auditcantrmbrnghtbefrfreqscore data = 0
		// group_column_index = 8 group_column_name = auditdrnkinjindscore data = 0
		// group_column_index = 9 group_column_name = auditreltvfrnddrcncrnindscore data = 0
		// group_column_index = 10 group_column_name = audittotalscore data = 2
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    boolean haveAUDIT = true;
        RepeatableGroupTable AUDITTable = null;
        int alwaysIndex[] = new int[5];
        for (i = 0; i < 5; i++) {
        	alwaysIndex[i] = -1;
        }
        boolean haveZero = false; 
        int sometimesIndex[] = new int[5];
        for (i = 0; i < 5; i++) {
        	sometimesIndex[i] = -1;
        }
        int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("AUDIT")) {
					haveAUDIT = false;
					AUDITTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		     // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		     // for (i = 0; i < columnNameVector.size(); i++) {
		     //  System.out.println("group_column_index = " + i +
		     //   " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		     //}
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("AUDIT")) {
				if (columnNameVector.get(i).equalsIgnoreCase("auditdrnkcontainalcfreqscore")) {
					alwaysIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("auditalcdrnktypcldaynumscore")) {
					alwaysIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("auditmorethan6alcdrnkfreqscore")) {
					alwaysIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("auditdrnkinjindscore")) {
					alwaysIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("auditreltvfrnddrcncrnindscore")) {
					alwaysIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("auditcantstopdrnkalcfreqscore")) {
					sometimesIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("auditfailnrmlactdrnkfreqscore")) {
					sometimesIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("auditmorndrnkaftdrnkfreqscore")) {
					sometimesIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("auditgltrmrseaftrdrnkfreqscore")) {
					sometimesIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("auditcantrmbrnghtbefrfreqscore")) {
					sometimesIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("audittotalscore")) {
				    totalScoreIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveAUDIT) {
			for (i = 0; i <= 9; i++) {
				if (AUDITTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									AUDITTable.getRepeatableGroupName(),
									AUDITTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(AUDITTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									AUDITTable.getDataFilePositionMapping(i),
									AUDITTable.getRepeatableGroupName(),
									AUDITTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(AUDITTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							AUDITTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 9; i++)			
	    } // if (!haveAUDIT)
		else { // haveAUDIT
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
			for (j = 0; j < alwaysIndex.length; j++) { 
		    	i = alwaysIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if (((j == 1) || (j == 2)) && (value == 0)) {
					    	   haveZero = true;
					       }
					       calculatedTotalScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			for (j = 0; j < sometimesIndex.length; j++) { 
		    	i = sometimesIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		if (!haveZero) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    		}
			    	}
			    	else {
						try {
					       calculatedTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveAUDIT
	}
	
	private void validateASSIST(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = NIHAL202EFTR5
		// group_column_index = 1 group_column_name = subjectidnum data = 116
		// group_column_index = 2 group_column_name = ageyrs data = 66
		// group_column_index = 3 group_column_name = visitdate data = 2017-01-01T00:00:00Z
		// group_column_index = 4 group_column_name = sitename data = University of Washington
		// group_column_index = 5 group_column_name = dayssincebaseline data = null
		// group_column_index = 6 group_column_name = casecontrlind data = null
		// group_column_index = 7 group_column_name = generalnotestxt data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = contexttype data = null
		// group_column_index = 1 group_column_name = contexttypeoth data = null
		// group_column_index = 2 group_column_name = datasource data = Participant/subject
		// group_column_index = 3 group_column_name = datasourceoth data = null
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = ASSIST
		// rgTable.getSize() = 80
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 80
		// group_column_index = 0 group_column_name = assisttobaccoproductuseind data = 3
		// group_column_index = 1 group_column_name = assistalcoholicbeverageind data = 3
		// group_column_index = 2 group_column_name = assistcannabisuseind data = 3
		// group_column_index = 3 group_column_name = assistcocaineuseind data = 0
		// group_column_index = 4 group_column_name = assistamphtmntypstmlntuseind data = 3
		// group_column_index = 5 group_column_name = assistinhalantuseind data = 0
		// group_column_index = 6 group_column_name = assistsedativesleeppillind data = 0
		// group_column_index = 7 group_column_name = assisthallucinogenuseind data = 0
		// group_column_index = 8 group_column_name = assistopioiduseind data = 0
		// group_column_index = 9 group_column_name = assistothrnonmedclsubuseind data = 0
		// group_column_index = 10 group_column_name = assisttobaccoproductusefreq data = 6
		// group_column_index = 11 group_column_name = assistalcoholicbeveragefreq data = 2
		// group_column_index = 12 group_column_name = assistcannabisusefreq data = 4
		// group_column_index = 13 group_column_name = assistcocaineusefreq data = 0
		// group_column_index = 14 group_column_name = assistamphtmntypstmlntusefreq data = 2
		// group_column_index = 15 group_column_name = assistinahalantusefreq data = 0
		// group_column_index = 16 group_column_name = assistsedativesleeppillfreq data = 0
		// group_column_index = 17 group_column_name = assisthallucinogenusefreq data = 0
		// group_column_index = 18 group_column_name = assistopioidusefreq data = 0
		// group_column_index = 19 group_column_name = assistothrnonmedclsubusefreq data = 0
		// group_column_index = 20 group_column_name = assistdsrtobaccoproductfreq data = 6
		// group_column_index = 21 group_column_name = assistdsralcoholicbeveragefreq data = 5
		// group_column_index = 22 group_column_name = assistdsrcannabisfreq data = 5
		// group_column_index = 23 group_column_name = assistdsrcocainefreq data = 0
		// group_column_index = 24 group_column_name = assistdsramphtmntypstmlntfreq data = 0
		// group_column_index = 25 group_column_name = assistdsrinhalantfreq data = 0
		// group_column_index = 26 group_column_name = assistdsrsedativesleeppillfreq data = 0
		// group_column_index = 27 group_column_name = assistdsrhallucinogenfreq data = 0
		// group_column_index = 28 group_column_name = assistdsropioidfreq data = 0
		// group_column_index = 29 group_column_name = assistdsrothersubfreq data = 0
		// group_column_index = 30 group_column_name = assisttobaccoproductprblmfreq data = 0
		// group_column_index = 31 group_column_name = assistalcohlcbeverageprblmfreq data = 0
		// group_column_index = 32 group_column_name = assistcannabisprblmfreq data = 0
		// group_column_index = 33 group_column_name = assistcocaineprblmfreq data = 0
		// group_column_index = 34 group_column_name = assistinahalantprblmfreq data = 0
		// group_column_index = 35 group_column_name = assistamphtmntypstmlntprblmfrq data = 0
		// group_column_index = 36 group_column_name = assistsedativsleppillprblmfreq data = 0
		// group_column_index = 37 group_column_name = assisthallucinogenprblmfreq data = 0
		// group_column_index = 38 group_column_name = assistopioidprblmfreq data = 0
		// group_column_index = 39 group_column_name = assistothrsubprblmfreq data = 0
		// group_column_index = 40 group_column_name = assistalcoholcbeveragefailfreq data = 0
		// group_column_index = 41 group_column_name = assistcannabisfailfreq data = 0
		// group_column_index = 42 group_column_name = assistcocainefailfreq data = 0
		// group_column_index = 43 group_column_name = assistamphtmntypstmlntfailfreq data = 0
		// group_column_index = 44 group_column_name = assistinhalantfailfreq data = 0
		// group_column_index = 45 group_column_name = assistsedativsleeppillfailfreq data = 0
		// group_column_index = 46 group_column_name = assisthallucinogenfailfreq data = 0
		// group_column_index = 47 group_column_name = assistopioidfailfreq data = 0
		// group_column_index = 48 group_column_name = assistothersubfailfreq data = 0
		// group_column_index = 49 group_column_name = assisttobaccoproductconcernind data = 0
		// group_column_index = 50 group_column_name = assistalcoholcbeveragconcrnind data = 0
		// group_column_index = 51 group_column_name = assistcannabisconcernind data = 0
		// group_column_index = 52 group_column_name = assistcocaineconcernind data = 0
		// group_column_index = 53 group_column_name = assistamphtmntypstmlntcncrnind data = 0
		// group_column_index = 54 group_column_name = assistinhalantconcernind data = 0
		// group_column_index = 55 group_column_name = assistsedativsleeppillcncrnind data = 0
		// group_column_index = 56 group_column_name = assisthallucinogenconcernind data = 0
		// group_column_index = 57 group_column_name = assistopioidconcernind data = 0
		// group_column_index = 58 group_column_name = assistothersubconcernind data = 0
		// group_column_index = 59 group_column_name = assisttobaccoprdctfailcntrlind data = 0
		// group_column_index = 60 group_column_name = assistalcohlcbvragfailcntrlind data = 0
		// group_column_index = 61 group_column_name = assistcannabisfailcntrlind data = 0
		// group_column_index = 62 group_column_name = assistcocainefailcntrlfreq data = 0
		// group_column_index = 63 group_column_name = assistamphtntypstmltflcntrlind data = 0
		// group_column_index = 64 group_column_name = assistinhalantfailcntrlind data = 0
		// group_column_index = 65 group_column_name = assistsedativslppillflcntrlind data = 0
		// group_column_index = 66 group_column_name = assisthallucinogenfailcntrlind data = 0
		// group_column_index = 67 group_column_name = assistopioidfailcntrlind data = 0
		// group_column_index = 68 group_column_name = assistothersubfailcntrlind data = 0
		// group_column_index = 69 group_column_name = assistdrugbyinjectionind data = 0
		// group_column_index = 70 group_column_name = assisttotalascore data = 12
		// group_column_index = 71 group_column_name = assisttotalbscore data = 7
		// group_column_index = 72 group_column_name = assisttotalcscore data = 9
		// group_column_index = 73 group_column_name = assisttotaldscore data = 0
		// group_column_index = 74 group_column_name = assisttotalescore data = 2
		// group_column_index = 75 group_column_name = assisttotalfscore data = 0
		// group_column_index = 76 group_column_name = assisttotalgscore data = 0
		// group_column_index = 77 group_column_name = assisttotalhscore data = 0
		// group_column_index = 78 group_column_name = assisttotaliscore data = 0
		// group_column_index = 79 group_column_name = assisttotaljscore data = 0
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    boolean haveAssist = true;
	    RepeatableGroupTable assistTable = null;
	    int tobaccoIndex[] = new int[5];
	    for (i = 0; i < 5; i++) {
	    	tobaccoIndex[i] = -1;
	    }
	    int alcoholIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	alcoholIndex[i] = -1;
	    }
	    int cannabisIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	cannabisIndex[i] = -1;
	    }
	    int cocaineIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	cocaineIndex[i] = -1;
	    }
	    int amphetamineIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	amphetamineIndex[i] = -1;
	    }
	    int inhalantsIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	inhalantsIndex[i] = -1;
	    }
	    int sedativesIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	sedativesIndex[i] = -1;
	    }
	    int hallucinogensIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	hallucinogensIndex[i] = -1;
	    }
	    int opioidsIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	opioidsIndex[i] = -1;
	    }
	    int otherIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	otherIndex[i] = -1;
	    }
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    
	    int totalTobaccoIndex = -1;
	    int totalAlcoholIndex = -1;
	    int totalCannabisIndex = -1;
	    int totalCocaineIndex = -1;
	    int totalAmphetamineIndex = -1;
	    int totalInhalantsIndex = -1;
	    int totalSedativesIndex = -1;
	    int totalHallucinogensIndex = -1;
	    int totalOpioidsIndex = -1;
	    int totalOtherIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("ASSIST")) {
				    haveAssist = false;
				    assistTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		    // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		     //for (i = 0; i < columnNameVector.size(); i++) {
		     //   System.out.println("group_column_index = " + i +
		     //   " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		      // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("ASSIST")) {
				if (columnNameVector.get(i).equalsIgnoreCase("assisttobaccoproductusefreq")) {
	                tobaccoIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistdsrtobaccoproductfreq")) {
					tobaccoIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttobaccoproductprblmfreq")) {
					tobaccoIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttobaccoproductconcernind")) {
					tobaccoIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttobaccoprdctfailcntrlind")) {
					tobaccoIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistalcoholicbeveragefreq")) {
					alcoholIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistdsralcoholicbeveragefreq")) {
					alcoholIndex[1] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistalcohlcbeverageprblmfreq")) {
					alcoholIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistalcoholcbeveragefailfreq")) {
					alcoholIndex[3] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistalcoholcbeveragconcrnind")) {
					alcoholIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistalcohlcbvragfailcntrlind")) {
	               alcoholIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistcannabisusefreq")) {
					cannabisIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistdsrcannabisfreq")) {
					cannabisIndex[1] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistcannabisprblmfreq")) {
					cannabisIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistcannabisfailfreq")) {
					cannabisIndex[3] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistcannabisconcernind")) {
					cannabisIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistcannabisfailcntrlind")) {
	               cannabisIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistcocaineusefreq")) {
					cocaineIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistdsrcocainefreq")) {
					cocaineIndex[1] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistcocaineprblmfreq")) {
					cocaineIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistcocainefailfreq")) {
					cocaineIndex[3] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistcocaineconcernind")) {
					cocaineIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistcocainefailcntrlfreq")) {
	               cocaineIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistamphtmntypstmlntusefreq")) {
					amphetamineIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistdsramphtmntypstmlntfreq")) {
					amphetamineIndex[1] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistamphtmntypstmlntprblmfrq")) {
					amphetamineIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistamphtmntypstmlntfailfreq")) {
					amphetamineIndex[3] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistamphtmntypstmlntcncrnind")) {
					amphetamineIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistamphtntypstmltflcntrlind")) {
	               amphetamineIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistinahalantusefreq")) {
					inhalantsIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistdsrinhalantfreq")) {
					inhalantsIndex[1] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistinahalantprblmfreq")) {
					inhalantsIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistinhalantfailfreq")) {
					inhalantsIndex[3] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistinhalantconcernind")) {
					inhalantsIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistinhalantfailcntrlind")) {
	               inhalantsIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistsedativesleeppillfreq")) {
					sedativesIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistdsrsedativesleeppillfreq")) {
					sedativesIndex[1] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistsedativsleppillprblmfreq")) {
					sedativesIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistsedativsleeppillfailfreq")) {
					sedativesIndex[3] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistsedativsleeppillcncrnind")) {
					sedativesIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistsedativslppillflcntrlind")) {
	               sedativesIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisthallucinogenusefreq")) {
					hallucinogensIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistdsrhallucinogenfreq")) {
					hallucinogensIndex[1] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisthallucinogenprblmfreq")) {
					hallucinogensIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisthallucinogenfailfreq")) {
					hallucinogensIndex[3] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisthallucinogenconcernind")) {
					hallucinogensIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisthallucinogenfailcntrlind")) {
	               hallucinogensIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistopioidusefreq")) {
					opioidsIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistdsropioidfreq")) {
					opioidsIndex[1] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistopioidprblmfreq")) {
					opioidsIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistopioidfailfreq")) {
					opioidsIndex[3] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistopioidconcernind")) {
					opioidsIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistopioidfailcntrlind")) {
	               opioidsIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistothrnonmedclsubusefreq")) {
					otherIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistdsrothersubfreq")) {
					otherIndex[1] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistothrsubprblmfreq")) {
					otherIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistothersubfailfreq")) {
					otherIndex[3] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistothersubconcernind")) {
					otherIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assistothersubfailcntrlind")) {
	               otherIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttotalascore")) {
					totalTobaccoIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttotalbscore")) {
					totalAlcoholIndex = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttotalcscore")) {
					totalCannabisIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttotaldscore")) {
					totalCocaineIndex = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttotalescore")) {
					totalAmphetamineIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttotalfscore")) {
	               totalInhalantsIndex = bufSizeIndex;	
				}	
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttotalgscore")) {
					totalSedativesIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttotalhscore")) {
					totalHallucinogensIndex = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttotaliscore")) {
					totalOpioidsIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("assisttotaljscore")) {
					totalOtherIndex = bufSizeIndex;		
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 18) || (age > 89)) {
					if (numberWarnings < 1000) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "18 to 89 years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "18 to 89 years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
						numberWarnings++;
					} // if (numberWarnings < 1000)
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalTobaccoScore = 0;
		int actualTotalTobaccoScore = -1;
		int calculatedTotalAlcoholScore = 0;
		int actualTotalAlcoholScore = -1;
		int calculatedTotalCannabisScore = 0;
		int actualTotalCannabisScore = -1;
		int calculatedTotalCocaineScore = 0;
		int actualTotalCocaineScore = -1;
		int calculatedTotalAmphetamineScore = 0;
		int actualTotalAmphetamineScore = -1;
		int calculatedTotalInhalantsScore = 0;
		int actualTotalInhalantsScore = -1;
		int calculatedTotalSedativesScore = 0;
		int actualTotalSedativesScore = -1;
		int calculatedTotalHallucinogensScore = 0;
		int actualTotalHallucinogensScore = -1;
		int calculatedTotalOpioidsScore = 0;
		int actualTotalOpioidsScore = -1;
		int calculatedTotalOtherScore = 0;
		int actualTotalOtherScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		int numberTobaccoScoresMissing = 0;
		int numberTobaccoScoresNotInteger = 0;
		int numberAlcoholScoresMissing = 0;
		int numberAlcoholScoresNotInteger = 0;
		int numberCannabisScoresMissing = 0;
		int numberCannabisScoresNotInteger = 0;
		int numberCocaineScoresMissing = 0;
		int numberCocaineScoresNotInteger = 0;
		int numberAmphetamineScoresMissing = 0;
		int numberAmphetamineScoresNotInteger = 0;
		int numberInhalantsScoresMissing = 0;
		int numberInhalantsScoresNotInteger = 0;
		int numberSedativesScoresMissing = 0;
		int numberSedativesScoresNotInteger = 0;
		int numberHallucinogensScoresMissing = 0;
		int numberHallucinogensScoresNotInteger = 0;
		int numberOpioidsScoresMissing = 0;
		int numberOpioidsScoresNotInteger = 0;
		int numberOtherScoresMissing = 0;
		int numberOtherScoresNotInteger = 0;
		if (!haveAssist) {
			for (i = 10; i <= 68; i++) {
				if (assistTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									assistTable.getRepeatableGroupName(),
									assistTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(assistTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									assistTable.getDataFilePositionMapping(i),
									assistTable.getRepeatableGroupName(),
									assistTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(assistTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							assistTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 10; i <= 68; i++)				
		} // (!haveAssist)
		else { // haveAssist
			Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
			for (j = 0; j < tobaccoIndex.length; j++) { 
		    	i = tobaccoIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberTobaccoScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalTobaccoScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberTobaccoScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    } // for (j = 0; j < tobaccoIndex.length; j++)
			
			for (j = 0; j < alcoholIndex.length; j++) { 
		    	i = alcoholIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberAlcoholScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalAlcoholScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberAlcoholScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    } // for (j = 0; j < alcoholIndex.length; j++)
			
			for (j = 0; j < cannabisIndex.length; j++) { 
		    	i = cannabisIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberCannabisScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalCannabisScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberCannabisScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    } // for (j = 0; j < cannabisIndex.length; j++)	
			
			for (j = 0; j < cocaineIndex.length; j++) { 
		    	i = cocaineIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberCocaineScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalCocaineScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberCocaineScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    } // for (j = 0; j < cocaineIndex.length; j++)
			
			for (j = 0; j < amphetamineIndex.length; j++) { 
		    	i = amphetamineIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberAmphetamineScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalAmphetamineScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberAmphetamineScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    } // for (j = 0; j < amphetamineIndex.length; j++)
			
			for (j = 0; j < inhalantsIndex.length; j++) { 
		    	i = inhalantsIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberInhalantsScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalInhalantsScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberInhalantsScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    } // for (j = 0; j < inhalantsIndex.length; j++)
			
			for (j = 0; j < sedativesIndex.length; j++) { 
		    	i = sedativesIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberSedativesScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalSedativesScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberSedativesScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    } // for (j = 0; j < sedativesIndex.length; j++)
			
			for (j = 0; j < hallucinogensIndex.length; j++) { 
		    	i = hallucinogensIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberHallucinogensScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalHallucinogensScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberHallucinogensScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    } // for (j = 0; j < hallucinogensIndex.length; j++)
			
			for (j = 0; j < opioidsIndex.length; j++) { 
		    	i = opioidsIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberOpioidsScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalOpioidsScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberOpioidsScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    } // for (j = 0; j < opioidsIndex.length; j++)
			
			for (j = 0; j < otherIndex.length; j++) { 
		    	i = otherIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberOtherScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalOtherScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberOtherScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    } // for (j = 0; j < otherIndex.length; j++)
			
			if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalTobaccoIndex >= 0) {
				data = bufDataVector.get(totalTobaccoIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalTobaccoIndex);
				group_row_index = bufGroup_row_index.get(totalTobaccoIndex);
				index = bufIndex.get(totalTobaccoIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberTobaccoScoresMissing == 0) && (numberTobaccoScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalTobaccoScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalTobaccoScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberTobaccoScoresMissing >= 1) || (numberTobaccoScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalTobaccoScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalTobaccoScore > -1) {
		    	if (actualTotalTobaccoScore != calculatedTotalTobaccoScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalTobaccoScore), String.valueOf(calculatedTotalTobaccoScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalTobaccoScore), String.valueOf(calculatedTotalTobaccoScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } //  if (totalTobaccoIndex >= 0)
		    
		    if (totalAlcoholIndex >= 0) {
				data = bufDataVector.get(totalAlcoholIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalAlcoholIndex);
				group_row_index = bufGroup_row_index.get(totalAlcoholIndex);
				index = bufIndex.get(totalAlcoholIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberAlcoholScoresMissing == 0) && (numberAlcoholScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalAlcoholScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalAlcoholScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberAlcoholScoresMissing >= 1) || (numberAlcoholScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalAlcoholScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalAlcoholScore > -1) {
		    	if (actualTotalAlcoholScore != calculatedTotalAlcoholScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalAlcoholScore), String.valueOf(calculatedTotalAlcoholScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalAlcoholScore), String.valueOf(calculatedTotalAlcoholScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } //  if (totalAlcoholIndex >= 0)
		    
		    if (totalCannabisIndex >= 0) {
				data = bufDataVector.get(totalCannabisIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalCannabisIndex);
				group_row_index = bufGroup_row_index.get(totalCannabisIndex);
				index = bufIndex.get(totalCannabisIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberCannabisScoresMissing == 0) && (numberCannabisScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalCannabisScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalCannabisScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberCannabisScoresMissing >= 1) || (numberCannabisScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalCannabisScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalCannabisScore > -1) {
		    	if (actualTotalCannabisScore != calculatedTotalCannabisScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalCannabisScore), String.valueOf(calculatedTotalCannabisScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalCannabisScore), String.valueOf(calculatedTotalCannabisScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } //  if (totalCannabisIndex >= 0)	
		    
		    if (totalCocaineIndex >= 0) {
				data = bufDataVector.get(totalCocaineIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalCocaineIndex);
				group_row_index = bufGroup_row_index.get(totalCocaineIndex);
				index = bufIndex.get(totalCocaineIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberCocaineScoresMissing == 0) && (numberCocaineScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalCocaineScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalCocaineScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberCocaineScoresMissing >= 1) || (numberCocaineScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalCocaineScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalCocaineScore > -1) {
		    	if (actualTotalCocaineScore != calculatedTotalCocaineScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalCocaineScore), String.valueOf(calculatedTotalCocaineScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalCocaineScore), String.valueOf(calculatedTotalCocaineScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } //  if (totalCocaineIndex >= 0

		    if (totalAmphetamineIndex >= 0) {
				data = bufDataVector.get(totalAmphetamineIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalAmphetamineIndex);
				group_row_index = bufGroup_row_index.get(totalAmphetamineIndex);
				index = bufIndex.get(totalAmphetamineIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberAmphetamineScoresMissing == 0) && (numberAmphetamineScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalAmphetamineScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalAmphetamineScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberAmphetamineScoresMissing >= 1) || (numberAmphetamineScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalAmphetamineScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalAmphetamineScore > -1) {
		    	if (actualTotalAmphetamineScore != calculatedTotalAmphetamineScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalAmphetamineScore), String.valueOf(calculatedTotalAmphetamineScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalAmphetamineScore), String.valueOf(calculatedTotalAmphetamineScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } //  if (totalAmphetamineIndex >= 0)	
		    
		    if (totalInhalantsIndex >= 0) {
				data = bufDataVector.get(totalInhalantsIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalInhalantsIndex);
				group_row_index = bufGroup_row_index.get(totalInhalantsIndex);
				index = bufIndex.get(totalInhalantsIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberInhalantsScoresMissing == 0) && (numberInhalantsScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalInhalantsScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalInhalantsScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberInhalantsScoresMissing >= 1) || (numberInhalantsScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalInhalantsScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalInhalantsScore > -1) {
		    	if (actualTotalInhalantsScore != calculatedTotalInhalantsScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalInhalantsScore), String.valueOf(calculatedTotalInhalantsScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalInhalantsScore), String.valueOf(calculatedTotalInhalantsScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } //  if (totalInhalantsIndex >= 0)	
		    
		    if (totalSedativesIndex >= 0) {
				data = bufDataVector.get(totalSedativesIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalSedativesIndex);
				group_row_index = bufGroup_row_index.get(totalSedativesIndex);
				index = bufIndex.get(totalSedativesIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberSedativesScoresMissing == 0) && (numberSedativesScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalSedativesScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalSedativesScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberSedativesScoresMissing >= 1) || (numberSedativesScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalSedativesScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalSedativesScore > -1) {
		    	if (actualTotalSedativesScore != calculatedTotalSedativesScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalSedativesScore), String.valueOf(calculatedTotalSedativesScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalSedativesScore), String.valueOf(calculatedTotalSedativesScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } //  if (totalSedativesIndex >= 0)	
		    
		    if (totalHallucinogensIndex >= 0) {
				data = bufDataVector.get(totalHallucinogensIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalHallucinogensIndex);
				group_row_index = bufGroup_row_index.get(totalHallucinogensIndex);
				index = bufIndex.get(totalHallucinogensIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberHallucinogensScoresMissing == 0) && (numberHallucinogensScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalHallucinogensScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalHallucinogensScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberHallucinogensScoresMissing >= 1) || (numberHallucinogensScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalHallucinogensScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalHallucinogensScore > -1) {
		    	if (actualTotalHallucinogensScore != calculatedTotalHallucinogensScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalHallucinogensScore), String.valueOf(calculatedTotalHallucinogensScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalHallucinogensScore), String.valueOf(calculatedTotalHallucinogensScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } //  if (totalHallucinogensIndex >= 0)	
		    
		    if (totalOpioidsIndex >= 0) {
				data = bufDataVector.get(totalOpioidsIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalOpioidsIndex);
				group_row_index = bufGroup_row_index.get(totalOpioidsIndex);
				index = bufIndex.get(totalOpioidsIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberOpioidsScoresMissing == 0) && (numberOpioidsScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalOpioidsScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalOpioidsScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberOpioidsScoresMissing >= 1) || (numberOpioidsScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalOpioidsScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalOpioidsScore > -1) {
		    	if (actualTotalOpioidsScore != calculatedTotalOpioidsScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalOpioidsScore), String.valueOf(calculatedTotalOpioidsScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalOpioidsScore), String.valueOf(calculatedTotalOpioidsScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } //  if (totalOpioidsIndex >= 0)
		    
		    if (totalOtherIndex >= 0) {
				data = bufDataVector.get(totalOtherIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalOtherIndex);
				group_row_index = bufGroup_row_index.get(totalOtherIndex);
				index = bufIndex.get(totalOtherIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberOtherScoresMissing == 0) && (numberOtherScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalOtherScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalOtherScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberOtherScoresMissing >= 1) || (numberOtherScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalOtherScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalOtherScore > -1) {
		    	if (actualTotalOtherScore != calculatedTotalOtherScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalOtherScore), String.valueOf(calculatedTotalOtherScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalOtherScore), String.valueOf(calculatedTotalOtherScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } //  if (totalOtherIndex >= 0)	
		} // else haveAssist
	}
	
	private void validateDRRI2COMBAT(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	DRRI2COMBAT
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = PDMT601DKK
		// group_column_index = 1 group_column_name = subjectidnum data = 04C1027
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = vitstatus data = null
		// group_column_index = 4 group_column_name = visitdate data = 1960-01-01T00:00:00Z
		// group_column_index = 5 group_column_name = visittype data = Asymptomatic
		// group_column_index = 6 group_column_name = generalnotestxt data = age not submitted
		// group_column_index = 7 group_column_name = dayssincebaseline data = 0
		// group_column_index = 8 group_column_name = casecontrlind data = Control
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Combat Experiences
		// rgTable.getSize() = 18
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 18
		// group_column_index = 0 group_column_name = drri2combatexpassaultscl data = 1
		// group_column_index = 1 group_column_name = drri2combatexpcmbtpatrolscl data = 6
		// group_column_index = 2 group_column_name = drri2combatexpdsarmexplovsscl data = 1
		// group_column_index = 3 group_column_name = drri2combatexpencexplosivescl data = 2
		// group_column_index = 4 group_column_name = drri2combatexpexposfrndfirescl data = 1
		// group_column_index = 5 group_column_name = drri2combatexphostleincfirescl data = 4
		// group_column_index = 6 group_column_name = drri2combatexpfirdenmyscl data = 1
		// group_column_index = 7 group_column_name = drri2combatexpfrdwpnenmyscl data = 1
		// group_column_index = 8 group_column_name = drri2combatexpsrchdsarmenmyscl data = 6
		// group_column_index = 9 group_column_name = drri2combatexpinjurcombatscl data = 1
		// group_column_index = 10 group_column_name = drri2combatexpprtpcombatscl data = 1
		// group_column_index = 11 group_column_name = drri2combatexpsrchclrbldgsscl data = 2
		// group_column_index = 12 group_column_name = drri2combatexpthinkkilledscl data = 1
		// group_column_index = 13 group_column_name = drri2combatexptotalscore data = 39
		// group_column_index = 14 group_column_name = drri2combatexpvehattackscl data = 3
		// group_column_index = 15 group_column_name = drri2combatexpcvlnwndkilldscl data = 2
		// group_column_index = 16 group_column_name = drri2combatexpenmywndkilldscl data = 3
		// group_column_index = 17 group_column_name = drri2combatexpwitnessscl data = 3
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    boolean haveCombat = true;
	    RepeatableGroupTable combatTable = null;
	    int combatIndex[] = new int[17];
	    for (i = 0; i < 17 ; i++) {
	    	combatIndex[i] = -1;
	    }
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    
	    int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Combat Experiences")) {
				    haveCombat = false;
				    combatTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		     // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		     // for (i = 0; i < columnNameVector.size(); i++) {
		     //   System.out.println("group_column_index = " + i +
		     //   " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Combat Experiences")) {
				if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpassaultscl")) {
	                combatIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpcmbtpatrolscl")) {
					combatIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpdsarmexplovsscl")) {
					combatIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpencexplosivescl")) {
					combatIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpexposfrndfirescl")) {
					combatIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexphostleincfirescl")) {
					combatIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpfirdenmyscl")) {
					combatIndex[6] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpfrdwpnenmyscl")) {
					combatIndex[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpsrchdsarmenmyscl")) {
					combatIndex[8] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpinjurcombatscl")) {
					combatIndex[9] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpprtpcombatscl")) {
					combatIndex[10] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpsrchclrbldgsscl")) {
					combatIndex[11] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpthinkkilledscl")) {
					combatIndex[12] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpvehattackscl")) {
					combatIndex[13] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpcvlnwndkilldscl")) {
					combatIndex[14] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpenmywndkilldscl")) {
					combatIndex[15] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexpwitnessscl")) {
					combatIndex[16] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drri2combatexptotalscore")) {
	                totalScoreIndex = bufSizeIndex;	
				}	
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 18) || (age > 90)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "18 to 90 years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "18 to 90 years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveCombat) {
			for (i = 0; i <= 17; i++) {
				if (i != 13) {
					if (combatTable.getDataFilePositionMapping(i) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										combatTable.getRepeatableGroupName(),
										combatTable.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(combatTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										combatTable.getDataFilePositionMapping(i),
										combatTable.getRepeatableGroupName(),
										combatTable.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(combatTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
								combatTable.getDataFilePositionMapping(i), message));
					}
				} // if (i != 13)
			} // for (i = 0; i <= 17; i++)			
	    } // if (!haveCombat)
		else { // haveCombat
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
			for (j = 0; j < combatIndex.length; j++) { 
		    	i = combatIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveCombat
	}
	
	private void validateDAST10(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	DAST10
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = PDMT601DKK
		// group_column_index = 1 group_column_name = subjectidnum data = 02C1038
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = vitstatus data = null
		// group_column_index = 4 group_column_name = visitdate data = null
		// group_column_index = 5 group_column_name = sitename data = Baylor College of Medicine (002)
		// group_column_index = 6 group_column_name = dayssincebaseline data = 0
		// group_column_index = 7 group_column_name = casecontrlind data = Case
		// group_column_index = 8 group_column_name = generalnotestxt data = age not submitted
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Drug Abuse Screening Test
		// rgTable.getSize() = 13
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 13
		// group_column_index = 0 group_column_name = dast10useddrugsnotmedreasscore data = 1
		// group_column_index = 1 group_column_name = dast10abusemore1drugtimescore data = 1
		// group_column_index = 2 group_column_name = dast10stopdrugswhenwantscore data = 1
		// group_column_index = 3 group_column_name = dast10blackoutflashbackscore data = 1
		// group_column_index = 4 group_column_name = dast10feelbadguiltdrugusescore data = 1
		// group_column_index = 5 group_column_name = dast10complnspouseabtdrugscore data = 0
		// group_column_index = 6 group_column_name = dast10neglectfamdrugusescore data = 0
		// group_column_index = 7 group_column_name = dast10illegalactobtndrugsscore data = 0
		// group_column_index = 8 group_column_name = dast10withdrawalstopdrugsscore data = 0
		// group_column_index = 9 group_column_name = dast10medprobresltdrugusescore data = 0
		// group_column_index = 10 group_column_name = dast10totalscore data = 5
		// group_column_index = 11 group_column_name = dast10scale data = null
		// group_column_index = 12 group_column_name = dast10suggestedactiontyp data = null
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    boolean haveDrug = true;
	    RepeatableGroupTable drugTable = null;
	    int drugIndex[] = new int[10];
	    for (i = 0; i < 10 ; i++) {
	    	drugIndex[i] = -1;
	    }
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    
	    int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Drug Abuse Screening Test")) {
				    haveDrug = false;
				    drugTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		    // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		    // for (i = 0; i < columnNameVector.size(); i++) {
		    //    System.out.println("group_column_index = " + i +
		    //    " group_column_name = " + columnNameVector.get(i) +
		    //   " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Drug Abuse Screening Test")) {
				if (columnNameVector.get(i).equalsIgnoreCase("dast10useddrugsnotmedreasscore")) {
	                drugIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dast10abusemore1drugtimescore")) {
					drugIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dast10stopdrugswhenwantscore")) {
					drugIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dast10blackoutflashbackscore")) {
					drugIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dast10feelbadguiltdrugusescore")) {
					drugIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dast10complnspouseabtdrugscore")) {
					drugIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dast10neglectfamdrugusescore")) {
					drugIndex[6] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dast10illegalactobtndrugsscore")) {
					drugIndex[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dast10withdrawalstopdrugsscore")) {
					drugIndex[8] = bufSizeIndex;		
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dast10medprobresltdrugusescore")) {
					drugIndex[9] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dast10totalscore")) {
	                totalScoreIndex = bufSizeIndex;	
				}	
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 16) || (age > 89)) {
					if (numberWarnings < 1000) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "16 to 89 years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "16 to 89 years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
						numberWarnings++;
					} // if (numberWarnings < 1000)
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveDrug) {
			for (i = 0; i <= 9; i++) {
				if (drugTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									drugTable.getRepeatableGroupName(),
									drugTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(drugTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									drugTable.getDataFilePositionMapping(i),
									drugTable.getRepeatableGroupName(),
									drugTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(drugTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							drugTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 9; i++)			
	    } // if (!haveDrug)
		else { // haveDrug
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
			for (j = 0; j < drugIndex.length; j++) { 
		    	i = drugIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedTotalScore += value;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
		                if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						    numberWarnings++;
		                } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveDrug
	}
	
	private void validateMPAI4(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
        // table.getColumnCount = 7
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBIED889ZHY
		// group_column_index = 1 group_column_name = subjectidnum data = 01-1200
		// group_column_index = 2 group_column_name = ageyrs data = 39
		// group_column_index = 3 group_column_name = vitstatus data = null
		// group_column_index = 4 group_column_name = visitdate data = null
		// group_column_index = 5 group_column_name = sitename data = 1
		// group_column_index = 6 group_column_name = dayssincebaseline data = 192
		// group_column_index = 7 group_column_name = casecontrlind data = Case
		// group_column_index = 8 group_column_name = generalnotestxt data = CA
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Scores
		// rgTable.getSize() = 12
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 12
		// group_column_index = 0 group_column_name = mpai4adjsubscalerawscore data = 3
		// group_column_index = 1 group_column_name = mpai4adjsubscalescore data = null
		// group_column_index = 2 group_column_name = mpai4adjsubscaletscore data = null
		// group_column_index = 3 group_column_name = mpai4ablsubscalerawscore data = 1
		// group_column_index = 4 group_column_name = mpai4ablsubscalescore data = null
		// group_column_index = 5 group_column_name = mpai4ablsubscaletscore data = null
		// group_column_index = 6 group_column_name = mpai4prtpsubscalerawscore data = 6
		// group_column_index = 7 group_column_name = mpai4prtpsubscalescore data = null
		// group_column_index = 8 group_column_name = mpai4prtpsubscaletscore data = null
		// group_column_index = 9 group_column_name = mpai4totlrawscore data = 8
		// group_column_index = 10 group_column_name = mpai4totlstandardscore data = null
		// group_column_index = 11 group_column_name = mpai4tottscore data = null
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Participation
		// rgTable.getSize() = 10
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 10
		// group_column_index = 0 group_column_name = mpai4initscale data = 0
		// group_column_index = 1 group_column_name = mpai4soclcontscale data = 1
		// group_column_index = 2 group_column_name = mpai4leisscale data = 1
		// group_column_index = 3 group_column_name = mpai4selfcarescale data = 0
		// group_column_index = 4 group_column_name = mpai4resdncescale data = 0
		// group_column_index = 5 group_column_name = mpai4trsptscale data = 0
		// group_column_index = 6 group_column_name = mpai4paidemplmtscale data = 4
		// group_column_index = 7 group_column_name = mpai4othremplmtscale data = null
		// group_column_index = 8 group_column_name = mpai4primrysoclrolename data = null
		// group_column_index = 9 group_column_name = mpai4mngmnyscale data = 0
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = Form Administation
		// rgTable.getSize() = 6
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 6
		// group_column_index = 0 group_column_name = langcrfadministratisocode data = null
		// group_column_index = 1 group_column_name = langcrfadministratisocodeoth data = null
		// group_column_index = 2 group_column_name = contexttype data = null
		// group_column_index = 3 group_column_name = contexttypeoth data = null
		// group_column_index = 4 group_column_name = datasource data = Participant/subject
		// group_column_index = 5 group_column_name = datasourceoth data = null
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = Adjustment
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = mpai4anxtylscale data = 0
		// group_column_index = 1 group_column_name = mpai4deprsnscale data = 0
		// group_column_index = 2 group_column_name = mpai4irritangagrsnscale data = 0
		// group_column_index = 3 group_column_name = mpai4painheadachscale data = 0
		// group_column_index = 4 group_column_name = mpai4fatgescale data = 0
		// group_column_index = 5 group_column_name = mpai4mldsymptmsensscale data = 0
		// group_column_index = 6 group_column_name = mpai4inapprsocinterscale data = 0
		// group_column_index = 7 group_column_name = mpai4imprdselfawrnesscale data = 0
		// group_column_index = 8 group_column_name = mpai4fmlyrelatescale data = 0
		// repeatable_group_id = 5
		// rgTable.getRepeatableGroupName() = Abilities
		// rgTable.getSize() = 13
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 13
		// group_column_index = 0 group_column_name = mpai4mobilityscale data = 0
		// group_column_index = 1 group_column_name = mpai4usehandscale data = 0
		// group_column_index = 2 group_column_name = mpai4visscale data = 0
		// group_column_index = 3 group_column_name = mpai4audscale data = 0
		// group_column_index = 4 group_column_name = mpai4dizscale data = 0
		// group_column_index = 5 group_column_name = mpai4motspeechscale data = 0
		// group_column_index = 6 group_column_name = mpai4verbcommunscale data = 0
		// group_column_index = 7 group_column_name = mpai4nonverbcommunscale data = null
		// group_column_index = 8 group_column_name = mpai4attenconcenscale data = 0
		// group_column_index = 9 group_column_name = mpai4memryscale data = 0
		// group_column_index = 10 group_column_name = mpai4infofundscale data = 0
		// group_column_index = 11 group_column_name = mpai4novprobslvscale data = 0
		// group_column_index = 12 group_column_name = mpai4visspatablscale data = 0
		// repeatable_group_id = 6
		// rgTable.getRepeatableGroupName() = Pre-existing and Associated Conditions
		// rgTable.getSize() = 12
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 12
		// group_column_index = 0 group_column_name = mpai4prealcusescale data = 0
		// group_column_index = 1 group_column_name = mpai4postalcusescale data = 0
		// group_column_index = 2 group_column_name = mpai4predrugusescale data = 0
		// group_column_index = 3 group_column_name = mpai4postdrugusescale data = 0
		// group_column_index = 4 group_column_name = mpai4prepyschsymptmscale data = 0
		// group_column_index = 5 group_column_name = mpai4pstpyschsymptmscale data = 0
		// group_column_index = 6 group_column_name = mpai4prelawviolscale data = 0
		// group_column_index = 7 group_column_name = mpai4pstlawviolscale data = 0
		// group_column_index = 8 group_column_name = mpai4preothrphysimpairscale data = 0
		// group_column_index = 9 group_column_name = mpai4pstothrphysimpairscale data = 0
		// group_column_index = 10 group_column_name = mpai4preothrcogimpair data = 0
		// group_column_index = 11 group_column_name = mpai4pstothrcogimpair data = 0
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    int index2 = -1;
	    String data;
	    String data2;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveAbilities = true;
	    RepeatableGroupTable abilitiesTable = null;
	    int auditionIndex = -1;
	    int verbalCommunicationIndex = -1;
	    int nonverbalCommunicationIndex = -1;
	    int abilitiesIndex[] = new int[10];
	    for (i = 0; i < 10; i++) {
	    	abilitiesIndex[i] = -1;
	    }
	    boolean haveAdjustment = true;
	    RepeatableGroupTable adjustmentTable = null;
	    int painAndHeadacheIndex = -1;
	    int adjustmentIndex[] = new int[8];
	    for (i = 0; i < 8; i++) {
	    	adjustmentIndex[i] = -1;
	    }
	    boolean haveParticipation = true;
	    RepeatableGroupTable participationTable = null;
	    int threeCommonIndex[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	threeCommonIndex[i] = -1;
	    }
	    int transportationIndex = -1;
	    int paidEmploymentIndex = -1;
	    int otherEmploymentIndex = -1;
	    int primarySocialRoleNameIndex = -1;
	    int participationIndex[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	participationIndex[i] = -1;
	    }
	   
        int abilitiesScoreIndex = -1;
        int adjustmentScoreIndex = -1;
        int participationScoreIndex = -1;
	    int totalScoreIndex = -1;
        boolean haveScores = true;
        RepeatableGroupTable scoresTable = null;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Abilities")) {
					haveAbilities = false;
					abilitiesTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Adjustment")) {
					haveAdjustment = false;
					adjustmentTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Participation")) {
					haveParticipation = false;
					participationTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Scores")) {
					haveScores = false;
					scoresTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		     // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		     // for (i = 0; i < columnNameVector.size(); i++) {
		     //  System.out.println("group_column_index = " + i +
		     //   " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Abilities")) {
				if (columnNameVector.get(i).equalsIgnoreCase("mpai4audscale")) {
					auditionIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4verbcommunscale")) {
					verbalCommunicationIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4nonverbcommunscale")) {
					nonverbalCommunicationIndex = bufSizeIndex;
				}	
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4mobilityscale")) {
					abilitiesIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4usehandscale")) {
					abilitiesIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4visscale")) {
					abilitiesIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4dizscale")) {
					abilitiesIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4motspeechscale")) {
					abilitiesIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4attenconcenscale")) {
					abilitiesIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4memryscale")) {
					abilitiesIndex[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4infofundscale")) {
					abilitiesIndex[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4novprobslvscale")) {
					abilitiesIndex[8] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4visspatablscale")) {
					abilitiesIndex[9] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Adjustment")) {
				if (columnNameVector.get(i).equalsIgnoreCase("mpai4painheadachscale")) {
					painAndHeadacheIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4anxtylscale")) {
				    adjustmentIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4deprsnscale")) {
				    adjustmentIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4irritangagrsnscale")) {
				    adjustmentIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4fatgescale")) {
				    adjustmentIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4mldsymptmsensscale")) {
				    adjustmentIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4inapprsocinterscale")) {
				    adjustmentIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4imprdselfawrnesscale")) {
				    adjustmentIndex[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4fmlyrelatescale")) {
				    adjustmentIndex[7] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Participation")) {
				if (columnNameVector.get(i).equalsIgnoreCase("mpai4initscale")) {
					threeCommonIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4soclcontscale")) {
					threeCommonIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4leisscale")) {
					threeCommonIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4trsptscale")) {
					transportationIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4paidemplmtscale")) {
					paidEmploymentIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4othremplmtscale")) {
					otherEmploymentIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4primrysoclrolename")) {
					primarySocialRoleNameIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4selfcarescale")) {
					participationIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4resdncescale")) {
					participationIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4mngmnyscale")) {
					participationIndex[2] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Scores")) {
				if (columnNameVector.get(i).equalsIgnoreCase("mpai4ablsubscalerawscore")) {
					abilitiesScoreIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4adjsubscalerawscore")) {
					adjustmentScoreIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4prtpsubscalerawscore")) {
					participationScoreIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mpai4totlrawscore")) {
					totalScoreIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 1) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "1 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "1 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedAbilitiesScore = 0;
		int actualAbilitiesScore = -1;
		int numberAbilitiesScoresMissing = 0;
		int numberAbilitiesScoresNotInteger = 0;
		if (!haveAbilities) {
			numberAbilitiesScoresMissing = 13;
			for (i = 0; i <= 12; i++) {
				if (abilitiesTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									abilitiesTable.getRepeatableGroupName(),
									abilitiesTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Abilities Group";
					table.addOutput(new ValidationOutput(abilitiesTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									abilitiesTable.getDataFilePositionMapping(i),
									abilitiesTable.getRepeatableGroupName(),
									abilitiesTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Abilities Group";
					table.addOutput(new ValidationOutput(abilitiesTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							abilitiesTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 12; i++)			
	    } // if (!haveAbilities)
		else { // haveAbilities
			Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int verbalCommunicationScore = -1;
		    int nonverbalCommunicationScore = -1;
		    int communicationScore = -1;
		    int value;
		    if (auditionIndex >= 0) {
		    	data = bufDataVector.get(auditionIndex);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberAbilitiesScoresMissing++;
		    		missingIndices.add(bufIndex.get(auditionIndex));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(auditionIndex);
					missing_group_row_index = bufGroup_row_index.get(auditionIndex);
		    	}
		    	else {
					try {
				       value = Integer.valueOf(data).intValue();
				       if (value == 0) {
				    	   
				       }
				       else if ((value >= 1) && (value <= 3)) {
				           calculatedAbilitiesScore += 1;
				       }
				       else if (value == 4) {
				    	   calculatedAbilitiesScore += 3;
				       }
					}
					catch (NumberFormatException e) {
						numberAbilitiesScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(auditionIndex));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(auditionIndex);
						notInteger_group_row_index = bufGroup_row_index.get(auditionIndex);
						notIntegerData.add(data);
					}
				}
		    } // if (auditionIndex >= 0)
		    
		    if ((verbalCommunicationIndex >= 0) && (nonverbalCommunicationIndex >= 0)) {
		    	data = bufDataVector.get(verbalCommunicationIndex);	
		    	data2 = bufDataVector.get(nonverbalCommunicationIndex);
		    	repeatable_group_id = bufRepeatable_group_id.get(verbalCommunicationIndex);
				group_row_index = bufGroup_row_index.get(verbalCommunicationIndex);
				index = bufIndex.get(verbalCommunicationIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
		    	boolean verbalCommunicationMissing = false;
		    	boolean nonverbalCommunicationMissing = false;
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		verbalCommunicationMissing = true;
		    	}
		    	if ((data2 == null) || (data2.isEmpty()) || (data2.trim() == null) ||
						(data2.trim().isEmpty())) {
		    		nonverbalCommunicationMissing = true;
		    	}
		    	if ((verbalCommunicationMissing && nonverbalCommunicationMissing)) {
		    		numberAbilitiesScoresMissing++;
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message + " both Verbal Communication and Nonverbal Communication are missing in the Abilities Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
				    	message =
								message + " both Verbal Communication and Nonverbal Communication are missing in the Abilities Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}	
		    	}
		    	else if ((!verbalCommunicationMissing) && nonverbalCommunicationMissing) {
		    		try {
					       verbalCommunicationScore = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberAbilitiesScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(verbalCommunicationIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(verbalCommunicationIndex);
							notInteger_group_row_index = bufGroup_row_index.get(verbalCommunicationIndex);
							notIntegerData.add(data);
						}	
		    	}
		    	else if ((!nonverbalCommunicationMissing) && verbalCommunicationMissing) {
		    		try {
					       nonverbalCommunicationScore = Integer.valueOf(data2).intValue();
						}
						catch (NumberFormatException e) {
							numberAbilitiesScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(nonverbalCommunicationIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(nonverbalCommunicationIndex);
							notInteger_group_row_index = bufGroup_row_index.get(nonverbalCommunicationIndex);
							notIntegerData.add(data2);
						}	
		    	}
		    	else if ((!verbalCommunicationMissing) && (!nonverbalCommunicationMissing)) {
		    		try {
					       verbalCommunicationScore = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberAbilitiesScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(verbalCommunicationIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(verbalCommunicationIndex);
							notInteger_group_row_index = bufGroup_row_index.get(verbalCommunicationIndex);
							notIntegerData.add(data);
						}
		    		try {
					       nonverbalCommunicationScore = Integer.valueOf(data2).intValue();
						}
						catch (NumberFormatException e) {
							numberAbilitiesScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(nonverbalCommunicationIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(nonverbalCommunicationIndex);
							notInteger_group_row_index = bufGroup_row_index.get(nonverbalCommunicationIndex);
							notIntegerData.add(data2);
						}
	
		    	}
		    }
		    
		    if ((verbalCommunicationScore >= 0) || (nonverbalCommunicationScore >= 0)) {
		    	communicationScore = Math.max(verbalCommunicationScore,nonverbalCommunicationScore);
		    	calculatedAbilitiesScore += communicationScore;
		    }
		    
		    for (j = 0; j < abilitiesIndex.length; j++) { 
		    	i = abilitiesIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberAbilitiesScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedAbilitiesScore += value;
						}
						catch (NumberFormatException e) {
							numberAbilitiesScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberAbilitiesScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberAbilitiesScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Abilities Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Abilities Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberAbiliitesScoresMissing >= 1)
		    
		    if (numberAbilitiesScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberAbilitiesScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) + " in the Abilities Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) + " in the Abilities Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberAbilitiesScoresNotInteger >= 1)
	
		} // else haveAbilities

		int calculatedThreeCommonScore = 0;
		int numberThreeCommonScoresMissing = 0;
		int numberThreeCommonScoresNotInteger = 0;
		int calculatedParticipationScore = 0;
		int actualParticipationScore = -1;
		int numberParticipationScoresMissing = 0;
		int numberParticipationScoresNotInteger = 0;
		if (!haveParticipation) {
			numberThreeCommonScoresMissing = 3;
			numberParticipationScoresMissing = 8;
			for (i = 0; i <= 2; i++) {
				if (participationTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									participationTable.getRepeatableGroupName(),
									participationTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Adjustment and Participation Groups";
					table.addOutput(new ValidationOutput(participationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									participationTable.getDataFilePositionMapping(i),
									participationTable.getRepeatableGroupName(),
									participationTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Adjustment and Participation Groups";
					table.addOutput(new ValidationOutput(participationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							participationTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 2; i++)	
			
			for (i = 3; i <= 9; i++) {
				if (i != 8) {
					if (participationTable.getDataFilePositionMapping(i) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										participationTable.getRepeatableGroupName(),
										participationTable.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Participation Group";
						table.addOutput(new ValidationOutput(participationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										participationTable.getDataFilePositionMapping(i),
										participationTable.getRepeatableGroupName(),
										participationTable.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Participation Group";;
						table.addOutput(new ValidationOutput(participationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
								participationTable.getDataFilePositionMapping(i), message));
					}
				} // if (i != 8)
			} // for (i = 3; i <= 9; i++)			
	    } // if (!haveParticipation)
		else { // haveParticipation
			Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    boolean paidEmploymentSpecified = false;
		    boolean otherEmploymentSpecified = false;
		    int value;
		    for (j = 0; j < threeCommonIndex.length; j++) { 
		    	i = threeCommonIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberThreeCommonScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedThreeCommonScore += value;
						}
						catch (NumberFormatException e) {
							numberThreeCommonScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberThreeCommonScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberThreeCommonScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Adjustment and Participation Groups";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Adjustment and Participation Groups";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberThreeCommonScoresMissing >= 1)
		    
		    if (numberThreeCommonScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberThreeCommonScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) + " in the Adjustment and Participation Groups";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) + " in the Adjustment and Participation Groups";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberThreeCommonScoresNotInteger >= 1)
		    
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    if (transportationIndex >= 0) {
		    	data = bufDataVector.get(transportationIndex);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberParticipationScoresMissing++;
		    		missingIndices.add(bufIndex.get(transportationIndex));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(transportationIndex);
					missing_group_row_index = bufGroup_row_index.get(transportationIndex);
		    	}
		    	else {
					try {
				       value = Integer.valueOf(data).intValue();
				       if ((value == 0) || (value == 1)) {
				    	   
				       }
				       else if ((value == 2) || (value == 3)) {
				           calculatedParticipationScore += 1;
				       }
				       else if (value == 4) {
				    	   calculatedParticipationScore += 3;
				       }
					}
					catch (NumberFormatException e) {
						numberParticipationScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(transportationIndex));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(transportationIndex);
						notInteger_group_row_index = bufGroup_row_index.get(transportationIndex);
						notIntegerData.add(data);
					}
				}
		    } // if (transportationIndex >= 0)
		    
		    for (j = 0; j < participationIndex.length; j++) { 
		    	i = participationIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberParticipationScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedParticipationScore += value;
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    String primarySocialRoleName = null;
		    if (primarySocialRoleNameIndex >= 0) {
		    	primarySocialRoleName = bufDataVector.get(primarySocialRoleNameIndex);
		    	if ((primarySocialRoleName == null) || (primarySocialRoleName.isEmpty()) || (primarySocialRoleName.trim() == null) ||
						(primarySocialRoleName.trim().isEmpty())) {
		    	}
		    	else if (primarySocialRoleName.equalsIgnoreCase("Paid employment")) {
		    		paidEmploymentSpecified = true;
		    	}
		    	else if ((primarySocialRoleName.equalsIgnoreCase("Childrearing/care-giving")) ||
		    			(primarySocialRoleName.equalsIgnoreCase("Homemaker, no childrearing or care-giving"))||
		    			(primarySocialRoleName.equalsIgnoreCase("Student"))||
		    			(primarySocialRoleName.equalsIgnoreCase("Volunteer"))||
		    			(primarySocialRoleName.equalsIgnoreCase("Retired"))) {
		    				otherEmploymentSpecified = true;
		    			}
		    } // if (primarySocialRoleNameIndex >= 0)
		    
		    int paidEmploymentScore = -1;
		    int otherEmploymentScore = -1;
		    int employmentScore = -1;
		    if (paidEmploymentSpecified && (paidEmploymentIndex >= 0) && (otherEmploymentIndex >= 0)) {
		    	data = bufDataVector.get(paidEmploymentIndex);	
		    	data2 = bufDataVector.get(otherEmploymentIndex);
		    	repeatable_group_id = bufRepeatable_group_id.get(paidEmploymentIndex);
				group_row_index = bufGroup_row_index.get(paidEmploymentIndex);
				index = bufIndex.get(paidEmploymentIndex);
				index2 = bufIndex.get(otherEmploymentIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
		    	boolean paidEmploymentMissing = false;
		    	boolean otherEmploymentMissing = false;
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		paidEmploymentMissing = true;
		    	}
		    	if ((data2 == null) || (data2.isEmpty()) || (data2.trim() == null) ||
						(data2.trim().isEmpty())) {
		    		otherEmploymentMissing = true;
		    	}
		    	if ((paidEmploymentMissing && otherEmploymentMissing)) {
		    		numberParticipationScoresMissing++;
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message + " both Paid Employment and Other Employment are missing in the Participation Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
				    	message =
								message + " both Paid Employment and Other Employment are missing in the Participation Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}	
		    	}
		    	else if ((!paidEmploymentMissing) && otherEmploymentMissing) {
		    		try {
					       paidEmploymentScore = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(paidEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(paidEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(paidEmploymentIndex);
							notIntegerData.add(data);
						}	
		    	}
		    	else if ((!otherEmploymentMissing) && paidEmploymentMissing) {
		    		try {
					       otherEmploymentScore = Integer.valueOf(data2).intValue();
					       if (rgTable.getDataFilePositionMapping(index) == null) {
					    		message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
			
								message =
										message
								+ " should use the Paid Employment field instead of the Other Employment field for Primary Social Role Name = Paid Employment";
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message));	
					    	}
					    	else {
						    	message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
			
								message =
										message
										+ " should use the Paid Employment field instead of the Other Employment field for Primary Social Role Name = Paid Employment";
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message));
					    	}	
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(otherEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(otherEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(otherEmploymentIndex);
							notIntegerData.add(data2);
						}	
		    	}
		    	else if ((!paidEmploymentMissing) && (!otherEmploymentMissing)) {
		    		try {
					       paidEmploymentScore = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(paidEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(paidEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(paidEmploymentIndex);
							notIntegerData.add(data);
						}
		    		try {
					       otherEmploymentScore = Integer.valueOf(data2).intValue();
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(otherEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(otherEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(otherEmploymentIndex);
							notIntegerData.add(data2);
						}
		    		if ((paidEmploymentScore >= 0) && (otherEmploymentScore >= 0)) {
		    			if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message + " both Paid Employment and Other Employment have data in the Participation Group but only Paid Employment should " +
							                  "for Primary Social Role Name = Paid Employment";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
				    	}
				    	else {
					    	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
					    	message =
					    			message + " both Paid Employment and Other Employment have data in the Participation Group but only Paid Employment should " +
							                  "for Primary Social Role Name = Paid Employment";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
				    	}		
		    		}
		    	}
		    	
		        employmentScore = Math.max(paidEmploymentScore,otherEmploymentScore);
		    	if (employmentScore == 0) {
		    	
		    	}
		    	else if ((employmentScore == 1) || (employmentScore == 2)) {
		    		calculatedParticipationScore += 1;
		    	}
		    	else if ((employmentScore == 3) || (employmentScore == 4)) {
		    		calculatedParticipationScore += 3;
		    	}	
		    } // if (paidEmploymentSpecified && (paidEmploymentIndex >= 0) && (otherEmploymentIndex >= 0))
		    
		    if (otherEmploymentSpecified && (paidEmploymentIndex >= 0) && (otherEmploymentIndex >= 0)) {
		    	data = bufDataVector.get(paidEmploymentIndex);	
		    	data2 = bufDataVector.get(otherEmploymentIndex);
		    	repeatable_group_id = bufRepeatable_group_id.get(paidEmploymentIndex);
				group_row_index = bufGroup_row_index.get(paidEmploymentIndex);
				index = bufIndex.get(paidEmploymentIndex);
				index2 = bufIndex.get(otherEmploymentIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
		    	boolean paidEmploymentMissing = false;
		    	boolean otherEmploymentMissing = false;
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		paidEmploymentMissing = true;
		    	}
		    	if ((data2 == null) || (data2.isEmpty()) || (data2.trim() == null) ||
						(data2.trim().isEmpty())) {
		    		otherEmploymentMissing = true;
		    	}
		    	if ((paidEmploymentMissing && otherEmploymentMissing)) {
		    		numberParticipationScoresMissing++;
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message + " both Paid Employment and Other Employment are missing in the Participation Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
				    	message =
								message + " both Paid Employment and Other Employment are missing in the Participation Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}	
		    	}
		    	else if ((!paidEmploymentMissing) && otherEmploymentMissing) {
		    		try {
					       paidEmploymentScore = Integer.valueOf(data).intValue();
					       if (rgTable.getDataFilePositionMapping(index) == null) {
					    		message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
			
								message =
										message
								+ " should use the Other Employment field instead of the Paid Employment field for Primary Social Role Name = " + primarySocialRoleName;
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message));	
					    	}
					    	else {
						    	message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
			
								message =
										message
										+ " should use the Other Employment field instead of the Paid Employment field for Primary Social Role Name = " + primarySocialRoleName;		
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message));
					    	}	
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(paidEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(paidEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(paidEmploymentIndex);
							notIntegerData.add(data);
						}	
		    	}
		    	else if ((!otherEmploymentMissing) && paidEmploymentMissing) {
		    		try {
					       otherEmploymentScore = Integer.valueOf(data2).intValue();
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(otherEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(otherEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(otherEmploymentIndex);
							notIntegerData.add(data2);
						}	
		    	}
		    	else if ((!paidEmploymentMissing) && (!otherEmploymentMissing)) {
		    		try {
					       paidEmploymentScore = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(paidEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(paidEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(paidEmploymentIndex);
							notIntegerData.add(data);
						}
		    		try {
					       otherEmploymentScore = Integer.valueOf(data2).intValue();
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(otherEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(otherEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(otherEmploymentIndex);
							notIntegerData.add(data2);
						}
		    		if ((paidEmploymentScore >= 0) && (otherEmploymentScore >= 0)) {
		    			if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message + " both Paid Employment and Other Employment have data in the Participation Group but only Other Employment should " +
							                  "for Primary Social Role Name = " + primarySocialRoleName;
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
				    	}
				    	else {
					    	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
					    	message =
					    			message + " both Paid Employment and Other Employment have data in the Participation Group but only Other Employment should " +
							                  "for Primary Social Role Name = " + primarySocialRoleName;
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
				    	}		
		    		}
		    	}
		    	
		        employmentScore = Math.max(paidEmploymentScore,otherEmploymentScore);
		    	if (employmentScore == 0) {
		    	
		    	}
		    	else if ((employmentScore == 1) || (employmentScore == 2)) {
		    		calculatedParticipationScore += 1;
		    	}
		    	else if ((employmentScore == 3) || (employmentScore == 4)) {
		    		calculatedParticipationScore += 3;
		    	}		
		    } // if (otherEmploymentSpecified && (paidEmploymentIndex >= 0) && (otherEmploymentIndex >= 0))
		    
		    
		    
		    if ((!paidEmploymentSpecified) && (!otherEmploymentSpecified) && (paidEmploymentIndex >= 0) && (otherEmploymentIndex >= 0)) {
		    	data = bufDataVector.get(paidEmploymentIndex);	
		    	data2 = bufDataVector.get(otherEmploymentIndex);
		    	repeatable_group_id = bufRepeatable_group_id.get(paidEmploymentIndex);
				group_row_index = bufGroup_row_index.get(paidEmploymentIndex);
				index = bufIndex.get(paidEmploymentIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
		    	boolean paidEmploymentMissing = false;
		    	boolean otherEmploymentMissing = false;
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		paidEmploymentMissing = true;
		    	}
		    	if ((data2 == null) || (data2.isEmpty()) || (data2.trim() == null) ||
						(data2.trim().isEmpty())) {
		    		otherEmploymentMissing = true;
		    	}
		    	if ((paidEmploymentMissing && otherEmploymentMissing)) {
		    		numberParticipationScoresMissing++;
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message + " both Paid Employment and Other Employment are missing in the Participation Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
				    	message =
								message + " both Paid Employment and Other Employment are missing in the Participation Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}	
		    	}
		    	else if ((!paidEmploymentMissing) && otherEmploymentMissing) {
		    		try {
					       paidEmploymentScore = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(paidEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(paidEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(paidEmploymentIndex);
							notIntegerData.add(data);
						}	
		    	}
		    	else if ((!otherEmploymentMissing) && paidEmploymentMissing) {
		    		try {
					       otherEmploymentScore = Integer.valueOf(data2).intValue();
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(otherEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(otherEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(otherEmploymentIndex);
							notIntegerData.add(data2);
						}	
		    	}
		    	else if ((!paidEmploymentMissing) && (!otherEmploymentMissing)) {
		    		try {
					       paidEmploymentScore = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(paidEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(paidEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(paidEmploymentIndex);
							notIntegerData.add(data);
						}
		    		try {
					       otherEmploymentScore = Integer.valueOf(data2).intValue();
						}
						catch (NumberFormatException e) {
							numberParticipationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(otherEmploymentIndex));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(otherEmploymentIndex);
							notInteger_group_row_index = bufGroup_row_index.get(otherEmploymentIndex);
							notIntegerData.add(data2);
						}
		    		if ((paidEmploymentScore >= 0) && (otherEmploymentScore >= 0)) {
		    			if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message + " both Paid Employment and Other Employment have data in the Participation Group but only one should";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
				    	}
				    	else {
					    	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
					    	message =
									message + " both Paid Employment and Other Employment have data in the Participation Group but only one should";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
				    	}		
		    		}
		    	}
		    	
		        employmentScore = Math.max(paidEmploymentScore,otherEmploymentScore);
		    	if (employmentScore == 0) {
		    	
		    	}
		    	else if ((employmentScore == 1) || (employmentScore == 2)) {
		    		calculatedParticipationScore += 1;
		    	}
		    	else if ((employmentScore == 3) || (employmentScore == 4)) {
		    		calculatedParticipationScore += 3;
		    	}
		    } // if ((!paidEmploymentSpecified) && (!otherEmploymentSpecified) && (paidEmploymentIndex >= 0) && (otherEmploymentIndex >= 0))
		    
		    if (numberParticipationScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberParticipationScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Participation Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Participation Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberParticipationScoresMissing >= 1)
		    
		    if (numberParticipationScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberParticipationScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) + " in the Participation Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) + " in the Participation Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberParticipationScoresNotInteger >= 1)
		    numberParticipationScoresMissing += numberThreeCommonScoresMissing;
		    numberParticipationScoresNotInteger += numberThreeCommonScoresNotInteger;
		    calculatedParticipationScore += calculatedThreeCommonScore;
		} // else haveParticipation
		
		int calculatedAdjustmentScore = 0;
		int actualAdjustmentScore = -1;
		int numberAdjustmentScoresMissing = 0;
		int numberAdjustmentScoresNotInteger = 0;
		if (!haveAdjustment) {
			numberAdjustmentScoresMissing = 9 + numberThreeCommonScoresMissing;
			for (i = 0; i <= 8; i++) {
				if (adjustmentTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									adjustmentTable.getRepeatableGroupName(),
									adjustmentTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Adjustment Group";
					table.addOutput(new ValidationOutput(adjustmentTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									adjustmentTable.getDataFilePositionMapping(i),
									adjustmentTable.getRepeatableGroupName(),
									adjustmentTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Adjustment Group";
					table.addOutput(new ValidationOutput(adjustmentTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							adjustmentTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 8; i++)			
	    } // if (!haveAdjustment)
		else { // haveAdjustment
			Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
			int value;
			if (painAndHeadacheIndex >= 0) {
		    	data = bufDataVector.get(painAndHeadacheIndex);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberAdjustmentScoresMissing++;
		    		missingIndices.add(bufIndex.get(painAndHeadacheIndex));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(painAndHeadacheIndex);
					missing_group_row_index = bufGroup_row_index.get(painAndHeadacheIndex);
		    	}
		    	else {
					try {
				       value = Integer.valueOf(data).intValue();
				       if (value == 0) {
				    	   
				       }
				       else if ((value == 1) || (value == 2)) {
				           calculatedAdjustmentScore += 1;
				       }
				       else if ((value == 3) || (value == 4)) {
				    	   calculatedAdjustmentScore += 2;
				       }
					}
					catch (NumberFormatException e) {
						numberAdjustmentScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(painAndHeadacheIndex));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(painAndHeadacheIndex);
						notInteger_group_row_index = bufGroup_row_index.get(painAndHeadacheIndex);
						notIntegerData.add(data);
					}
				}
		    } // if (painAndHeadacheIndex >= 0)
			
			for (j = 0; j < adjustmentIndex.length; j++) { 
		    	i = adjustmentIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberAdjustmentScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       calculatedAdjustmentScore += value;
						}
						catch (NumberFormatException e) {
							numberAdjustmentScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberAdjustmentScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberAdjustmentScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Adjustment Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) + " in the Adjustment Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberAdjustmentScoresMissing >= 1)
		    
		    if (numberAdjustmentScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberAdjustmentScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) + " in the Adjustment Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) + " in the Adjustment Group";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberAdjustmentScoresNotInteger >= 1)
		    numberAdjustmentScoresMissing += numberThreeCommonScoresMissing;
		    numberAdjustmentScoresNotInteger += numberThreeCommonScoresNotInteger;
		    calculatedAdjustmentScore += calculatedThreeCommonScore;
		} // else haveAdjustment
		
		int actualTotalScore = -1;
		int calculatedTotalScore = calculatedAbilitiesScore + calculatedAdjustmentScore + calculatedParticipationScore - calculatedThreeCommonScore;
		int numberTotalScoresMissing = numberAbilitiesScoresMissing + numberAdjustmentScoresMissing + numberParticipationScoresMissing
				- numberThreeCommonScoresMissing;
		int numberTotalScoresNotInteger = numberAbilitiesScoresNotInteger + numberAdjustmentScoresNotInteger + numberParticipationScoresNotInteger
				- numberThreeCommonScoresNotInteger;
		
		if (!haveScores) {
			if ((numberAdjustmentScoresMissing == 0) && (numberAdjustmentScoresNotInteger == 0)) {
				if (numberWarnings < 1000) {
					if (scoresTable.getDataFilePositionMapping(0) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoresTable.getRepeatableGroupName(),
										scoresTable.getColumnName(0));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedAdjustmentScore));
						table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoresTable.getDataFilePositionMapping(0),
										scoresTable.getRepeatableGroupName(),
										scoresTable.getColumnName(0));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedAdjustmentScore));
						table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								scoresTable.getDataFilePositionMapping(0), message));
					}
					numberWarnings++;
				} // if (numberWarnings < 1000)
			} // if ((numberAdustmentScoresMissing == 0) && (numberAdjustmentScoresNotInteger == 0)	
			
			if ((numberAbilitiesScoresMissing == 0) && (numberAbilitiesScoresNotInteger == 0)) {
				if (numberWarnings < 1000) {
					if (scoresTable.getDataFilePositionMapping(3) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoresTable.getRepeatableGroupName(),
										scoresTable.getColumnName(3));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedAbilitiesScore));
						table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoresTable.getDataFilePositionMapping(3),
										scoresTable.getRepeatableGroupName(),
										scoresTable.getColumnName(3));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedAbilitiesScore));
						table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								scoresTable.getDataFilePositionMapping(3), message));
					}
					numberWarnings++;
				} // if (numberWarnings < 1000)
			} // if ((numberAbilitiesScoresMissing == 0) && (numberAbilitiesScoresNotInteger == 0)
			
			if ((numberParticipationScoresMissing == 0) && (numberParticipationScoresNotInteger == 0)) {
				if (numberWarnings < 1000) {
					if (scoresTable.getDataFilePositionMapping(6) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoresTable.getRepeatableGroupName(),
										scoresTable.getColumnName(6));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedParticipationScore));
						table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoresTable.getDataFilePositionMapping(6),
										scoresTable.getRepeatableGroupName(),
										scoresTable.getColumnName(6));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedParticipationScore));
						table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								scoresTable.getDataFilePositionMapping(6), message));
					}
					numberWarnings++;
				} // if (numberWarnings < 1000)
			} // if ((numberParticipationScoresMissing == 0) && (numberParticipationScoresNotInteger == 0)	
			
			if ((numberTotalScoresMissing == 0) && (numberTotalScoresNotInteger == 0)) {
				if (numberWarnings < 1000) {
					if (scoresTable.getDataFilePositionMapping(9) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoresTable.getRepeatableGroupName(),
										scoresTable.getColumnName(9));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoresTable.getDataFilePositionMapping(9),
										scoresTable.getRepeatableGroupName(),
										scoresTable.getColumnName(9));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								scoresTable.getDataFilePositionMapping(9), message));
					}
					numberWarnings++;
				} // if (numberWarnings < 1000)
			} // if ((numberTotalScoresMissing == 0) && (numberTotalScoresNotInteger == 0)	
		} // if (!haveScores)
		else { // haveScores
			if (adjustmentScoreIndex >= 0) {
				data = bufDataVector.get(adjustmentScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(adjustmentScoreIndex);
				group_row_index = bufGroup_row_index.get(adjustmentScoreIndex);
				index = bufIndex.get(adjustmentScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberAdjustmentScoresMissing == 0) && (numberAdjustmentScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedAdjustmentScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedAdjustmentScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberAdjustmentScoresMissing >= 1) || (numberAdjustmentScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualAdjustmentScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1,message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualAdjustmentScore > -1) {
		    	if (actualAdjustmentScore != calculatedAdjustmentScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualAdjustmentScore), String.valueOf(calculatedAdjustmentScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualAdjustmentScore), String.valueOf(calculatedAdjustmentScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    if (abilitiesScoreIndex >= 0) {
				data = bufDataVector.get(abilitiesScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(abilitiesScoreIndex);
				group_row_index = bufGroup_row_index.get(abilitiesScoreIndex);
				index = bufIndex.get(abilitiesScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberAbilitiesScoresMissing == 0) && (numberAbilitiesScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedAbilitiesScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedAbilitiesScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberAbilitiesScoresMissing >= 1) || (numberAbilitiesScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualAbilitiesScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1,message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualAbilitiesScore > -1) {
		    	if (actualAbilitiesScore != calculatedAbilitiesScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualAbilitiesScore), String.valueOf(calculatedAbilitiesScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualAbilitiesScore), String.valueOf(calculatedAbilitiesScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    if (participationScoreIndex >= 0) {
				data = bufDataVector.get(participationScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(participationScoreIndex);
				group_row_index = bufGroup_row_index.get(participationScoreIndex);
				index = bufIndex.get(participationScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberParticipationScoresMissing == 0) && (numberParticipationScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedParticipationScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedParticipationScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberParticipationScoresMissing >= 1) || (numberParticipationScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualParticipationScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1,message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualParticipationScore > -1) {
		    	if (actualParticipationScore != calculatedParticipationScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualParticipationScore), String.valueOf(calculatedParticipationScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualParticipationScore), String.valueOf(calculatedParticipationScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		    
			if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberTotalScoresMissing == 0) && (numberTotalScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberTotalScoresMissing >= 1) || (numberTotalScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1,message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }		
		} // else haveScores
	}
	
	private void validateBAI(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	BAI
		// table.getColumnCount = 5
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = BAI
		// rgTable.getSize() = 21
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 21
		// group_column_index = 0 group_column_name = bainumbscale data = 0
		// group_column_index = 1 group_column_name = baifeelhotscale data = 0
		// group_column_index = 2 group_column_name = baiwobblinessscale data = 1
		// group_column_index = 3 group_column_name = baiunabletorelaxscale data = 2
		// group_column_index = 4 group_column_name = baifearworstscale data = 0
		// group_column_index = 5 group_column_name = baidizzyscale data = 0
		// group_column_index = 6 group_column_name = baiheartpoundscale data = 0
		// group_column_index = 7 group_column_name = baiunsteadyscale data = 1
		// group_column_index = 8 group_column_name = baiterrifiedscale data = 0
		// group_column_index = 9 group_column_name = bainervousscale data = 0
		// group_column_index = 10 group_column_name = baichokingscale data = 0
		// group_column_index = 11 group_column_name = baihandstremblingscale data = 0
		// group_column_index = 12 group_column_name = baishakyscale data = 0
		// group_column_index = 13 group_column_name = baifearlosingcntrlscale data = 0
		// group_column_index = 14 group_column_name = baidiffcltybreathingscale data = 0
		// group_column_index = 15 group_column_name = baifeardyingscale data = 0
		// group_column_index = 16 group_column_name = baiscaredscale data = 0
		// group_column_index = 17 group_column_name = baiindigestionscale data = 0
		// group_column_index = 18 group_column_name = baifaintscale data = 0
		// group_column_index = 19 group_column_name = baifaceflushedscale data = 0
		// group_column_index = 20 group_column_name = baihotcoldsweatsscale data = 0
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Scores
		// rgTable.getSize() = 2
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 2
		// group_column_index = 0 group_column_name = baitotalscore data = 4
		// group_column_index = 1 group_column_name = baitotalscoreinterprettyp data = null
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 0
		// rgEntries.size() = 0
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = Main Group
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBI_INVND349VH9
		// group_column_index = 1 group_column_name = subjectidnum data = null
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = vitstatus data = null
		// group_column_index = 4 group_column_name = visitdate data = null
		// group_column_index = 5 group_column_name = sitename data = NO SITE
		// group_column_index = 6 group_column_name = dayssincebaseline data = null
		// group_column_index = 7 group_column_name = casecontrlind data = null
		// group_column_index = 8 group_column_name = generalnotestxt data = age not submitted
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMainGroup = true;
	    RepeatableGroupTable mainGroupTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveBAI = true;
        RepeatableGroupTable BAITable = null;
        int BAIIndex[] = new int[21];
        for (i = 0; i < 21; i++) {
        	BAIIndex[i] = -1;
        }
        boolean haveScores = true;
        RepeatableGroupTable scoresTable = null;
        int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main Group")) {
					haveMainGroup = false;
					mainGroupTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("BAI")) {
					haveBAI = false;
					BAITable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Scores")) {
					haveScores = false;
					scoresTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		        // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		        // for (i = 0; i < columnNameVector.size(); i++) {
		             // System.out.println("group_column_index = " + i +
		             // " group_column_name = " + columnNameVector.get(i) +
		             // " data = " + dataVector.get(i)) ;	
		    // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main Group")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("BAI")) {
				if (columnNameVector.get(i).equalsIgnoreCase("bainumbscale")) {
					BAIIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baifeelhotscale")) {
					BAIIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baiwobblinessscale")) {
					BAIIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baiunabletorelaxscale")) {
					BAIIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baifearworstscale")) {
					BAIIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baidizzyscale")) {
					BAIIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baiheartpoundscale")) {
					BAIIndex[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baiunsteadyscale")) {
					BAIIndex[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baiterrifiedscale")) {
					BAIIndex[8] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bainervousscale")) {
					BAIIndex[9] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baichokingscale")) {
					BAIIndex[10] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baihandstremblingscale")) {
					BAIIndex[11] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baishakyscale")) {
					BAIIndex[12] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baifearlosingcntrlscale")) {
					BAIIndex[13] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baidiffcltybreathingscale")) {
					BAIIndex[14] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baifeardyingscale")) {
					BAIIndex[15] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baiscaredscale")) {
					BAIIndex[16] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baiindigestionscale")) {
					BAIIndex[17] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baifaintscale")) {
					BAIIndex[18] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baifaceflushedscale")) {
					BAIIndex[19] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("baihotcoldsweatsscale")) {
					BAIIndex[20] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Scores")) {
				if (columnNameVector.get(i).equalsIgnoreCase("baitotalscore")) {
				    totalScoreIndex = bufSizeIndex;	
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 12) || (age > 89)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "12 to 89 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveBAI) {
			numberScoresMissing = 21;
			for (i = 0; i <= 20; i++) {
				if (BAITable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									BAITable.getRepeatableGroupName(),
									BAITable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(BAITable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									BAITable.getDataFilePositionMapping(i),
									BAITable.getRepeatableGroupName(),
									BAITable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(BAITable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							BAITable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 20; i++)			
	    } // if (!haveBAI)
		else { // haveBAI
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
			for (j = 0; j < BAIIndex.length; j++) { 
		    	i = BAIIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					        calculatedTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		} // else haveBAI
		
		if (!haveScores) {
			if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
				if (scoresTable.getDataFilePositionMapping(0) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									scoresTable.getRepeatableGroupName(),
									scoresTable.getColumnName(0));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											"blank",String.valueOf(calculatedTotalScore));
					table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									scoresTable.getDataFilePositionMapping(0),
									scoresTable.getRepeatableGroupName(),
									scoresTable.getColumnName(0));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											"blank",String.valueOf(calculatedTotalScore));
					table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							scoresTable.getDataFilePositionMapping(0), message));
				}
			} // if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0))
	    } // if (!haveScores)
		else { // haveScores
			if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1,message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveScores
	}
	
	private void validatePCSI_P(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	PCSI_P
		// table.getColumnCount = 5
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBILM954CXZ
		// group_column_index = 1 group_column_name = subjectidnum data = VT0055
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = vitstatus data = null
		// group_column_index = 4 group_column_name = visitdate data = 2018-10-26T00:00:00Z
		// group_column_index = 5 group_column_name = sitename data = Virginia Tech
		// group_column_index = 6 group_column_name = dayssincebaseline data = null
		// group_column_index = 7 group_column_name = casecontrlind data = null
		// group_column_index = 8 group_column_name = generalnotestxt data = Postseason. Age not submitted
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Generally Different
		// rgTable.getSize() = 1
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 1
		// group_column_index = 0 group_column_name = pcsipgenerallydifferentscale data = 3
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Before the Injury/ Pre-Injury
		// rgTable.getSize() = 26
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 26
		// group_column_index = 0 group_column_name = pcsipheadachescale data = 4
		// group_column_index = 1 group_column_name = pcsipnauseascale data = 0
		// group_column_index = 2 group_column_name = pcsipvomitscale data = 0
		// group_column_index = 3 group_column_name = pcsipbalanceprobscale data = 0
		// group_column_index = 4 group_column_name = pcsipdizzinessscale data = 0
		// group_column_index = 5 group_column_name = pcsiptroublefallasleepscale data = 1
		// group_column_index = 6 group_column_name = pcsipsleepmorethanusualscale data = 0
		// group_column_index = 7 group_column_name = pcsipsleeplessthanusualscale data = 0
		// group_column_index = 8 group_column_name = pcsipdrowsyscale data = 0
		// group_column_index = 9 group_column_name = pcsipsensitivetolightscale data = 0
		// group_column_index = 10 group_column_name = pcsipsensitivetonoisescale data = 0
		// group_column_index = 11 group_column_name = pcsipirritablescale data = 0
		// group_column_index = 12 group_column_name = pcsipsadscale data = 0
		// group_column_index = 13 group_column_name = pcsipnervousscale data = 0
		// group_column_index = 14 group_column_name = pcsipmoreemotionalscale data = 0
		// group_column_index = 15 group_column_name = pcsipnumbnesstinglingscale data = 0
		// group_column_index = 16 group_column_name = pcsipsloweddownscale data = 0
		// group_column_index = 17 group_column_name = pcsipmentallyfoggyscale data = 0
		// group_column_index = 18 group_column_name = pcsipdiffconcentratescale data = 0
		// group_column_index = 19 group_column_name = pcsipdiffrememberscale data = 0
		// group_column_index = 20 group_column_name = pcsipvisualprobscale data = 0
		// group_column_index = 21 group_column_name = pcsiptiredfatiguedscale data = 0
		// group_column_index = 22 group_column_name = pcsipdazedstunnedscale data = null
		// group_column_index = 23 group_column_name = pcsipconfusedscale data = 0
		// group_column_index = 24 group_column_name = pcsipclumsyscale data = 0
		// group_column_index = 25 group_column_name = pcsipanswerslowlyscale data = 0
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = Within the Last Few Days
		// rgTable.getSize() = 26
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 26
		// group_column_index = 0 group_column_name = pcsipheadachescale data = 6
		// group_column_index = 1 group_column_name = pcsipnauseascale data = 4
		// group_column_index = 2 group_column_name = pcsipvomitscale data = 0
		// group_column_index = 3 group_column_name = pcsipbalanceprobscale data = 5
		// group_column_index = 4 group_column_name = pcsipdizzinessscale data = 1
		// group_column_index = 5 group_column_name = pcsiptroublefallasleepscale data = 1
		// group_column_index = 6 group_column_name = pcsipsleepmorethanusualscale data = 6
		// group_column_index = 7 group_column_name = pcsipsleeplessthanusualscale data = 0
		// group_column_index = 8 group_column_name = pcsipdrowsyscale data = 4
		// group_column_index = 9 group_column_name = pcsipsensitivetolightscale data = 6
		// group_column_index = 10 group_column_name = pcsipsensitivetonoisescale data = 5
		// group_column_index = 11 group_column_name = pcsipirritablescale data = 6
		// group_column_index = 12 group_column_name = pcsipsadscale data = 5
		// group_column_index = 13 group_column_name = pcsipnervousscale data = 3
		// group_column_index = 14 group_column_name = pcsipmoreemotionalscale data = 6
		// group_column_index = 15 group_column_name = pcsipnumbnesstinglingscale data = 0
		// group_column_index = 16 group_column_name = pcsipsloweddownscale data = 4
		// group_column_index = 17 group_column_name = pcsipmentallyfoggyscale data = 4
		// group_column_index = 18 group_column_name = pcsipdiffconcentratescale data = 4
		// group_column_index = 19 group_column_name = pcsipdiffrememberscale data = 2
		// group_column_index = 20 group_column_name = pcsipvisualprobscale data = 3
		// group_column_index = 21 group_column_name = pcsiptiredfatiguedscale data = 4
		// group_column_index = 22 group_column_name = pcsipdazedstunnedscale data = 3
		// group_column_index = 23 group_column_name = pcsipconfusedscale data = 4
		// group_column_index = 24 group_column_name = pcsipclumsyscale data = 2
		// group_column_index = 25 group_column_name = pcsipanswerslowlyscale data = 3
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;	
	    boolean haveLast = true;
	    RepeatableGroupTable lastTable = null;
	    int lastIndex[] = new int[26];
	    for (i = 0; i < 26; i++) {
	    	lastIndex[i] = -1;
	    }
	    int lastScale[] = new int[26];
	    for (i = 0; i < 26; i++) {
	    	lastScale[i] = -1;
	    }
	    boolean haveBefore = true;
	    RepeatableGroupTable beforeTable = null;
	    int beforeIndex[] = new int[26];
	    for (i = 0; i < 26; i++) {
	    	beforeIndex[i] = -1;
	    }
	    int beforeScale[] = new int[26];
	    for (i = 0; i < 26; i++) {
	    	beforeScale[i] = -1;
	    }
	    boolean haveDifferent = true;
	    RepeatableGroupTable differentTable = null;
	    int differentIndex = -1;
	    int differentScale = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Within the Last Few Days")) {
					haveLast = false;
					lastTable = rgTable;    
				} // else if (repeatableGroupName.equalsIgnoreCase("Within the Last Few Days"))
				else if (repeatableGroupName.equalsIgnoreCase("Before the Injury/ Pre-Injury")) {
				    haveBefore = false;
				    beforeTable = rgTable;
				} // else if (repeatableGroupName.equalsIgnoreCase("Before the Injury/ Pre-Injury"))
				else if (repeatableGroupName.equalsIgnoreCase("Generally Different")) {
				    haveDifferent = false;
				    differentTable = rgTable;
				} // else if (repeatableGroupName.equalsIgnoreCase("Generally Different"))
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		        // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		        // for (i = 0; i < columnNameVector.size(); i++) {
		        // System.out.println("group_column_index = " + i +
		        // " group_column_name = " + columnNameVector.get(i) +
		        //  " data = " + dataVector.get(i)) ;	
		       // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Within the Last Few Days")) {
				if (columnNameVector.get(i).equalsIgnoreCase("pcsipheadachescale")) {
			    	lastIndex[0] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipnauseascale")) {
			    	lastIndex[1] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipvomitscale")) {
			    	lastIndex[2] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipbalanceprobscale")) {
			    	lastIndex[3] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipdizzinessscale")) {
			    	lastIndex[4] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsiptroublefallasleepscale")) {
			    	lastIndex[5] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsleepmorethanusualscale")) {
			    	lastIndex[6] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsleeplessthanusualscale")) {
			    	lastIndex[7] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipdrowsyscale")) {
			    	lastIndex[8] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsensitivetolightscale")) {
			    	lastIndex[9] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsensitivetonoisescale")) {
			    	lastIndex[10] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipirritablescale")) {
			    	lastIndex[11] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsadscale")) {
			    	lastIndex[12] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipnervousscale")) {
			    	lastIndex[13] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipmoreemotionalscale")) {
			    	lastIndex[14] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipnumbnesstinglingscale")) {
			    	lastIndex[15] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsloweddownscale")) {
			    	lastIndex[16] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipmentallyfoggyscale")) {
			    	lastIndex[17] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipdiffconcentratescale")) {
			    	lastIndex[18] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipdiffrememberscale")) {
			    	lastIndex[19] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipvisualprobscale")) {
			    	lastIndex[20] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsiptiredfatiguedscale")) {
			    	lastIndex[21] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipdazedstunnedscale")) {
			    	lastIndex[22] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipconfusedscale")) {
			    	lastIndex[23] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipclumsyscale")) {
			    	lastIndex[24] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipanswerslowlyscale")) {
			    	lastIndex[25] = bufSizeIndex;
			    }
			} // else if (repeatableGroupName.equalsIgnoreCase("Within the Last Few Days"))
			else if (repeatableGroupName.equalsIgnoreCase("Before the Injury/ Pre-Injury")) {
				if (columnNameVector.get(i).equalsIgnoreCase("pcsipheadachescale")) {
			    	beforeIndex[0] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipnauseascale")) {
			    	beforeIndex[1] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipvomitscale")) {
			    	beforeIndex[2] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipbalanceprobscale")) {
			    	beforeIndex[3] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipdizzinessscale")) {
			    	beforeIndex[4] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsiptroublefallasleepscale")) {
			    	beforeIndex[5] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsleepmorethanusualscale")) {
			    	beforeIndex[6] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsleeplessthanusualscale")) {
			    	beforeIndex[7] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipdrowsyscale")) {
			    	beforeIndex[8] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsensitivetolightscale")) {
			    	beforeIndex[9] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsensitivetonoisescale")) {
			    	beforeIndex[10] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipirritablescale")) {
			    	beforeIndex[11] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsadscale")) {
			    	beforeIndex[12] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipnervousscale")) {
			    	beforeIndex[13] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipmoreemotionalscale")) {
			    	beforeIndex[14] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipnumbnesstinglingscale")) {
			    	beforeIndex[15] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipsloweddownscale")) {
			    	beforeIndex[16] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipmentallyfoggyscale")) {
			    	beforeIndex[17] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipdiffconcentratescale")) {
			    	beforeIndex[18] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipdiffrememberscale")) {
			    	beforeIndex[19] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipvisualprobscale")) {
			    	beforeIndex[20] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsiptiredfatiguedscale")) {
			    	beforeIndex[21] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipdazedstunnedscale")) {
			    	beforeIndex[22] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipconfusedscale")) {
			    	beforeIndex[23] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipclumsyscale")) {
			    	beforeIndex[24] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("pcsipanswerslowlyscale")) {
			    	beforeIndex[25] = bufSizeIndex;
			    }    
			} // else if (repeatableGroupName.equalsIgnoreCase("Before the Injury/ Pre-Injury"))
			else if (repeatableGroupName.equalsIgnoreCase("Generally Different")) {
				if (columnNameVector.get(i).equalsIgnoreCase("pcsipgenerallydifferentscale")) {
			    	differentIndex = bufSizeIndex;
			    }    	
			} // else if (repeatableGroupName.equalsIgnoreCase("Generally Different"))
	    } // for (i = 0; i < columnNameVector.size(); i++)
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 5) || (age > 18)){
					if (numberWarnings < 1000) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "5 to 18 years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "5 to 18 years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
					numberWarnings++;
					} // if (numberWarnings < 1000)
				}
			}
		  } // if (ageyrsIndex > -1)
		
		if (!haveDifferent) {
			if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	
				message = message + "data is missing for Generally Different.PCSIPGenerallyDifferentScale";
				if (differentTable.getDataFilePositionMapping(0) == null) {
					table.addOutput(new ValidationOutput(differentTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					table.addOutput(new ValidationOutput(differentTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							differentTable.getDataFilePositionMapping(0), message));
				}
				numberWarnings++;
		    } // if (numberWarnings < 1000)	
		} // if (!haveDifferent)
		else { // haveDifferent
			if (differentIndex > -1) {
				data = bufDataVector.get(differentIndex);
				repeatable_group_id = bufRepeatable_group_id.get(differentIndex);
				group_row_index = bufGroup_row_index.get(differentIndex);
				index = bufIndex.get(differentIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if (numberWarnings < 1000) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
					numberWarnings++;
					} // if (numberWarnings < 1000)
				}	
				else {
					try {
				        differentScale = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));  
						}
					}
				} // else
			  } // if (differentIndex > -1)	
		} // else haveDifferent
		
		int numberBeforeScoresMissing = 0;
		int numberBeforeScoresNotInteger = 0;
		int numberLastScoresMissing = 0;
		int numberLastScoresNotInteger = 0;
		int numberLastBeforeScoresMissing = 0;
		Vector<Integer>missingIndices = new Vector<Integer>();
	    int missing_repeatable_group_id = -1;
	    int missing_group_row_index = -1;
	    Vector<Integer>missingBeforeIndices = new Vector<Integer>();
	    int missingBefore_repeatable_group_id = -1;
	    int missingBefore_group_row_index = -1;
	    Vector<Integer>notIntegerIndices = new Vector<Integer>();
	    int notInteger_repeatable_group_id = -1;
	    int notInteger_group_row_index = -1;
	    Vector<String>notIntegerData = new Vector<String>();
	    if (!haveBefore) {
			numberBeforeScoresMissing = 26;
			if ((numberWarnings < 1000) && (differentScale > -1)) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	
				message = message + "all 26 scores are missing in the \"Before the Injury/ Pre-Injury\" group" +
				" while Generally Different.PCSIPGenerallyDifferent Scale is provided";
				if (beforeTable.getDataFilePositionMapping(0) == null) {
					table.addOutput(new ValidationOutput(beforeTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					table.addOutput(new ValidationOutput(beforeTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							beforeTable.getDataFilePositionMapping(0), message));
				}
				numberWarnings++;
		    } // if ((numberWarnings < 1000) && (differentScale > -1))
	    } // if (!haveBefore)
		else { // haveBefore
			for (j = 0; j < beforeIndex.length; j++) { 
		    	i = beforeIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberBeforeScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       beforeScale[j] = Integer.valueOf(data).intValue();					       
						}
						catch (NumberFormatException e) {
							numberBeforeScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			
		    
		    if ((numberBeforeScoresMissing >= 1) && (differentScale > -1)) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberBeforeScoresMissing; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND) + " while Generally Different.PCSIPGenerallyDifferentScale is provided";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getDataFilePositionMapping(missingIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND) + " while Generally Different.PCSIPGenerallyDifferentScale is provided";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if ((numberBeforeScoresMissing >= 1) && (differentScale > -1))
		    
		    if (numberBeforeScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberBeforeScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberBeforeScoresNotInteger >= 1)	
		} // else haveLast

		if (!haveLast) {
			numberLastScoresMissing = 26;
			if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	
				message = message + "all 26 scores are missing in the \"Within the Last Few Days\" group";
				if (lastTable.getDataFilePositionMapping(0) == null) {
					table.addOutput(new ValidationOutput(lastTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					table.addOutput(new ValidationOutput(lastTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							lastTable.getDataFilePositionMapping(0), message));
				}
				numberWarnings++;
		    } // if (numberWarnings < 1000)
	    } // if (!haveLast)
		else { // haveLast
			missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < lastIndex.length; j++) { 
		    	i = lastIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberLastScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       lastScale[j] = Integer.valueOf(data).intValue();	
					       if (beforeScale[j] == -1) {
					    	    numberLastBeforeScoresMissing++;
					    	    missingBeforeIndices.add(bufIndex.get(i));
							    missingBefore_repeatable_group_id = bufRepeatable_group_id.get(i);
								missingBefore_group_row_index = bufGroup_row_index.get(i);   
					       }
						}
						catch (NumberFormatException e) {
							numberLastScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			
		    
		    if ((numberLastScoresMissing >= 1) && (differentScale > -1)) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberLastScoresMissing; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND) + " while Generally Different.PCSIPGenerallyDifferentScale is provided";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getDataFilePositionMapping(missingIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND) + " while Generally Different.PCSIPGenerallyDifferentScale is provided";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberLastScoresMissing >= 1)
		    
		    if (numberLastBeforeScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missingBefore_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missingBefore_repeatable_group_id, null);
		    	for (i = 0; i < numberLastBeforeScoresMissing; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(missingBeforeIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, missingBefore_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingBeforeIndices.get(i)));
		
							message =
									message
											+ "is present but corresponding data in the \"Before the Injury/Pre-Injury\" is missing";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missingBefore_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, missingBefore_group_row_index),
											rgTable.getDataFilePositionMapping(missingBeforeIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingBeforeIndices.get(i)));
		
							message =
									message
											+ "is present but corresponding data in the \"Before the Injury/Pre-Injury\" is missing";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missingBefore_group_row_index),
									rgTable.getDataFilePositionMapping(missingBeforeIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberLastBeforeScoresMissing >= 1)
		    
		    if (numberLastScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberLastScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));		
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberLastScoresNotInteger >= 1)	
		} // else haveLast
	}
	
	private void validateTOMM(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
        // table.getColumnCount = 6
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = contexttype data = After injury
		// group_column_index = 1 group_column_name = contexttypeoth data = null
		// group_column_index = 2 group_column_name = datasource data = Participant/subject
		// group_column_index = 3 group_column_name = datasourceoth data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Retention Trial
		// rgTable.getSize() = 51
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 51
		// group_column_index = 0 group_column_name = tommretentiontq1score data = 1
		// group_column_index = 1 group_column_name = tommretentiontq2score data = 0
		// group_column_index = 2 group_column_name = tommretentiontq3score data = 1
		// group_column_index = 3 group_column_name = tommretentiontq4score data = 1
		// group_column_index = 4 group_column_name = tommretentiontq5score data = 1
		// group_column_index = 5 group_column_name = tommretentiontq6score data = 1
		// group_column_index = 6 group_column_name = tommretentiontq7score data = 1
		// group_column_index = 7 group_column_name = tommretentiontq8score data = 1
		// group_column_index = 8 group_column_name = tommretentiontq9score data = 1
		// group_column_index = 9 group_column_name = tommretentiontq10score data = 1
		// group_column_index = 10 group_column_name = tommretentiontq11score data = 1
		// group_column_index = 11 group_column_name = tommretentiontq12score data = 1
		// group_column_index = 12 group_column_name = tommretentiontq13score data = 1
		// group_column_index = 13 group_column_name = tommretentiontq14score data = 1
		// group_column_index = 14 group_column_name = tommretentiontq15score data = 1
		// group_column_index = 15 group_column_name = tommretentiontq16score data = 1
		// group_column_index = 16 group_column_name = tommretentiontq17score data = 1
		// group_column_index = 17 group_column_name = tommretentiontq18score data = 1
		// group_column_index = 18 group_column_name = tommretentiontq19score data = 1
		// group_column_index = 19 group_column_name = tommretentiontq20score data = 1
		// group_column_index = 20 group_column_name = tommretentiontq21score data = 1
		// group_column_index = 21 group_column_name = tommretentiontq22score data = 1
		// group_column_index = 22 group_column_name = tommretentiontq23score data = 1
		// group_column_index = 23 group_column_name = tommretentiontq24score data = 1
		// group_column_index = 24 group_column_name = tommretentiontq25score data = 1
		// group_column_index = 25 group_column_name = tommretentiontq26score data = 1
		// group_column_index = 26 group_column_name = tommretentiontq27score data = 1
		// group_column_index = 27 group_column_name = tommretentiontq28score data = 1
		// group_column_index = 28 group_column_name = tommretentiontq29score data = 1
		// group_column_index = 29 group_column_name = tommretentiontq30score data = 1
		// group_column_index = 30 group_column_name = tommretentiontq31score data = 1
		// group_column_index = 31 group_column_name = tommretentiontq32score data = 1
		// group_column_index = 32 group_column_name = tommretentiontq33score data = 1
		// group_column_index = 33 group_column_name = tommretentiontq34score data = 1
		// group_column_index = 34 group_column_name = tommretentiontq35score data = 1
		// group_column_index = 35 group_column_name = tommretentiontq36score data = 1
		// group_column_index = 36 group_column_name = tommretentiontq37score data = 1
		// group_column_index = 37 group_column_name = tommretentiontq38score data = 1
		// group_column_index = 38 group_column_name = tommretentiontq39score data = 1
		// group_column_index = 39 group_column_name = tommretentiontq40score data = 1
		// group_column_index = 40 group_column_name = tommretentiontq41score data = 1
		// group_column_index = 41 group_column_name = tommretentiontq42score data = 1
		// group_column_index = 42 group_column_name = tommretentiontq43score data = 1
		// group_column_index = 43 group_column_name = tommretentiontq44score data = 1
		// group_column_index = 44 group_column_name = tommretentiontq45score data = 1
		// group_column_index = 45 group_column_name = tommretentiontq46score data = 1
		// group_column_index = 46 group_column_name = tommretentiontq47score data = 1
		// group_column_index = 47 group_column_name = tommretentiontq48score data = 1
		// group_column_index = 48 group_column_name = tommretentiontq49score data = 1
		// group_column_index = 49 group_column_name = tommretentiontq50score data = 1
		// group_column_index = 50 group_column_name = tommretentionttotalcorrscore data = 50
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBILF798BNE
		// group_column_index = 1 group_column_name = subjectidnum data = CI-009
		// group_column_index = 2 group_column_name = ageyrs data = 16
		// group_column_index = 3 group_column_name = visitdate data = 2015-11-23T00:00:00Z
		// group_column_index = 4 group_column_name = sitename data = KKI
		// group_column_index = 5 group_column_name = dayssincebaseline data = 36
		// group_column_index = 6 group_column_name = casecontrlind data = Case
		// group_column_index = 7 group_column_name = generalnotestxt data = TOMMRetentionTTotalCorrScore is incorrect
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = TOMM Trial 1
		// rgTable.getSize() = 51
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 51
		// group_column_index = 0 group_column_name = tommt1q1score data = 1
		// group_column_index = 1 group_column_name = tommt1q2score data = 0
		// group_column_index = 2 group_column_name = tommt1q3score data = 1
		// group_column_index = 3 group_column_name = tommt1q4score data = 1
		// group_column_index = 4 group_column_name = tommt1q5score data = 1
		// group_column_index = 5 group_column_name = tommt1q6score data = 1
		// group_column_index = 6 group_column_name = tommt1q7score data = 1
		// group_column_index = 7 group_column_name = tommt1q8score data = 1
		// group_column_index = 8 group_column_name = tommt1q9score data = 1
		// group_column_index = 9 group_column_name = tommt1q10score data = 1
		// group_column_index = 10 group_column_name = tommt1q11score data = 1
		// group_column_index = 11 group_column_name = tommt1q12score data = 1
		// group_column_index = 12 group_column_name = tommt1q13score data = 1
		// group_column_index = 13 group_column_name = tommt1q14score data = 1
		// group_column_index = 14 group_column_name = tommt1q15score data = 1
		// group_column_index = 15 group_column_name = tommt1q16score data = 1
		// group_column_index = 16 group_column_name = tommt1q17score data = 1
		// group_column_index = 17 group_column_name = tommt1q18score data = 1
		// group_column_index = 18 group_column_name = tommt1q19score data = 1
		// group_column_index = 19 group_column_name = tommt1q20score data = 1
		// group_column_index = 20 group_column_name = tommt1q21score data = 1
		// group_column_index = 21 group_column_name = tommt1q22score data = 1
		// group_column_index = 22 group_column_name = tommt1q23score data = 1
		// group_column_index = 23 group_column_name = tommt1q24score data = 1
		// group_column_index = 24 group_column_name = tommt1q25score data = 1
		// group_column_index = 25 group_column_name = tommt1q26score data = 1
		// group_column_index = 26 group_column_name = tommt1q27score data = 1
		// group_column_index = 27 group_column_name = tommt1q28score data = 1
		// group_column_index = 28 group_column_name = tommt1q29score data = 1
		// group_column_index = 29 group_column_name = tommt1q30score data = 1
		// group_column_index = 30 group_column_name = tommt1q31score data = 1
		// group_column_index = 31 group_column_name = tommt1q32score data = 1
		// group_column_index = 32 group_column_name = tommt1q33score data = 1
		// group_column_index = 33 group_column_name = tommt1q34score data = 1
		// group_column_index = 34 group_column_name = tommt1q35score data = 1
		// group_column_index = 35 group_column_name = tommt1q36score data = 1
		// group_column_index = 36 group_column_name = tommt1q37score data = 1
		// group_column_index = 37 group_column_name = tommt1q38score data = 1
		// group_column_index = 38 group_column_name = tommt1q39score data = 1
		// group_column_index = 39 group_column_name = tommt1q40score data = 1
		// group_column_index = 40 group_column_name = tommt1q41score data = 1
		// group_column_index = 41 group_column_name = tommt1q42score data = 1
		// group_column_index = 42 group_column_name = tommt1q43score data = 1
		// group_column_index = 43 group_column_name = tommt1q44score data = 1
		// group_column_index = 44 group_column_name = tommt1q45score data = 1
		// group_column_index = 45 group_column_name = tommt1q46score data = 1
		// group_column_index = 46 group_column_name = tommt1q47score data = 1
		// group_column_index = 47 group_column_name = tommt1q48score data = 1
		// group_column_index = 48 group_column_name = tommt1q49score data = 1
		// group_column_index = 49 group_column_name = tommt1q50score data = 1
		// group_column_index = 50 group_column_name = tommt1totalcorrscore data = 49
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = TOMM Trial 2
		// rgTable.getSize() = 51
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 51
		// group_column_index = 0 group_column_name = tommt2q1score data = 1
		// group_column_index = 1 group_column_name = tommt2q10score data = 0
		// group_column_index = 2 group_column_name = tommt2q11score data = 1
		// group_column_index = 3 group_column_name = tommt2q12score data = 1
		// group_column_index = 4 group_column_name = tommt2q13score data = 1
		// group_column_index = 5 group_column_name = tommt2q14score data = 1
		// group_column_index = 6 group_column_name = tommt2q15score data = 1
		// group_column_index = 7 group_column_name = tommt2q16score data = 1
		// group_column_index = 8 group_column_name = tommt2q17score data = 1
		// group_column_index = 9 group_column_name = tommt2q18score data = 1
		// group_column_index = 10 group_column_name = tommt2q19score data = 1
		// group_column_index = 11 group_column_name = tommt2q2score data = 1
		// group_column_index = 12 group_column_name = tommt2q20score data = 1
		// group_column_index = 13 group_column_name = tommt2q21score data = 1
		// group_column_index = 14 group_column_name = tommt2q22score data = 1
		// group_column_index = 15 group_column_name = tommt2q23score data = 1
		// group_column_index = 16 group_column_name = tommt2q24score data = 1
		// group_column_index = 17 group_column_name = tommt2q25score data = 1
		// group_column_index = 18 group_column_name = tommt2q26score data = 1
		// group_column_index = 19 group_column_name = tommt2q27score data = 1
		// group_column_index = 20 group_column_name = tommt2q28score data = 1
		// group_column_index = 21 group_column_name = tommt2q29score data = 1
		// group_column_index = 22 group_column_name = tommt2q3score data = 1
		// group_column_index = 23 group_column_name = tommt2q30score data = 1
		// group_column_index = 24 group_column_name = tommt2q31score data = 1
		// group_column_index = 25 group_column_name = tommt2q32score data = 1
		// group_column_index = 26 group_column_name = tommt2q33score data = 1
		// group_column_index = 27 group_column_name = tommt2q34score data = 1
		// group_column_index = 28 group_column_name = tommt2q35score data = 1
		// group_column_index = 29 group_column_name = tommt2q36score data = 1
		// group_column_index = 30 group_column_name = tommt2q37score data = 1
		// group_column_index = 31 group_column_name = tommt2q38score data = 1
		// group_column_index = 32 group_column_name = tommt2q39score data = 1
		// group_column_index = 33 group_column_name = tommt2q4score data = 1
		// group_column_index = 34 group_column_name = tommt2q40score data = 1
		// group_column_index = 35 group_column_name = tommt2q41score data = 1
		// group_column_index = 36 group_column_name = tommt2q42score data = 1
		// group_column_index = 37 group_column_name = tommt2q43score data = 1
		// group_column_index = 38 group_column_name = tommt2q44score data = 1
		// group_column_index = 39 group_column_name = tommt2q45score data = 1
		// group_column_index = 40 group_column_name = tommt2q46score data = 1
		// group_column_index = 41 group_column_name = tommt2q47score data = 1
		// group_column_index = 42 group_column_name = tommt2q48score data = 1
		// group_column_index = 43 group_column_name = tommt2q49score data = 1
		// group_column_index = 44 group_column_name = tommt2q5score data = 1
		// group_column_index = 45 group_column_name = tommt2q50score data = 1
		// group_column_index = 46 group_column_name = tommt2q6score data = 1
		// group_column_index = 47 group_column_name = tommt2q7score data = 1
		// group_column_index = 48 group_column_name = tommt2q8score data = 1
		// group_column_index = 49 group_column_name = tommt2q9score data = 1
		// group_column_index = 50 group_column_name = tommt2totalcorrscore data = 49
		// repeatable_group_id = 5
		// rgTable.getRepeatableGroupName() = Totals
		// rgTable.getSize() = 2
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 2
		// group_column_index = 0 group_column_name = tommretentionttotalcorrscore data = null
		// group_column_index = 1 group_column_name = tommmalingeringpossind data = No
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    boolean haveTrial1 = true;
	    RepeatableGroupTable trial1Table = null;
	    int index1[] = new int[50];
	    for (i = 0; i < 50; i++) {
	    	index1[i] = -1;
	    }
	    int totalScore1Index = -1;
	    boolean haveTrial2 = true;
	    RepeatableGroupTable trial2Table = null;
	    int index2[] = new int[50];
	    for (i = 0; i < 50; i++) {
	    	index2[i] = -1;
	    }
	    int totalScore2Index = -1;
	    boolean haveRetention = true;
	    RepeatableGroupTable retentionTable = null;
	    int retentionIndex[] = new int[50];
	    for (i = 0; i < 50; i++) {
	    	retentionIndex[i] = -1;
	    }
	    int totalRetentionScoreIndex = -1;
	    boolean haveTotals = true;
	    RepeatableGroupTable totalsTable = null;
	    int malingeringIndex = -1;

	    
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("TOMM Trial 1")) {
					haveTrial1 = false;
					trial1Table = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("TOMM Trial 2")) {
					haveTrial2 = false;
					trial2Table = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Retention Trial")) {
					haveRetention = false;
					retentionTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Totals")) {
					haveTotals = false;
					totalsTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	//System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		      // System.out.println("group_column_index = " + i +
		      //  " group_column_name = " + columnNameVector.get(i) +
		      //  " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("TOMM Trial 1")) {
			    for (j = 1; j <= 50; j++) {
			        if (columnNameVector.get(i).equalsIgnoreCase("tommt1q"+String.valueOf(j)+"score")) {
			            index1[j-1] = bufSizeIndex;
			            break;
			        }
			    } // for (j = 1; j <= 50; j++)
			    if (columnNameVector.get(i).equalsIgnoreCase("tommt1totalcorrscore")) {
			    	totalScore1Index = bufSizeIndex;
			    }
			} // else if (repeatableGroupName.equalsIgnoreCase("TOMM Trial 1"))
			else if (repeatableGroupName.equalsIgnoreCase("TOMM Trial 2")) {
			    for (j = 1; j <= 50; j++) {
			        if (columnNameVector.get(i).equalsIgnoreCase("tommt2q"+String.valueOf(j)+"score")) {
			            index2[j-1] = bufSizeIndex;
			            break;
			        }
			    } // for (j = 1; j <= 50; j++)
			    if (columnNameVector.get(i).equalsIgnoreCase("tommt2totalcorrscore")) {
			    	totalScore2Index = bufSizeIndex;
			    }
			} // else if (repeatableGroupName.equalsIgnoreCase("TOMM Trial 2"))
			else if (repeatableGroupName.equalsIgnoreCase("Retention Trial")) {
			    for (j = 1; j <= 50; j++) {
			        if (columnNameVector.get(i).equalsIgnoreCase("tommretentiontq"+String.valueOf(j)+"score")) {
			            retentionIndex[j-1] = bufSizeIndex;
			            break;
			        }
			    } // for (j = 1; j <= 50; j++)
			    if (columnNameVector.get(i).equalsIgnoreCase("tommretentionttotalcorrscore")) {
			    	totalRetentionScoreIndex = bufSizeIndex;
			    }
			} // else if (repeatableGroupName.equalsIgnoreCase("Retention Trial"))
			else if (repeatableGroupName.equalsIgnoreCase("Totals")) {
				if (columnNameVector.get(i).equalsIgnoreCase("tommmalingeringpossind")) {
			    	malingeringIndex = bufSizeIndex;
			    }	
			} // else if (repeatableGroupName.equalsIgnoreCase("Totals"))
	    } // for (i = 0; i < columnNameVector.size(); i++)
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 16) || (age > 84)){
					if (numberWarnings < 1000) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "16 to 84 years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "16 to 84 years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
					numberWarnings++;
					} // if (numberWarnings < 1000)
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore1 = 0;
		int actualTotalScore1 = -1;
		int calculatedTotalScore2 = 0;
		int actualTotalScore2 = -1;
		int calculatedTotalRetentionScore = 0;
		int actualTotalRetentionScore = -1;
		int numberScores1Missing = 0;
		int numberScores1NotInteger = 0;
		int numberScores2Missing = 0;
		int numberScores2NotInteger = 0;
		int numberRetentionScoresMissing = 0;
		int numberRetentionScoresNotInteger = 0;
		Vector<Integer>missingIndices = new Vector<Integer>();
	    int missing_repeatable_group_id = -1;
	    int missing_group_row_index = -1;
	    Vector<Integer>notIntegerIndices = new Vector<Integer>();
	    int notInteger_repeatable_group_id = -1;
	    int notInteger_group_row_index = -1;
	    Vector<String>notIntegerData = new Vector<String>();
	    int value;
	    String calculatedMalingering = "No";
		if (!haveTrial1) {
			numberScores1Missing = 50;
			if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	
				message = message + "for TOMM Trial 1 all 50 individual scores and the total score are missing";
				if (trial1Table.getDataFilePositionMapping(0) == null) {
					table.addOutput(new ValidationOutput(trial1Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					table.addOutput(new ValidationOutput(trial1Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							trial1Table.getDataFilePositionMapping(0), message));
				}
				numberWarnings++;
		    } // if (numberWarnings < 1000)
	    } // if (!haveTrial1)
		else { // haveTrail1	
			for (j = 0; j < index1.length; j++) { 
		    	i = index1[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScores1Missing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if ((value == 0) || (value == 1)) {
					           calculatedTotalScore1 += value;
					       }
						}
						catch (NumberFormatException e) {
							numberScores1NotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			
		    
		    if (numberScores1Missing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScores1Missing; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getDataFilePositionMapping(missingIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberScores1Missing >= 1)
		    
		    if (numberScores1NotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScores1NotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScores1NotInteger >= 1)
		    
		    if (totalScore1Index >= 0) {
				data = bufDataVector.get(totalScore1Index);
				repeatable_group_id = bufRepeatable_group_id.get(totalScore1Index);
				group_row_index = bufGroup_row_index.get(totalScore1Index);
				index = bufIndex.get(totalScore1Index);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScores1Missing == 0) && (numberScores1NotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore1));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore1));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScores1Missing >= 1) || (numberScores1NotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore1 = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualTotalScore1 > -1) {
		    	if (actualTotalScore1 != calculatedTotalScore1) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore1), String.valueOf(calculatedTotalScore1));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore1), String.valueOf(calculatedTotalScore1));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }		
		} // else haveTrial1
		
		if (!haveTrial2) {
			numberScores2Missing = 50;
			if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	
				message = message + "for TOMM Trial 2 all 50 individual scores and the total score are missing";
				if (trial2Table.getDataFilePositionMapping(0) == null) {
					table.addOutput(new ValidationOutput(trial2Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					table.addOutput(new ValidationOutput(trial2Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							trial2Table.getDataFilePositionMapping(0), message));
				}
				numberWarnings++;
		    } // if (numberWarnings < 1000)
	    } // if (!haveTrial2)
		else { // haveTrail2
			missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < index2.length; j++) { 
		    	i = index2[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScores2Missing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if ((value == 0) || (value == 1)) {
					           calculatedTotalScore2 += value;
					       }
						}
						catch (NumberFormatException e) {
							numberScores2NotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			
		    
		    if (numberScores2Missing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScores2Missing; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getDataFilePositionMapping(missingIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberScores2Missing >= 1)
		    
		    if (numberScores2NotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScores2NotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScores2NotInteger >= 1)
		    
		    if (totalScore2Index >= 0) {
				data = bufDataVector.get(totalScore2Index);
				repeatable_group_id = bufRepeatable_group_id.get(totalScore2Index);
				group_row_index = bufGroup_row_index.get(totalScore2Index);
				index = bufIndex.get(totalScore2Index);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScores2Missing == 0) && (numberScores2NotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore2));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore2));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScores2Missing >= 1) || (numberScores2NotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore2 = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));  
						}
					}
				}
			}
		    
		    if (actualTotalScore2 > -1) {
		    	if (actualTotalScore2 != calculatedTotalScore2) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore2), String.valueOf(calculatedTotalScore2));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore2), String.valueOf(calculatedTotalScore2));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }		
		} // else haveTrial2
		
		if (!haveRetention) {
			numberRetentionScoresMissing = 50;
			if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	
				message = message + "for Retention Trial all 50 individual scores and the total score are missing";
				if (retentionTable.getDataFilePositionMapping(0) == null) {
					table.addOutput(new ValidationOutput(retentionTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					table.addOutput(new ValidationOutput(retentionTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							retentionTable.getDataFilePositionMapping(0), message));
				}
				numberWarnings++;
		    } // if (numberWarnings < 1000)
	    } // if (!haveRetention)
		else { // haveRetention
			missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < retentionIndex.length; j++) { 
		    	i = retentionIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberRetentionScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if ((value == 0) || (value == 1)) {
					           calculatedTotalRetentionScore += value;
					       }
						}
						catch (NumberFormatException e) {
							numberRetentionScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			
		    
		    if (numberRetentionScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberRetentionScoresMissing; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getDataFilePositionMapping(missingIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberRetentionScoresMissing >= 1)
		    
		    if (numberRetentionScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberRetentionScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberRetentionScoresNotInteger >= 1)
		    
		    if (totalRetentionScoreIndex >= 0) {
				data = bufDataVector.get(totalRetentionScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalRetentionScoreIndex);
				group_row_index = bufGroup_row_index.get(totalRetentionScoreIndex);
				index = bufIndex.get(totalRetentionScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberRetentionScoresMissing == 0) && (numberRetentionScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalRetentionScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalRetentionScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberRetentionScoresMissing >= 1) || (numberRetentionScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalRetentionScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualTotalRetentionScore > -1) {
		    	if (actualTotalRetentionScore != calculatedTotalRetentionScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalRetentionScore), String.valueOf(calculatedTotalRetentionScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalRetentionScore), String.valueOf(calculatedTotalRetentionScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }		
		} // else haveRetention
		
		int incorrectScores2 = 50 - calculatedTotalScore2 - numberScores2Missing - numberScores2NotInteger;
		if (incorrectScores2 > 5) {
			calculatedMalingering = "Yes";
		}
		
		int incorrectRetentionScores = 50 - calculatedTotalRetentionScore - numberRetentionScoresMissing - numberRetentionScoresNotInteger;
		if (incorrectRetentionScores > 5) {
			calculatedMalingering = "Yes";
		}
		
		if (!haveTotals) {
			if (numberWarnings < 1000) {
				if (totalsTable.getDataFilePositionMapping(1) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									totalsTable.getRepeatableGroupName(),
									totalsTable.getColumnName(1));
		
					message =
							message
									+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
					table.addOutput(new ValidationOutput(totalsTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									totalsTable.getDataFilePositionMapping(1),
									totalsTable.getRepeatableGroupName(),
									totalsTable.getColumnName(1));
		
					message =
							message
									+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
					table.addOutput(new ValidationOutput(totalsTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							totalsTable.getDataFilePositionMapping(1), message));
				}
				numberWarnings++;
			} // if (numberWarnings < 1000)
		} // if (!haveTotals)
		else { // haveTotals
			data = bufDataVector.get(malingeringIndex);
			repeatable_group_id = bufRepeatable_group_id.get(malingeringIndex);
			group_row_index = bufGroup_row_index.get(malingeringIndex);
			index = bufIndex.get(malingeringIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if (haveTrial2 || haveRetention) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_REQUIRED_VALUE,
												"blank",String.valueOf(calculatedMalingering));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_REQUIRED_VALUE,
												"blank",String.valueOf(calculatedMalingering));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message)); 
					}
			    }
			}
			else if (!data.equalsIgnoreCase(calculatedMalingering)) {
				if (haveTrial2 || haveRetention) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_REQUIRED_VALUE,
												data,String.valueOf(calculatedMalingering));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));    
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_REQUIRED_VALUE,
												data,String.valueOf(calculatedMalingering));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
			    }	
			}
		} // else haveTotals
	}
	
	private void validateKingDevick(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	KingDevickTest
		// table.getColumnCount = 8
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = King-Devick Test General Details
		// rgTable.getSize() = 3
		// rgEntries.size() = 0
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = King-Devick Test Subject Baseline
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = kdtestbaselinthrecardasstotdur data = 37.66
		// group_column_index = 1 group_column_name = kdtestbaselinthrecardasserrnum data = 0
		// group_column_index = 2 group_column_name = kdtestcardcompletednum data = 3
		// group_column_index = 3 group_column_name = kdtestsubjbaselintimewtoerrdur data = 33.95
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = King-Devick Test Baseline Attempt 1
		// rgTable.getSize() = 3
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 3
		// group_column_index = 0 group_column_name = kdtestbaselinthrecardasstotdur data = 37.66
		// group_column_index = 1 group_column_name = kdtestbaselinthrecardasserrnum data = 0
		// group_column_index = 2 group_column_name = kdtestcardcompletednum data = null
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = King-Devick Test Baseline Attempt 2
		// rgTable.getSize() = 3
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 3
		// group_column_index = 0 group_column_name = kdtestbaselinthrecardasstotdur data = 33.95
		// group_column_index = 1 group_column_name = kdtestbaselinthrecardasserrnum data = 0
		// group_column_index = 2 group_column_name = kdtestcardcompletednum data = null
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBIUJ693GAM
		// group_column_index = 1 group_column_name = subjectidnum data = 15208
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = vitstatus data = Alive
		// group_column_index = 4 group_column_name = visitdate data = 2015-08-27T00:00:00Z
		// group_column_index = 5 group_column_name = sitename data = null
		// group_column_index = 6 group_column_name = dayssincebaseline data = null
		// group_column_index = 7 group_column_name = casecontrlind data = null
		// group_column_index = 8 group_column_name = generalnotestxt data = age not submitted
		// repeatable_group_id = 5
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = contexttype data = Other, specify
		// group_column_index = 1 group_column_name = contexttypeoth data = Baseline
		// group_column_index = 2 group_column_name = datasource data = Other, specify
		// group_column_index = 3 group_column_name = datasourceoth data = Spiral-bound card system
		// repeatable_group_id = 6
		// rgTable.getRepeatableGroupName() = King-Devick Test Removed From Play
		// rgTable.getSize() = 1
		// rgEntries.size() = 0
		// repeatable_group_id = 7
		// rgTable.getRepeatableGroupName() = King-Devick Test After Suspected Head Trauma
		// rgTable.getSize() = 6
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 6
		// group_column_index = 0 group_column_name = injuryelapseddaysdur data = 2
		// group_column_index = 1 group_column_name = kdtestpsushttcarasstotdur data = 37.66
		// group_column_index = 2 group_column_name = kdtestaftersuspectedhterrornum data = 0
		// group_column_index = 3 group_column_name = kdtestretsttimbtrthnbsltimind data = No
		// group_column_index = 4 group_column_name = kdtestcardcompletednum data = 3
		// group_column_index = 5 group_column_name = kdtestaftersuspectedhtcommtxt data = N/A
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    boolean haveAfter = true;
	    RepeatableGroupTable afterTable = null;
	    int afterTotDurIndex = -1;
	    int afterErrorNumIndex = -1;
	    int afterCompletedNumIndex = -1;
	    double afterTotDur = Double.NaN;
	    int afterErrorNum = -1;
	    int afterCompletedNum = -1;
	    boolean haveBaseline = true;
	    RepeatableGroupTable baselineTable = null;
	    int baselineTotDurIndex = -1;
	    int baselineErrorNumIndex = -1;
	    int baselineCompletedNumIndex = -1;
	    double baselineTotDur = Double.NaN;
	    int baselineErrorNum = -1;
	    int baselineCompletedNum = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("King-Devick Test After Suspected Head Trauma")) {
				    haveAfter = false;
				    afterTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("King-Devick Test Subject Baseline")) {
				    haveBaseline = false;
				    baselineTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		     // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		     // for (i = 0; i < columnNameVector.size(); i++) {
		     // System.out.println("group_column_index = " + i +
		     //   " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("King-Devick Test After Suspected Head Trauma")) {
				if (columnNameVector.get(i).equalsIgnoreCase("kdtestpsushttcarasstotdur")) {
				    afterTotDurIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("kdtestaftersuspectedhterrornum")) {
				    afterErrorNumIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("kdtestcardcompletednum")) {
				    afterCompletedNumIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("King-Devick Test Subject Baseline")) {
				if (columnNameVector.get(i).equalsIgnoreCase("kdtestbaselinthrecardasstotdur")) {
				    baselineTotDurIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("kdtestbaselinthrecardasserrnum")) {
				    baselineErrorNumIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("kdtestcardcompletednum")) {
				    baselineCompletedNumIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 5) || (age > 90)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "5 to 90 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "5 to 90 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		int numberScoresMissing = 0;
		Vector<Integer>missingIndices = new Vector<Integer>();
	    int missing_repeatable_group_id = -1;
	    int missing_group_row_index = -1;
	    int numberScoresNotInteger = 0;
	    Vector<Integer>notIntegerIndices = new Vector<Integer>();
	    int notInteger_repeatable_group_id = -1;
	    int notInteger_group_row_index = -1;
	    Vector<String>notIntegerData = new Vector<String>();
	    int numberScoresNotNumber = 0;
	    Vector<Integer>notNumberIndices = new Vector<Integer>();
	    int notNumber_repeatable_group_id = -1;
	    int notNumber_group_row_index = -1;
	    Vector<String>notNumberData = new Vector<String>();
		if (!haveAfter) {
			if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	        	message = message + "no data are present in the King-Devick After Suspected Head Trauma Group";
	        	if (rgTable.getDataFilePositionMapping(0) == null) {
	        		table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							-1, message));		
	        	}
	        	else {
		        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							rgTable.getDataFilePositionMapping(0), message));
	        	}
	        	numberWarnings++;
			}
		} // if (!haveAfter)
		else { // haveAfter
			if (afterTotDurIndex >= 0) {
	    		data = bufDataVector.get(afterTotDurIndex);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(afterTotDurIndex));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(afterTotDurIndex);
					missing_group_row_index = bufGroup_row_index.get(afterTotDurIndex);
		    	}
		    	else {
					try {
				       afterTotDur = Double.valueOf(data).doubleValue();
					}
					catch (NumberFormatException e) {
						numberScoresNotNumber++;
					    notNumberIndices.add(bufIndex.get(afterTotDurIndex));
					    notNumber_repeatable_group_id = bufRepeatable_group_id.get(afterTotDurIndex);
						notNumber_group_row_index = bufGroup_row_index.get(afterTotDurIndex);
						notNumberData.add(data);
					}
				}
	        } // if (afterDurIndex >= 0)
			
			if (afterErrorNumIndex >= 0) {
	    		data = bufDataVector.get(afterErrorNumIndex);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(afterErrorNumIndex));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(afterErrorNumIndex);
					missing_group_row_index = bufGroup_row_index.get(afterErrorNumIndex);
		    	}
		    	else {
					try {
				       afterErrorNum = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						numberScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(afterErrorNumIndex));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(afterErrorNumIndex);
						notInteger_group_row_index = bufGroup_row_index.get(afterErrorNumIndex);
						notIntegerData.add(data);
					}
				}
	        } // if (afterErrorNumIndex >= 0)
			
			if (afterCompletedNumIndex >= 0) {
	    		data = bufDataVector.get(afterCompletedNumIndex);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(afterCompletedNumIndex));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(afterCompletedNumIndex);
					missing_group_row_index = bufGroup_row_index.get(afterCompletedNumIndex);
		    	}
		    	else {
					try {
				       afterCompletedNum = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						numberScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(afterCompletedNumIndex));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(afterCompletedNumIndex);
						notInteger_group_row_index = bufGroup_row_index.get(afterCompletedNumIndex);
						notIntegerData.add(data);
					}
				}
	        } // if (afterCompletedNumIndex >= 0)
			
			 /*if (numberScoresMissing >= 1) {
			    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							missing_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresMissing; i++) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));

						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
			    	}
			    } // if (numberScoresMissing >= 1)*/
			    
			    if (numberScoresNotInteger >= 1) {
			    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							notInteger_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresNotInteger; i++) {
			    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
			    		}
			    	}
			    } // if (numberScoresNotInteger >= 1)
			    
			    if (numberScoresNotNumber >= 1) {
			    	rgTable = table.getRepeatableGroupTable(notNumber_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							notNumber_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresNotNumber; i++) {
			    		if (rgTable.getDataFilePositionMapping(notNumberIndices.get(i)) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, notNumber_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notNumberIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_NUMBER,
													notNumberData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notNumber_group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, notNumber_group_row_index),
											rgTable.getDataFilePositionMapping(notNumberIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notNumberIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_NUMBER,
													notNumberData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notNumber_group_row_index),
									rgTable.getDataFilePositionMapping(notNumberIndices.get(i)), message));
			    		}
			    	}
			    } // if (numberScoresNotNumber >= 1)
		} // else haveAfter
		
		numberScoresMissing = 0;
		missingIndices.clear();
	    missing_repeatable_group_id = -1;
	    missing_group_row_index = -1;
	    numberScoresNotInteger = 0;
	    notIntegerIndices.clear();
	    notInteger_repeatable_group_id = -1;
	    notInteger_group_row_index = -1;
	    notIntegerData.clear();
	    numberScoresNotNumber = 0;
	    notNumberIndices.clear();
	    notNumber_repeatable_group_id = -1;
	    notNumber_group_row_index = -1;
	    notNumberData.clear();
		if (!haveBaseline) {
			if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	        	message = message + "no data are present in the King-Devick Test Subject Baseline Group";
	        	if (rgTable.getDataFilePositionMapping(0) == null) {
	        		table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							-1, message));	
	        	}
	        	else {
		        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							rgTable.getDataFilePositionMapping(0), message));
	        	}
	        	numberWarnings++;
			}
		} // if (!haveBaseline)
		else { // haveBaseline
			if (baselineTotDurIndex >= 0) {
	    		data = bufDataVector.get(baselineTotDurIndex);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(baselineTotDurIndex));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(baselineTotDurIndex);
					missing_group_row_index = bufGroup_row_index.get(baselineTotDurIndex);
		    	}
		    	else {
					try {
				      baselineTotDur = Double.valueOf(data).doubleValue();
					}
					catch (NumberFormatException e) {
						numberScoresNotNumber++;
					    notNumberIndices.add(bufIndex.get(baselineTotDurIndex));
					    notNumber_repeatable_group_id = bufRepeatable_group_id.get(baselineTotDurIndex);
						notNumber_group_row_index = bufGroup_row_index.get(baselineTotDurIndex);
						notNumberData.add(data);
					}
				}
	        } // if (baselineDurIndex >= 0)
			
			if (baselineErrorNumIndex >= 0) {
	    		data = bufDataVector.get(baselineErrorNumIndex);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(baselineErrorNumIndex));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(baselineErrorNumIndex);
					missing_group_row_index = bufGroup_row_index.get(baselineErrorNumIndex);
		    	}
		    	else {
					try {
				       baselineErrorNum = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						numberScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(baselineErrorNumIndex));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(baselineErrorNumIndex);
						notInteger_group_row_index = bufGroup_row_index.get(baselineErrorNumIndex);
						notIntegerData.add(data);
					}
				}
	        } // if (baselineErrorNumIndex >= 0)
			
			if (baselineCompletedNumIndex >= 0) {
	    		data = bufDataVector.get(baselineCompletedNumIndex);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(baselineCompletedNumIndex));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(baselineCompletedNumIndex);
					missing_group_row_index = bufGroup_row_index.get(baselineCompletedNumIndex);
		    	}
		    	else {
					try {
				       baselineCompletedNum = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						numberScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(baselineCompletedNumIndex));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(baselineCompletedNumIndex);
						notInteger_group_row_index = bufGroup_row_index.get(baselineCompletedNumIndex);
						notIntegerData.add(data);
					}
				}
	        } // if (baselineCompletedNumIndex >= 0)
			
			 /*if (numberScoresMissing >= 1) {
			    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							missing_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresMissing; i++) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));

						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
			    	}
			    } // if (numberScoresMissing >= 1)*/
			    
			    if (numberScoresNotInteger >= 1) {
			    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							notInteger_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresNotInteger; i++) {
			    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
			    		}
			    	}
			    } // if (numberScoresNotInteger >= 1)
			    
			    if (numberScoresNotNumber >= 1) {
			    	rgTable = table.getRepeatableGroupTable(notNumber_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							notNumber_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresNotNumber; i++) {
			    		if (rgTable.getDataFilePositionMapping(notNumberIndices.get(i)) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, notNumber_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notNumberIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_NUMBER,
													notNumberData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notNumber_group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, notNumber_group_row_index),
											rgTable.getDataFilePositionMapping(notNumberIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notNumberIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_NUMBER,
													notNumberData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notNumber_group_row_index),
									rgTable.getDataFilePositionMapping(notNumberIndices.get(i)), message));
			    		}
			    	}
			    } // if (numberScoresNotNumber >= 1)
		} // else haveBaseline
		
        if ((!Double.isNaN(afterTotDur)) && Double.isNaN(baselineTotDur)) {
        	if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	        	message = message + "kdtestpsushttcarasstotdur is present in the King-Devick After Suspected Head Trauma Group, "
	        			+ "but kdtestbaselinthrecardasstotdur is missing in the King-Devick Test Subject Baseline Group";
	        	if (rgTable.getDataFilePositionMapping(0) == null) {
	        		table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							-1, message));	
	        	}
	        	else {
		        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							rgTable.getDataFilePositionMapping(0), message));
	        	}				
	        	numberWarnings++;
			}	
		} // if ((!Double.isNaN(afterTotDur)) && Double.isNaN(baselineTotDur))
        
        if ((afterErrorNum != -1) && (baselineErrorNum == -1)) {
        	if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	        	message = message + "kdtestaftersuspectedhterrornum is present in the King-Devick After Suspected Head Trauma Group, "
	        			+ "but kdtestbaselinthrecardasserrnum is missing in the King-Devick Test Subject Baseline Group";
	        	if (rgTable.getDataFilePositionMapping(0) == null) {
	        		table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							-1, message));	
	        	}
	        	else {
		        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							rgTable.getDataFilePositionMapping(0), message));
	        	}
	        	numberWarnings++;
			}		
        } // if ((afterErrorNum != -1) && (baselineErrorNum == -1))
        
        if ((afterCompletedNum != -1) && (baselineCompletedNum == -1)) {
        	if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	        	message = message + "kdtestcardcompletednum is present in the King-Devick After Suspected Head Trauma Group, "
	        			+ "but kdtestcardcompletednum is missing in the King-Devick Test Subject Baseline Group";
	        	if (rgTable.getDataFilePositionMapping(0) == null) {
	        		table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
						 -1, message));	
	        	}
	        	else {
		        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							rgTable.getDataFilePositionMapping(0), message));
	        	}
	        	numberWarnings++;
			}		
        } // if ((afterCompletedNum != -1) && (baselineCompletedNum == -1))
	}
	
	private void validateGCS(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3, int subject_row_id, 
			DataStructureTable table) throws Exception {
        // table.getColumnCount = 4
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Pediatric Glasgow Coma Scale
		// rgTable.getSize() = 11
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 11
		// group_column_index = 0 group_column_name = gcsconfoundertyp data = null
		// group_column_index = 1 group_column_name = pgcseyerespnsscore data = Untestable
		// group_column_index = 2 group_column_name = pgcsmotorrespnsscore data = 6
		// group_column_index = 3 group_column_name = pgcsverbalrespnsscore data = 5
		// group_column_index = 4 group_column_name = pgcstotalscore data = 12
		// group_column_index = 5 group_column_name = pupilreactivitylghtlfteyereslt data = null
		// group_column_index = 6 group_column_name = pupilreactivitylghtrteyereslt data = null
		// group_column_index = 7 group_column_name = pupillfteyemeasr data = null
		// group_column_index = 8 group_column_name = pupilrteyemeasr data = null
		// group_column_index = 9 group_column_name = pupilshapelfteyetyp data = null
		// group_column_index = 10 group_column_name = pupilshaperteyetyp data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBIJD777UPG
		// group_column_index = 1 group_column_name = subjectidnum data = 1
		// group_column_index = 2 group_column_name = ageyrs data = 20
		// group_column_index = 3 group_column_name = vitstatus data = null
		// group_column_index = 4 group_column_name = visitdate data = null
		// group_column_index = 5 group_column_name = sitename data = Boston
		// group_column_index = 6 group_column_name = dayssincebaseline data = 120
		// group_column_index = 7 group_column_name = casecontrlind data = Control
		// group_column_index = 8 group_column_name = generalnotestxt data = null
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Glasgow Coma Scale
		// rgTable.getSize() = 11
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 11
		// group_column_index = 0 group_column_name = gcsconfoundertyp data = null
		// group_column_index = 1 group_column_name = gcseyerespnsscale data = Untestable
		// group_column_index = 2 group_column_name = gcsmotorrespnsscale data = 6
		// group_column_index = 3 group_column_name = gcsverbalrspnsscale data = 5
		// group_column_index = 4 group_column_name = gcstotalscore data = 12
		// group_column_index = 5 group_column_name = pupilreactivitylghtlfteyereslt data = null
		// group_column_index = 6 group_column_name = pupilreactivitylghtrteyereslt data = null
		// group_column_index = 7 group_column_name = pupillfteyemeasr data = null
		// group_column_index = 8 group_column_name = pupilrteyemeasr data = null
		// group_column_index = 9 group_column_name = pupilshapelfteyetyp data = null
		// group_column_index = 10 group_column_name = pupilshaperteyetyp data = null
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    boolean havePediatric = true;
	    RepeatableGroupTable pediatricTable = null;
	    int pediatricIndex[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	pediatricIndex[i] = -1;
	    }
	    int pediatricTotalScoreIndex = -1;
	    int calculatedPediatricTotalScore = 0;
	    int actualPediatricTotalScore = -1;
	    boolean havePediatricBlank = false;
	    boolean havePediatricUnknown = false;
	    boolean havePediatricUntestable = false;
	    
	    boolean haveGlasgow = true;
	    RepeatableGroupTable GlasgowTable = null;
	    int GlasgowIndex[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	GlasgowIndex[i] = -1;
	    }
	    int GlasgowTotalScoreIndex = -1;
	    int calculatedGlasgowTotalScore = 0;
	    int actualGlasgowTotalScore = -1;
	    boolean haveGlasgowBlank = false;
	    boolean haveGlasgowUnknown = false;
	    boolean haveGlasgowUntestable = false;

	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Pediatric Glasgow Coma Scale")) {
				    havePediatric = false;
				    pediatricTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Glasgow Coma Scale")) {
				    haveGlasgow = false;
				    GlasgowTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		      //  System.out.println("group_column_index = " + i +
		      //  " group_column_name = " + columnNameVector.get(i) +
		      // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Pediatric Glasgow Coma Scale")) {
				if (columnNameVector.get(i).equalsIgnoreCase("pgcseyerespnsscore")) {	
					pediatricIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pgcsmotorrespnsscore")) {	
					pediatricIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pgcsverbalrespnsscore")) {	
					pediatricIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pgcstotalscore")) {	
					pediatricTotalScoreIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Glasgow Coma Scale")) {
				if (columnNameVector.get(i).equalsIgnoreCase("gcseyerespnsscale")) {	
					GlasgowIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gcsmotorrespnsscale")) {	
					GlasgowIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gcsverbalrspnsscale")) {	
					GlasgowIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gcstotalscore")) {	
					GlasgowTotalScoreIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
        if (havePediatric) {
        	int numberScoresNotInteger = 0;
        	Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
        	for (j = 0; j < pediatricIndex.length; j++) { 
		    	i = pediatricIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		havePediatricBlank = true;
			    	}
			    	else if (data.equalsIgnoreCase("Unknown")) {
			    		havePediatricUnknown = true;
			    	}
			    	else if (data.equalsIgnoreCase("Untestable")) {
			    		havePediatricUntestable = true;
			    	}
			    	else {
						try {
					       calculatedPediatricTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
        	
        	if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));    	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
        	
        	if (pediatricTotalScoreIndex >= 0) {
				data = bufDataVector.get(pediatricTotalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(pediatricTotalScoreIndex);
				group_row_index = bufGroup_row_index.get(pediatricTotalScoreIndex);
				index = bufIndex.get(pediatricTotalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((!havePediatricBlank) && (!havePediatricUnknown) && 
							(!havePediatricUntestable) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedPediatricTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedPediatricTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
					else if ((!havePediatricBlank) && (havePediatricUnknown) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_UNKNOWN_REQUIRED,
													"blank");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_UNKNOWN_REQUIRED,
													"blank");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
					}
					else if ((!havePediatricBlank)  && (!havePediatricUnknown) && (havePediatricUntestable) &&
							(numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_UNTESTABLE_REQUIRED,
													"blank");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_UNTESTABLE_REQUIRED,
													"blank");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
					}
				}
			    else if (havePediatricBlank || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
			    else if (havePediatricUnknown  && (data.equalsIgnoreCase("Unknown"))) {
			    	
			    }
			    else if (havePediatricUnknown  && (!data.equalsIgnoreCase("Unknown"))) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_UNKNOWN_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_UNKNOWN_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));	
			    	}
			    }
			    else if ((!havePediatricUnknown) && havePediatricUntestable  && (data.equalsIgnoreCase("Untestable"))) {
			    	
			    }
			    else if ((!havePediatricUnknown) && havePediatricUntestable  && (!data.equalsIgnoreCase("Untestable"))) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_UNTESTABLE_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));		
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_UNTESTABLE_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));	
			    	}
			    }
				else {
					try {
				        actualPediatricTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualPediatricTotalScore > -1) {
		    	if (actualPediatricTotalScore != calculatedPediatricTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualPediatricTotalScore), String.valueOf(calculatedPediatricTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualPediatricTotalScore), String.valueOf(calculatedPediatricTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
        } // if (havePediatric)
        
        if (haveGlasgow) {
        	int numberScoresNotInteger = 0;
        	Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
        	for (j = 0; j < GlasgowIndex.length; j++) { 
		    	i = GlasgowIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		haveGlasgowBlank = true;
			    	}
			    	else if (data.equalsIgnoreCase("Unknown")) {
			    		haveGlasgowUnknown = true;
			    	}
			    	else if (data.equalsIgnoreCase("Untestable")) {
			    		haveGlasgowUntestable = true;
			    	}
			    	else {
						try {
					       calculatedGlasgowTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
        	
        	if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
        	
        	if (GlasgowTotalScoreIndex >= 0) {
				data = bufDataVector.get(GlasgowTotalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(GlasgowTotalScoreIndex);
				group_row_index = bufGroup_row_index.get(GlasgowTotalScoreIndex);
				index = bufIndex.get(GlasgowTotalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((!haveGlasgowBlank) && (!haveGlasgowUnknown) && 
							(!haveGlasgowUntestable) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedGlasgowTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedGlasgowTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
					else if ((!haveGlasgowBlank) && (haveGlasgowUnknown) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_UNKNOWN_REQUIRED,
													"blank");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_UNKNOWN_REQUIRED,
													"blank");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));	
						}
					}
					else if ((!haveGlasgowBlank)  && (!haveGlasgowUnknown) && (haveGlasgowUntestable) &&
							(numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_UNTESTABLE_REQUIRED,
													"blank");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_UNTESTABLE_REQUIRED,
													"blank");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));	
						}
					}
					
				}
			    else if (haveGlasgowBlank || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message    
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message    
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
			    else if (haveGlasgowUnknown && (data.equalsIgnoreCase("Unknown"))) {
			    	
			    }
			    else if (haveGlasgowUnknown  && (!data.equalsIgnoreCase("Unknown"))) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_UNKNOWN_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_UNKNOWN_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
			    else if ((!haveGlasgowUnknown) && haveGlasgowUntestable  && (data.equalsIgnoreCase("Untestable"))) {
			    	
			    }
			    else if ((!haveGlasgowUnknown) && haveGlasgowUntestable  && (!data.equalsIgnoreCase("Untestable"))) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_UNTESTABLE_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_UNTESTABLE_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualGlasgowTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								     -1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualGlasgowTotalScore > -1) {
		    	if (actualGlasgowTotalScore != calculatedGlasgowTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualGlasgowTotalScore), String.valueOf(calculatedGlasgowTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualGlasgowTotalScore), String.valueOf(calculatedGlasgowTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
        } // if (haveGlasgow)
		
	}
	
	private void validateGOSE_Peds(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3,int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	GOSE_Peds
		// table.getColumnCount = 2
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBIZK110GT2
		// group_column_index = 1 group_column_name = subjectidnum data = 02-1035
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = visitdate data = null
		// group_column_index = 4 group_column_name = sitename data = 2
		// group_column_index = 5 group_column_name = dayssincebaseline data = 19
		// group_column_index = 6 group_column_name = casecontrlind data = Case
		// group_column_index = 7 group_column_name = generalnotestxt data = Age not submitted
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Form Completion
		// rgTable.getSize() = 16
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 16
		// group_column_index = 0 group_column_name = gosepinfoobtain data = In person
		// group_column_index = 1 group_column_name = gosepconsciousnessind data = Yes
		// group_column_index = 2 group_column_name = gosepasstneedind data = No
		// group_column_index = 3 group_column_name = gosepfreqnthlpneedind data = null
		// group_column_index = 4 group_column_name = gosepshptrvlwoutasstind data = Yes
		// group_column_index = 5 group_column_name = gosepcrrntwrkschlind data = No
		// group_column_index = 6 group_column_name = gosepwrkschlrestrictind data = No
		// group_column_index = 7 group_column_name = gosepwrkschlreducedcapacind data = Yes
		// group_column_index = 8 group_column_name = gosepsocleisind data = No
		// group_column_index = 9 group_column_name = gosepsocleisunableparticind data = null
		// group_column_index = 10 group_column_name = gosepsocleispartmuchlessind data = null
		// group_column_index = 11 group_column_name = gosepsocleispartbitlessind data = null
		// group_column_index = 12 group_column_name = gosepfamfrindshpind data = No
		// group_column_index = 13 group_column_name = gosepextntdisrfamfrindshp data = null
		// group_column_index = 14 group_column_name = gosepcrrntothprobind data = No
		// group_column_index = 15 group_column_name = pgosescore data = 3
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveForm = true;
	    RepeatableGroupTable formTable = null;
	    int PGOSEScoreIndex = -1;
	    int gosepinfoobtainIndex = -1;
	    int gosepconsciousnessindIndex = -1;
	    int gosepasstneedindIndex = -1;
	    int gosepfreqnthlpneedindIndex = -1;
	    int gosepshptrvlwoutasstindIndex = -1;
	    int gosepcrrntwrkschlindIndex = -1;
	    int gosepwrkschlrestrictindIndex = -1;
	    int gosepwrkschlreducedcapacindIndex = -1;
	    int gosepsocleisindIndex = -1;
	    int gosepsocleisunableparticindIndex = -1;
	    int gosepsocleispartmuchlessindIndex = -1;
	    int gosepsocleispartbitlessindIndex = -1;
	    int gosepfamfrindshpindIndex = -1;
	    int gosepextntdisrfamfrindshpIndex = -1;
	    int gosepcrrntothprobindIndex = -1;
	    
	  // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		 // System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			 // System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			 // System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Form Completion")) {
				    haveForm = false;
				    formTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			 // System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	 // System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		       // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		       // for (i = 0; i < columnNameVector.size(); i++) {
		        // System.out.println("group_column_index = " + i +
		       //  " group_column_name = " + columnNameVector.get(i) +
		       // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Form Completion")) {
				if (columnNameVector.get(i).equalsIgnoreCase("pgosescore")) {
					PGOSEScoreIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepinfoobtain")) {
					gosepinfoobtainIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepconsciousnessind")) {
					gosepconsciousnessindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepasstneedind")) {
					gosepasstneedindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepfreqnthlpneedind")) {
					gosepfreqnthlpneedindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepshptrvlwoutasstind")) {
					gosepshptrvlwoutasstindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepcrrntwrkschlind")) {
					gosepcrrntwrkschlindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepwrkschlrestrictind")) {
					gosepwrkschlrestrictindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepwrkschlreducedcapacind")) {
					gosepwrkschlreducedcapacindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepsocleisind")) {
					gosepsocleisindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepsocleisunableparticind")) {
					gosepsocleisunableparticindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepsocleispartmuchlessind")) {
					gosepsocleispartmuchlessindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepsocleispartbitlessind")) {
					gosepsocleispartbitlessindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepfamfrindshpind")) {
					gosepfamfrindshpindIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepextntdisrfamfrindshp")) {
					gosepextntdisrfamfrindshpIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosepcrrntothprobind")) {
					gosepcrrntothprobindIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    	
    	if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age > 16) {
					if (numberWarnings < 1000) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "16 or less years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "16 or less years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
					numberWarnings++;
					} // if (numberWarnings < 1000)
					return;
				}
			}
		  } // if (ageyrsIndex > -1)
    
        if (haveForm) {
        	String dataScore = bufDataVector.get(PGOSEScoreIndex);
        	repeatable_group_id = bufRepeatable_group_id.get(PGOSEScoreIndex);
			group_row_index = bufGroup_row_index.get(PGOSEScoreIndex);
			index = bufIndex.get(PGOSEScoreIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
    		int calculatedScore = -1;
    		
    		boolean blankDataScore = false;
    		if ((dataScore == null) || (dataScore.isEmpty()) || (dataScore.trim() == null)
    				|| (dataScore.trim().isEmpty())) {
    		    blankDataScore = true;
    		    dataScore = "blank";
    		}
    		int listedScore = -1;
            if (!dataScore.equals("blank")) {
	            try {
	                listedScore = Integer.valueOf(dataScore).intValue();
	                if (listedScore == 8) {
	                	// Deceased - do not validate
	                	return;
	                }
	            }
	            catch (NumberFormatException e) {
	            	if (rgTable.getDataFilePositionMapping(index) == null) {
	            		message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(index));
		
		    			message =
		    					message
		    							+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
		    									dataScore);	
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					-1, message));		
	            	}
	            	else {
		            	message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getDataFilePositionMapping(index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(index));
		
		    			message =
		    					message
		    							+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
		    									dataScore);	
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					rgTable.getDataFilePositionMapping(index), message));	
	            	}
	            }
            }
           
            
            if (gosepconsciousnessindIndex != -1) {
    			data = bufDataVector.get(gosepconsciousnessindIndex);
    		    if ((data != null) && (data.equalsIgnoreCase("No"))) {
    		    	calculatedScore = 7;
    		    }
    		    else if (data == null) {
    		    	if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepconsciousnessindIndex)) == null) {
    		    		message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepconsciousnessindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					-1, message));	
    		    	}
    		    	else {
	    		    	message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepconsciousnessindIndex)),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepconsciousnessindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepconsciousnessindIndex)), message));
    		    	}
	    			calculatedScore = -2;
    		    }
    		}
            
            if (calculatedScore == -1) {
    			boolean Q2aNoResponse = false;
    			boolean Q2aNo = false;
    			boolean Q2aYes = false;
    			boolean Q2bNoResponse = false;
    			boolean Q2bNo = false;
    			boolean Q2bYes = false;
    			
    			if (gosepasstneedindIndex != -1) {
    				data = bufDataVector.get(gosepasstneedindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q2aNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q2aNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q2aYes = true;	
    				}
    			} // if (gosepasstneedindIndex != -1)
    			
    			if (gosepfreqnthlpneedindIndex != -1) {
    				data = bufDataVector.get(gosepfreqnthlpneedindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q2bNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q2bNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q2bYes = true;	
    				}	
    			} // if (gosepfreqnthlpneedindIndex != -1) 
    			
    			if (Q2aNoResponse) {
    				if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepasstneedindIndex)) == null) {
    					message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepasstneedindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					-1, message));			
    				}
    				else {
	    				message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepasstneedindIndex)),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepasstneedindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepasstneedindIndex)), message));	
	    				}
	    			calculatedScore = -2;
    			} // if (Q2aNoResponse)
    			else if (Q2aYes) {
    			    if (Q2bNoResponse) {
    			    	if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepfreqnthlpneedindIndex)) == null) {
    			    		message =
	    	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	    	    							guid,
	    	    							getRawDataRow(subject_row_id, group_row_index),
	    	    							rgTable.getRepeatableGroupName(),
	    	    							rgTable.getColumnName(bufIndex.get(gosepfreqnthlpneedindIndex)));
	    	    			message = message + "the data has not been provided";
	    	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    	    					-1, message));	
    			    	}
    			    	else {
	    			    	message =
	    	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	    	    							guid,
	    	    							getRawDataRow(subject_row_id, group_row_index),
	    	    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepfreqnthlpneedindIndex)),
	    	    							rgTable.getRepeatableGroupName(),
	    	    							rgTable.getColumnName(bufIndex.get(gosepfreqnthlpneedindIndex)));
	    	    			message = message + "the data has not been provided";
	    	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    	    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepfreqnthlpneedindIndex)), message));
    			    	}
    	    			calculatedScore = -2;	
    			    } // if (Q2bNoResponse)
    			    else if (Q2bYes) {
    			    	calculatedScore = 6;
    			    }
    			    else if (Q2bNo) {
    			    	calculatedScore = 5;
    			    }
    			} // else if (Q2aYes)
	
    		} // if (calculatedScore == -1)
            
            if (calculatedScore == -1) {
                boolean Q3aNoResponse = false;
                boolean Q3aNo = false;
                boolean Q3aYes = false;
                
                if (gosepshptrvlwoutasstindIndex != -1) {
                	data = bufDataVector.get(gosepshptrvlwoutasstindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q3aNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q3aNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q3aYes = true;	
    				}	
                } // if (gosepshptrvlwoutasstindIndex != -1)
                
                if (Q3aNoResponse) {
                	if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepshptrvlwoutasstindIndex)) == null) {
                		message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepshptrvlwoutasstindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					-1, message));	
                	}
                	else {
	                	message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepshptrvlwoutasstindIndex)),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepshptrvlwoutasstindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepshptrvlwoutasstindIndex)), message));	
                	}
	    			calculatedScore = -2;		
                } // if (Q3aNoResponse)
                else if (Q3aNo) {
                	calculatedScore = 5;
                }
            } // if (calculatedScore == -1) {
            
            if (calculatedScore == -1) {
                boolean Q4aNoResponse = false;
                boolean Q4aNo = false;
                boolean Q4aYes = false;
                boolean Q4biNoResponse = false;
                boolean Q4biNo = false;
                boolean Q4biYes = false;
                boolean Q4biiNoResponse = false;
                boolean Q4biiNo = false;
                boolean Q4biiYes = false;
                
                if (gosepcrrntwrkschlindIndex != -1) {
                	data = bufDataVector.get(gosepcrrntwrkschlindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q4aNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q4aNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q4aYes = true;	
    				}	
                } // if (gosepcrrntwrkschlindIndex != -1)
                
                if (gosepwrkschlrestrictindIndex != -1) {
                	data = bufDataVector.get(gosepwrkschlrestrictindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q4biNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q4biNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q4biYes = true;	
    				}	
                } // if (gosepwrkschlrestrictindIndex != -1)
                
                if (gosepwrkschlreducedcapacindIndex != -1) {
                	data = bufDataVector.get(gosepwrkschlreducedcapacindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q4biiNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q4biiNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q4biiYes = true;	
    				}	
                } // if (gosepwrkschlreducedcapacindIndex != -1)
                
                if (Q4aNoResponse) {
                	if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepcrrntwrkschlindIndex)) == null) {
                		message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepcrrntwrkschlindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					-1, message));
	
                	}
                	else {
	                	message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepcrrntwrkschlindIndex)),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepcrrntwrkschlindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepcrrntwrkschlindIndex)), message));
                	}
	    			calculatedScore = -2;		
                } // if (Q4aNoResponse)
                else if (Q4aNo) {
                	if (Q4biNoResponse) {
                		if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepwrkschlrestrictindIndex)) == null) {
                			message =
	    	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	    	    							guid,
	    	    							getRawDataRow(subject_row_id, group_row_index),
	    	    							rgTable.getRepeatableGroupName(),
	    	    							rgTable.getColumnName(bufIndex.get(gosepwrkschlrestrictindIndex)));
	    	    			message = message + "the data has not been provided";
	    	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    	    					-1, message));	
                		}
                		else {
	                    	message =
	    	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	    	    							guid,
	    	    							getRawDataRow(subject_row_id, group_row_index),
	    	    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepwrkschlrestrictindIndex)),
	    	    							rgTable.getRepeatableGroupName(),
	    	    							rgTable.getColumnName(bufIndex.get(gosepwrkschlrestrictindIndex)));
	    	    			message = message + "the data has not been provided";
	    	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    	    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepwrkschlrestrictindIndex)), message));
                		}
    	    			calculatedScore = -2;		
                    } // if (Q4biNoResponse)
                	else if (Q4biYes) {
                		calculatedScore = 4;
                	}
                	else if (Q4biNo) {
                		if (Q4biiNoResponse) {
                			if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepwrkschlreducedcapacindIndex)) == null) {
                				message =
	        	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	        	    							guid,
	        	    							getRawDataRow(subject_row_id, group_row_index),
	        	    							rgTable.getRepeatableGroupName(),
	        	    							rgTable.getColumnName(bufIndex.get(gosepwrkschlreducedcapacindIndex)));
	        	    			message = message + "the data has not been provided";
	        	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	        	    					-1, message));	
                			}
                			else {
	                        	message =
	        	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	        	    							guid,
	        	    							getRawDataRow(subject_row_id, group_row_index),
	        	    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepwrkschlreducedcapacindIndex)),
	        	    							rgTable.getRepeatableGroupName(),
	        	    							rgTable.getColumnName(bufIndex.get(gosepwrkschlreducedcapacindIndex)));
	        	    			message = message + "the data has not been provided";
	        	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	        	    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepwrkschlreducedcapacindIndex)), message));
                			}
        	    			calculatedScore = -2;		
                        } // if (Q4biiNoResponse)
                		else if (Q4biiYes) {
                			calculatedScore = 3;
                		}
                		else if (Q4biiNo) {
                			if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepwrkschlreducedcapacindIndex)) == null) {
                				message =
	        	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	        	    							guid,
	        	    							getRawDataRow(subject_row_id, group_row_index),
	        	    							rgTable.getRepeatableGroupName(),
	        	    							rgTable.getColumnName(bufIndex.get(gosepwrkschlreducedcapacindIndex)));
	        	    			message = message + "GOSEPCrrntWrkSchInd, GOSEPWrkSchlRestrictInd, and GOSEPWrkSchlReducedCapacInd" +
	        	    							" are all impossibly set to No";
	        	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	        	    					-1, message));	
                			}
                			else {
	                			message =
	        	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	        	    							guid,
	        	    							getRawDataRow(subject_row_id, group_row_index),
	        	    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepwrkschlreducedcapacindIndex)),
	        	    							rgTable.getRepeatableGroupName(),
	        	    							rgTable.getColumnName(bufIndex.get(gosepwrkschlreducedcapacindIndex)));
	        	    			message = message + "GOSEPCrrntWrkSchInd, GOSEPWrkSchlRestrictInd, and GOSEPWrkSchlReducedCapacInd" +
	        	    							" are all impossibly set to No";
	        	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	        	    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepwrkschlreducedcapacindIndex)), message));
                			}
        	    			calculatedScore = -2;			
                		} // else if (Q4biiNo)
                	} // else if (Q4biNo)
                } // else if (Q4aNo)
            } // if (calculatedScore == -1)
            
            if (calculatedScore == -1) {
            	boolean Q5aNoResponse = false;
                boolean Q5aNo = false;
                boolean Q5aYes = false;
                boolean Q5biNoResponse = false;
                boolean Q5biNo = false;
                boolean Q5biYes = false;
                boolean Q5biiNoResponse = false;
                boolean Q5biiNo = false;
                boolean Q5biiYes = false;
                boolean Q5biiiNoResponse = false;
                boolean Q5biiiNo = false;
                boolean Q5biiiYes = false;
                
                if (gosepsocleisindIndex != -1) {
                	data = bufDataVector.get(gosepsocleisindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q5aNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q5aNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q5aYes = true;	
    				}	
                } // if (gosepsocleisindIndex != -1)
                
                if (gosepsocleisunableparticindIndex != -1) {
                	data = bufDataVector.get(gosepsocleisunableparticindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q5biNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q5biNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q5biYes = true;	
    				}	
                } // if (gosepsocleisunableparticindIndex != -1)
                
                if (gosepsocleispartmuchlessindIndex != -1) {
                	data = bufDataVector.get(gosepsocleispartmuchlessindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q5biiNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q5biiNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q5biiYes = true;	
    				}	
                } // if (gosepsocleispartmuchlessindIndex != -1)
                
                if (gosepsocleispartbitlessindIndex != -1) {
                	data = bufDataVector.get(gosepsocleispartbitlessindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q5biiiNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q5biiiNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q5biiiYes = true;	
    				}	
                } // if (gosepsocleispartbitlessindIndex != -1)
                
                if (Q5aNoResponse) {
                	if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleisindIndex)) == null) {
                		message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepsocleisindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    					-1, message));		
                	}
                	else {
	                	message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleisindIndex)),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepsocleisindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleisindIndex)), message));
                	}
	    			calculatedScore = -2;		
                } // if (Q5aNoResponse)
                else if (Q5aNo) {
                	if (Q5biNoResponse) {
                		if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleisunableparticindIndex)) == null) {
                			message =
	    	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	    	    							guid,
	    	    							getRawDataRow(subject_row_id, group_row_index),
	    	    							rgTable.getRepeatableGroupName(),
	    	    							rgTable.getColumnName(bufIndex.get(gosepsocleisunableparticindIndex)));
	    	    			message = message + "the data has not been provided";
	    	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    	    					-1, message));	
                		}
                		else {
	                    	message =
	    	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	    	    							guid,
	    	    							getRawDataRow(subject_row_id, group_row_index),
	    	    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleisunableparticindIndex)),
	    	    							rgTable.getRepeatableGroupName(),
	    	    							rgTable.getColumnName(bufIndex.get(gosepsocleisunableparticindIndex)));
	    	    			message = message + "the data has not been provided";
	    	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    	    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleisunableparticindIndex)), message));
                		}
    	    			calculatedScore = -2;		
                    } // if (Q5biNoResponse)
                	else if (Q5biYes) {
                		calculatedScore = 4;
                	}
                	else if (Q5biNo) {
                		if (Q5biiNoResponse) {
                			if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleispartmuchlessindIndex)) == null) {
                				message =
	        	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	        	    							guid,
	        	    							getRawDataRow(subject_row_id, group_row_index),
	        	    							rgTable.getRepeatableGroupName(),
	        	    							rgTable.getColumnName(bufIndex.get(gosepsocleispartmuchlessindIndex)));
	        	    			message = message + "the data has not been provided";
	        	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	        	    					-1, message));	
                			}
                			else {
	                        	message =
	        	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	        	    							guid,
	        	    							getRawDataRow(subject_row_id, group_row_index),
	        	    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleispartmuchlessindIndex)),
	        	    							rgTable.getRepeatableGroupName(),
	        	    							rgTable.getColumnName(bufIndex.get(gosepsocleispartmuchlessindIndex)));
	        	    			message = message + "the data has not been provided";
	        	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	        	    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleispartmuchlessindIndex)), message));
                			}
        	    			calculatedScore = -2;
                		} // if (Q5biiNoResponse)
                		else if (Q5biiYes) {
                			calculatedScore = 3;
                		}
                		else if (Q5biiNo) {
                			if (Q5biiiNoResponse) {
                				if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleispartbitlessindIndex)) == null) {
                					message =
	            	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	            	    							guid,
	            	    							getRawDataRow(subject_row_id, group_row_index),
	            	    							rgTable.getRepeatableGroupName(),
	            	    							rgTable.getColumnName(bufIndex.get(gosepsocleispartbitlessindIndex)));
	            	    			message = message + "the data has not been provided";
	            	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	            	    					-1, message));	
                				}
                				else {
	                            	message =
	            	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	            	    							guid,
	            	    							getRawDataRow(subject_row_id, group_row_index),
	            	    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleispartbitlessindIndex)),
	            	    							rgTable.getRepeatableGroupName(),
	            	    							rgTable.getColumnName(bufIndex.get(gosepsocleispartbitlessindIndex)));
	            	    			message = message + "the data has not been provided";
	            	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	            	    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepsocleispartbitlessindIndex)), message));
                				}
            	    			calculatedScore = -2;
                    		} // if (Q5biiiNoResponse)	
                			else if (Q5biiiYes) {
                				calculatedScore = 2;
                			}
                		} // else if (Q5biiNo)
                	} // else if (Q5biNo)
                } // else if (Q5aNo)
            } // if (calculatedScore == -1)
            
            if (calculatedScore == -1) {
                boolean Q6aNoResponse = false;
                boolean Q6aNo = false;
                boolean Q6aYes = false;
                boolean Q6bNoResponse = false;
                boolean Q6bConstant = false;
                boolean Q6bFrequent = false;
                boolean Q6bOccasional = false;
                
                if (gosepfamfrindshpindIndex != -1) {
                	data = bufDataVector.get(gosepfamfrindshpindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q6aNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q6aNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q6aYes = true;	
    				}	
                } // if (gosepfamfrindshpindIndex != -1)
                
                if (gosepextntdisrfamfrindshpIndex != -1) {
                	data = bufDataVector.get(gosepextntdisrfamfrindshpIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q6bNoResponse = true;
    				}
    			    else if (data.startsWith("Constant")) {
    				    Q6bConstant = true;	
    				}
    			    else if (data.startsWith("Frequent")) {
    				    Q6bFrequent = true;	
    				}
    			    else if (data.startsWith("Occasional")) {
    				    Q6bOccasional = true;	
    				}
                } // if (gosepextntdisrfamfrindshpIndex != -1)
                
                if (Q6aNoResponse) {
                	if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepfamfrindshpindIndex)) == null) {
                		message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepfamfrindshpindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					-1, message));		
                	}
                	else {
	                	message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepfamfrindshpindIndex)),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepfamfrindshpindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepfamfrindshpindIndex)), message));	
                	}
	    			calculatedScore = -2;		
                } // if (Q6aNoResponse)
                else if (Q6aYes) {
                	if (Q6bNoResponse) {
                		if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepextntdisrfamfrindshpIndex)) == null) {
                			message =
	    	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	    	    							guid,
	    	    							getRawDataRow(subject_row_id, group_row_index),
	    	    							rgTable.getRepeatableGroupName(),
	    	    							rgTable.getColumnName(bufIndex.get(gosepextntdisrfamfrindshpIndex)));
	    	    			message = message + "the data has not been provided";
	    	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    	    					-1, message));	
                		}
                		else {
	                    	message =
	    	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	    	    							guid,
	    	    							getRawDataRow(subject_row_id, group_row_index),
	    	    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepextntdisrfamfrindshpIndex)),
	    	    							rgTable.getRepeatableGroupName(),
	    	    							rgTable.getColumnName(bufIndex.get(gosepextntdisrfamfrindshpIndex)));
	    	    			message = message + "the data has not been provided";
	    	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    	    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepextntdisrfamfrindshpIndex)), message));
                		}
    	    			calculatedScore = -2;		
                    } // if (Q6bNoResponse)
                	else if (Q6bConstant) {
                		calculatedScore = 4;
                	}
                	else if (Q6bFrequent) {
                		calculatedScore = 3;
                	}
                	else if (Q6bOccasional) {
                		calculatedScore = 2;
                	}
                } // else if (Q6aYes)
            } // if (calculatedScore == -1)
            
            if (calculatedScore == -1) {
                boolean Q7aNoResponse = false;
                boolean Q7aNo = false;
                boolean Q7aYes = false;
                
                if (gosepcrrntothprobindIndex != -1) {
                	data = bufDataVector.get(gosepcrrntothprobindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q7aNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q7aNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q7aYes = true;	
    				}	
                } // if (gosepcrrntothprobindIndex != -1)
                
                if (Q7aNoResponse) {
                	if (rgTable.getDataFilePositionMapping(bufIndex.get(gosepcrrntothprobindIndex)) == null) {
                		message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepcrrntothprobindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					-1, message));		
                	}
                	else {
	                	message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getDataFilePositionMapping(bufIndex.get(gosepcrrntothprobindIndex)),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(gosepcrrntothprobindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					rgTable.getDataFilePositionMapping(bufIndex.get(gosepcrrntothprobindIndex)), message));	
                	}
	    			calculatedScore = -2;		
                } // if (Q7aNoResponse)
                else if (Q7aYes) {
                	calculatedScore = 2;
                }
                else if (Q7aNo) {
                	calculatedScore = 1;
                }
            } // if (calculatedScore == -1)
            
                        
            String calculatedString;
    		if (calculatedScore < 0) {
    			calculatedString = " ";
    		}
    		else {
    			calculatedString = String.valueOf(calculatedScore);
    		}
    		
    		if ((!blankDataScore) && (calculatedScore < 0)) {
    			if (rgTable.getDataFilePositionMapping(index) == null) {
    				message =
	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	    							guid,
	    							getRawDataRow(subject_row_id, group_row_index),
	    							rgTable.getRepeatableGroupName(),
	    							rgTable.getColumnName(index));
	
	    			message =
	    					message
	    							+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
	    									dataScore);
	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    					-1, message));	
    			}
    			else {
	    			message =
	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	    							guid,
	    							getRawDataRow(subject_row_id, group_row_index),
	    							rgTable.getDataFilePositionMapping(index),
	    							rgTable.getRepeatableGroupName(),
	    							rgTable.getColumnName(index));
	
	    			message =
	    					message
	    							+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
	    									dataScore);
	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    					rgTable.getDataFilePositionMapping(index), message));
    			}
    		}
    		
    		else if ((calculatedScore >= 1) && (listedScore != -1)  && (calculatedScore != listedScore)) {
    			if (rgTable.getDataFilePositionMapping(index) == null) {
    				message =
	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	    							guid,
	    							getRawDataRow(subject_row_id, group_row_index),
	    							rgTable.getRepeatableGroupName(),
	    							rgTable.getColumnName(index));
	
	    			message =
	    					message
	    							+ String.format(ApplicationsConstants.ERR_INCORRECT_SCORE,
	    									dataScore, calculatedString);	
	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    					-1, message));		
    			}
    			else {
	    			message =
	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	    							guid,
	    							getRawDataRow(subject_row_id, group_row_index),
	    							rgTable.getDataFilePositionMapping(index),
	    							rgTable.getRepeatableGroupName(),
	    							rgTable.getColumnName(index));
	
	    			message =
	    					message
	    							+ String.format(ApplicationsConstants.ERR_INCORRECT_SCORE,
	    									dataScore, calculatedString);	
	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    					rgTable.getDataFilePositionMapping(index), message));
	    			}
    		}	
        }  // if (haveForm)
	}
	
	private void validateGOSE_Standard(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3,int subject_row_id,
			DataStructureTable table) throws Exception {
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Additional Info
		// rgTable.getSize() = 2
		// rgEntries.size() = 0
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Form Completion
		// rgTable.getSize() = 22
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 22
		// group_column_index = 0 group_column_name = goseresponse data = null
		// group_column_index = 1 group_column_name = goseconsciousind data = Yes
		// group_column_index = 2 group_column_name = goseasstneedind data = No
		// group_column_index = 3 group_column_name = gosefreqnthlpneedind data = null
		// group_column_index = 4 group_column_name = goseindpntpreinjryind data = null
		// group_column_index = 5 group_column_name = goseshpwoutasstind data = Yes
		// group_column_index = 6 group_column_name = goseshpwoutasstpreinjryind data = null
		// group_column_index = 7 group_column_name = gosetrvlwoutasstind data = Yes
		// group_column_index = 8 group_column_name = gosetrvlwoutasstpreinjryind data = null
		// group_column_index = 9 group_column_name = gosecrrntwrkind data = null
		// group_column_index = 10 group_column_name = gosewrkrestricttyp data = null
		// group_column_index = 11 group_column_name = goselvlrestrictind data = null
		// group_column_index = 12 group_column_name = gosesocleisoutind data = Yes
		// group_column_index = 13 group_column_name = goseextntrestrctsocfreq data = null
		// group_column_index = 14 group_column_name = goseextntrestrctsocpreinjrind data = null
		// group_column_index = 15 group_column_name = gosefrindshpind data = No
		// group_column_index = 16 group_column_name = goseextntfriendshpstrnfreq data = null
		// group_column_index = 17 group_column_name = goselvlstrnpreinjryind data = null
		// group_column_index = 18 group_column_name = gosecrrntprobind data = Yes
		// group_column_index = 19 group_column_name = gosesimlrprobpreinjryind data = No
		// group_column_index = 20 group_column_name = gosemstimptfctrtyp data = Effects of illness or injury to another part of the body
		// group_column_index = 21 group_column_name = glasgowoutcomescalextscore data = 7
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBIUAT_INVPB294RG3
		// group_column_index = 1 group_column_name = subjectidnum data = 1
		// group_column_index = 2 group_column_name = ageyrs data = 20
		// group_column_index = 3 group_column_name = visitdate data = NA
		// group_column_index = 4 group_column_name = sitename data = NA
		// group_column_index = 5 group_column_name = dayssincebaseline data = 40
		// group_column_index = 6 group_column_name = casecontrlind data = Case
		// group_column_index = 7 group_column_name = generalnotestxt data = null
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    boolean haveForm = true;
	    RepeatableGroupTable formTable = null;
	    int glasgowoutcomescalextscoreIndex = -1;
	    int goseconsciousindIndex = -1;
	    int gosefreqnthlpneedindIndex = -1;
		int goseindpntpreinjryindIndex = -1;
		int goseshpwoutasstindIndex = -1;
		int goseshpwoutasstpreinjryindIndex = -1;
		int gosetrvlwoutasstindIndex = -1;
		int gosetrvlwoutasstpreinjryindIndex = -1;
		int gosewrkrestricttypIndex = -1;
		int goselvlrestrictindIndex = -1;
		int goseextntrestrctsocfreqIndex = -1;
		int goseextntrestrctsocpreinjrindIndex = -1;
		int goseextntfriendshpstrnfreqIndex = -1;
		int goselvlstrnpreinjryindIndex = -1;
		int gosecrrntprobindIndex = -1;
		int gosesimlrprobpreinjryindIndex = -1;
		int goseasstneedindIndex = -1;
		int gosecrrntwrkindIndex = -1;
		int gosesocleisoutindIndex = -1;
		int gosefrindshpindIndex = -1;
	    
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Form Completion")) {
				    haveForm = false;
				    formTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		      //  System.out.println("group_column_index = " + i +
		      //  " group_column_name = " + columnNameVector.get(i) +
		      // " data = " + dataVector.get(i)) ;	
		    // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Form Completion")) {
				if (columnNameVector.get(i).equalsIgnoreCase("glasgowoutcomescalextscore")) {
					glasgowoutcomescalextscoreIndex = bufSizeIndex;	
				}	
				else if (columnNameVector.get(i).equalsIgnoreCase("goseconsciousind")) {
					goseconsciousindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosefreqnthlpneedind")) {
					gosefreqnthlpneedindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("goseindpntpreinjryind")) {
					goseindpntpreinjryindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("goseshpwoutasstind")) {
					goseshpwoutasstindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("goseshpwoutasstpreinjryind")) {
					goseshpwoutasstpreinjryindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosetrvlwoutasstind")) {
					gosetrvlwoutasstindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosetrvlwoutasstpreinjryind")) {
					gosetrvlwoutasstpreinjryindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosewrkrestricttyp")) {
					gosewrkrestricttypIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("goselvlrestrictind")) {
					goselvlrestrictindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("goseextntrestrctsocfreq")) {
					goseextntrestrctsocfreqIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("goseextntrestrctsocpreinjrind")) {
					goseextntrestrctsocpreinjrindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("goseextntfriendshpstrnfreq")) {
					goseextntfriendshpstrnfreqIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("goselvlstrnpreinjryind")) {
					goselvlstrnpreinjryindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosecrrntprobind")) {
					gosecrrntprobindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosesimlrprobpreinjryind")) {
					gosesimlrprobpreinjryindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("goseasstneedind")) {
					goseasstneedindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosecrrntwrkind")) {
					gosecrrntwrkindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosesocleisoutind")) {
					gosesocleisoutindIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gosefrindshpind")) {
					gosefrindshpindIndex = bufSizeIndex;	
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
        if (haveForm) {
        	String dataScore = bufDataVector.get(glasgowoutcomescalextscoreIndex);
        	repeatable_group_id = bufRepeatable_group_id.get(glasgowoutcomescalextscoreIndex);
			group_row_index = bufGroup_row_index.get(glasgowoutcomescalextscoreIndex);
			index = bufIndex.get(glasgowoutcomescalextscoreIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
    		boolean blankDataScore = false;
    		if ((dataScore == null) || (dataScore.isEmpty()) || (dataScore.trim() == null)
    				|| (dataScore.trim().isEmpty())) {
    		    blankDataScore = true;
    		    dataScore = "blank";
    		}
    		int listedScore = -1;
    		int calculatedScore = -1;
            if (!dataScore.equals("blank")) {
	            try {
	                listedScore = Integer.valueOf(dataScore).intValue();
	                if (listedScore == 1) {
	                	// Deceased - do not validate
	                	return;
	                }
	            }
	            catch (NumberFormatException e) {
	            	if (rgTable.getDataFilePositionMapping(index) == null) {
	            		message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(index));
		
		    			message =
		    					message
		    							+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
		    									dataScore);	
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					-1, message));
	            	}
	            	else {
		            	message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getDataFilePositionMapping(index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(index));
		
		    			message =
		    					message
		    							+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
		    									dataScore);	
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					rgTable.getDataFilePositionMapping(index), message));
	            	}
	            }
            }
                   
    		
    		if (goseconsciousindIndex != -1) {
    			data = bufDataVector.get(goseconsciousindIndex);
    		    if ((data != null) && (data.equalsIgnoreCase("No"))) {
    		    	calculatedScore = 2;
    		    }
    		    else if (data == null) {
    		    	if (rgTable.getDataFilePositionMapping(bufIndex.get(goseconsciousindIndex)) == null) {
    		    		message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(goseconsciousindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					-1, message));	
    		    	}
    		    	else {
	    		    	message =
		    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    							guid,
		    							getRawDataRow(subject_row_id, group_row_index),
		    							rgTable.getDataFilePositionMapping(bufIndex.get(goseconsciousindIndex)),
		    							rgTable.getRepeatableGroupName(),
		    							rgTable.getColumnName(bufIndex.get(goseconsciousindIndex)));
		    			message = message + "the data has not been provided";
		    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
		    					rgTable.getDataFilePositionMapping(bufIndex.get(goseconsciousindIndex)), message));
    		    	}
	    			calculatedScore = -2;
    		    }
    		}
    		
    		if (calculatedScore == -1) {
    			boolean Q2bNoResponse = false;
    			boolean Q2bNo = false;
    			boolean Q2bYes = false;
    			boolean Q2cNoResponse = false;
    			boolean Q2cNo = false;
    			boolean Q2cYes = false;
    			
    			if (gosefreqnthlpneedindIndex != -1) {
    				data = bufDataVector.get(gosefreqnthlpneedindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q2bNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q2bNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q2bYes = true;	
    				}
    			} // if (gosefreqnthlpneedindIndex != -1)
    			
    			if (goseindpntpreinjryindIndex != -1) {
    				data = bufDataVector.get(goseindpntpreinjryindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q2cNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q2cNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q2cYes = true;	
    				}	
    			} // if (goseindpntpreinjryindIndex != -1)
    			

    			if (goseasstneedindIndex != -1) {
    				data = bufDataVector.get(goseasstneedindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    if ((!(Q2bYes || Q2bNo)) || (!(Q2cYes || Q2cNo))) {
    				    		if ((!(Q2bYes || Q2bNo)) && (!(Q2cYes || Q2cNo))) {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(gosefreqnthlpneedindIndex)) == null) {
    				    					message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(gosefreqnthlpneedindIndex)));
		    				    			message = message + "while GOSEAsstNeedInd is set to Yes, " +
		    				    		    "the data for both GOSEFreqntHlpNeedInd and GOSEIndpntPreInjryInd" +
		    				    		   " have not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getDataFilePositionMapping(bufIndex.get(gosefreqnthlpneedindIndex)),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(gosefreqnthlpneedindIndex)));
		    				    			message = message + "while GOSEAsstNeedInd is set to Yes, " +
		    				    		    "the data for both GOSEFreqntHlpNeedInd and GOSEIndpntPreInjryInd" +
		    				    		   " have not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(gosefreqnthlpneedindIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    			}
    				    			calculatedScore =-2;
    				    		}
    				    		else if (!(Q2bYes || Q2bNo)) {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(gosefreqnthlpneedindIndex)) == null) {
    				    					message =
    		    			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
    		    			    							guid,
    		    			    							getRawDataRow(subject_row_id, group_row_index),
    		    			    							rgTable.getRepeatableGroupName(),
    		    			    							rgTable.getColumnName(bufIndex.get(gosefreqnthlpneedindIndex)));
    		    				    			message = message + "while GOSEAsstNeedInd is set to Yes, " +
    		    	    				    		    "the data for GOSEFreqntHlpNeedInd" +
    		    	    				    		   " has not been provided";	
    		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
    		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		    			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    			    							guid,
		    			    							getRawDataRow(subject_row_id, group_row_index),
		    			    							rgTable.getDataFilePositionMapping(bufIndex.get(gosefreqnthlpneedindIndex)),
		    			    							rgTable.getRepeatableGroupName(),
		    			    							rgTable.getColumnName(bufIndex.get(gosefreqnthlpneedindIndex)));
		    				    			message = message + "while GOSEAsstNeedInd is set to Yes, " +
		    	    				    		    "the data for GOSEFreqntHlpNeedInd" +
		    	    				    		   " has not been provided";	
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(gosefreqnthlpneedindIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    		    }
    				    			calculatedScore = -2;
    				    		}
    				    		else {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(goseindpntpreinjryindIndex)) == null) {
    				    					message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goseindpntpreinjryindIndex)));
		    				    			message = message + "while GOSEAsstNeedInd is set to Yes, " +
		    	    				    		    "the data for GOSEIndpntPreInjryInd" +
		    	    				    		   " has not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getDataFilePositionMapping(bufIndex.get(goseindpntpreinjryindIndex)),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goseindpntpreinjryindIndex)));
		    				    			message = message + "while GOSEAsstNeedInd is set to Yes, " +
		    	    				    		    "the data for GOSEIndpntPreInjryInd" +
		    	    				    		   " has not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(goseindpntpreinjryindIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    			}
    				    			calculatedScore = -2;
    				    		}
    				    } // if ((!(Q2bYes || Q2bNo)) || (!(Q2cYes || Q2cNo)))
    				} // else if (data.equalsIgnoreCase("Yes"))	
    			} // if (goseasstneedindIndex != -1)
    			
    			if (Q2bYes && Q2cYes) {
    				calculatedScore = 3;
    			}
    			else if (Q2bNo && (Q2cNo || Q2cNoResponse)) {
    				calculatedScore = 4;
    			}
    				
    		} // if (calculatedScore == -1)
    		
    		if (calculatedScore == -1) {
    		    boolean Q3aNoResponse = false;
    		    boolean Q3aNo = false;
    		    boolean Q3aYes = false;
    		    boolean Q3bNoResponse = false;
    		    boolean Q3bNo = false;
    		    boolean Q3bYes = false;
    			
    			if (goseshpwoutasstindIndex != -1) {
    				data = bufDataVector.get(goseshpwoutasstindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q3aNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q3aNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q3aYes = true;	
    				}
    			} // if (goseshpwoutasstindIndex != -1)
    			
    			if (goseshpwoutasstpreinjryindIndex != -1) {
    				data = bufDataVector.get(goseshpwoutasstpreinjryindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q3bNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q3bNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q3bYes = true;	
    				}
    			} // if (goseshpwoutasstpreinjryindIndex != -1)
    			
    			if (Q3aNo  && (!(Q3bNo || Q3bYes))) {
    			    if (numberWarnings < 1000) {
    			    	if (rgTable.getDataFilePositionMapping(bufIndex.get(goseshpwoutasstpreinjryindIndex)) == null) {
    			    		message =
			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
			    							guid,
			    							getRawDataRow(subject_row_id, group_row_index),
			    							rgTable.getRepeatableGroupName(),
			    							rgTable.getColumnName(bufIndex.get(goseshpwoutasstpreinjryindIndex)));
	    			    	message = message + "while GOSEShpWoutAsstInd is set to No, " +
			    		    "the data for GOSEShpWoutAsstPreInjryInd has not been provided";
	    			    	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
			    					-1, message));	
    			    	}
    			    	else {
	    			    	message =
			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
			    							guid,
			    							getRawDataRow(subject_row_id, group_row_index),
			    							rgTable.getDataFilePositionMapping(bufIndex.get(goseshpwoutasstpreinjryindIndex)),
			    							rgTable.getRepeatableGroupName(),
			    							rgTable.getColumnName(bufIndex.get(goseshpwoutasstpreinjryindIndex)));
	    			    	message = message + "while GOSEShpWoutAsstInd is set to No, " +
			    		    "the data for GOSEShpWoutAsstPreInjryInd has not been provided";
	    			    	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
			    					rgTable.getDataFilePositionMapping(bufIndex.get(goseshpwoutasstpreinjryindIndex)), message));
    			    	}
    			    	numberWarnings++;
    			    }
    			    calculatedScore = -2;
    			} // if (Q3aNo  && (!(Q3bNo || Q3bYes)))
    			
    			if (Q3aNo && (Q3bYes || Q3bNoResponse)) {
    			    calculatedScore = 4;	
    			}
    		} // if (calculatedScore == -1)
    		
    		if (calculatedScore == -1) {
    			 boolean Q4aNoResponse = false;
    			 boolean Q4aNo = false;
    			 boolean Q4aYes = false;
    			 boolean Q4bNoResponse = false;
    			 boolean Q4bNo = false;
    			 boolean Q4bYes = false;
    				
				 if (gosetrvlwoutasstindIndex != -1) {
					data = bufDataVector.get(gosetrvlwoutasstindIndex);
					if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
						Q4aNoResponse = true;
					}
				    else if (data.equalsIgnoreCase("No")) {
					    Q4aNo = true;	
					}
				    else if (data.equalsIgnoreCase("Yes")) {
					    Q4aYes = true;	
					}
				} // if (gosetrvlwoutasstindIndex != -1)
    				
				if (gosetrvlwoutasstpreinjryindIndex != -1) {
					data = bufDataVector.get(gosetrvlwoutasstpreinjryindIndex);
					if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
						Q4bNoResponse = true;
					}
				    else if (data.equalsIgnoreCase("No")) {
					    Q4bNo = true;	
					}
				    else if (data.equalsIgnoreCase("Yes")) {
					    Q4bYes = true;	
					}
				} // if (gosetrvlwoutasstpreinjryindIndex != -1)
				
				if (Q4aNo && (!(Q4bNo || Q4bYes))) {
					if (numberWarnings < 1000) {
						if (rgTable.getDataFilePositionMapping(bufIndex.get(gosetrvlwoutasstpreinjryindIndex)) == null) {
							message =
			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
			    							guid,
			    							getRawDataRow(subject_row_id, group_row_index),
			    							rgTable.getRepeatableGroupName(),
			    							rgTable.getColumnName(bufIndex.get(gosetrvlwoutasstpreinjryindIndex)));
	    			    	message = message + "while GOSETrvlWoutAsstInd is set to No, " +
			    		    "the data for GOSETrvlWoutAsstPreInjryInd has not been provided";
	    			    	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
			    					-1, message));	
						}
						else {
							message =
			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
			    							guid,
			    							getRawDataRow(subject_row_id, group_row_index),
			    							rgTable.getDataFilePositionMapping(bufIndex.get(gosetrvlwoutasstpreinjryindIndex)),
			    							rgTable.getRepeatableGroupName(),
			    							rgTable.getColumnName(bufIndex.get(gosetrvlwoutasstpreinjryindIndex)));
	    			    	message = message + "while GOSETrvlWoutAsstInd is set to No, " +
			    		    "the data for GOSETrvlWoutAsstPreInjryInd has not been provided";
	    			    	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
			    					rgTable.getDataFilePositionMapping(bufIndex.get(gosetrvlwoutasstpreinjryindIndex)), message));
						}
    			    	numberWarnings++;	
					}
					calculatedScore = -2;
				}
				
				if (Q4aNo && (Q4bYes || Q4bNoResponse)) {
					calculatedScore = 4;
				}
    		} // if (calculatedScore == -1)
    		
    		boolean Q5bNoResponse = false;
    		boolean Q5bSheltered = false;
    		boolean Q5bReduced = false;
    		boolean Q5cNoResponse = false;
    		boolean Q5cNo = false;
    		boolean Q5cYes = false;
    		boolean Q6bNoResponse = false;
    		boolean Q6bUnable = false;
    		boolean Q6bMuchLess = false;
    		boolean Q6bBitLess = false;
    		boolean Q6cNoResponse = false;
    		boolean Q6cNo = false;
    		boolean Q6cYes = false;
    		boolean Q7bNoResponse = false;
    		boolean Q7bConstant = false;
    		boolean Q7bFrequent = false;
    		boolean Q7bOccasional = false;
    		boolean Q7cNoResponse = false;
    		boolean Q7cNo = false;
    		boolean Q7cYes = false;
    		
    		if (calculatedScore == -1) {
    		    
    			
    			if (gosewrkrestricttypIndex != -1) {
    				data = bufDataVector.get(gosewrkrestricttypIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q5bNoResponse = true;
    				}
    			    else if (data.contains("only in a sheltered workshop")) {
    				    Q5bSheltered = true;	
    				}
    			    else if (data.contains("Reduced work capacity")) {
    				    Q5bReduced = true;	
    				}
    			} // if (gosewrkrestricttypIndex != -1)
    			    			
    			if (goselvlrestrictindIndex != -1) {
    				data = bufDataVector.get(goselvlrestrictindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q5cNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q5cNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q5cYes = true;	
    				}
    			} // if (goselvlrestrictindIndex != -1)
    			
    			if (gosecrrntwrkindIndex != -1) {
    				data = bufDataVector.get(gosecrrntwrkindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {

    				}
    			    else if (data.equalsIgnoreCase("No")) {
    			    	if ((!(Q5bSheltered || Q5bReduced)) || (!(Q5cYes || Q5cNo))) {
    				    		if ((!(Q5bSheltered || Q5bReduced)) && (!(Q5cYes || Q5cNo))) {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(gosewrkrestricttypIndex)) == null) {
    				    					message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(gosewrkrestricttypIndex)));
		    				    			message = message + "while GOSECrrntWrkInd is set to No, " +
		    				    		    "the data for both GOSEWrkRestrictTyp and GOSELvlRestrictInd" +
		    				    		   " have not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getDataFilePositionMapping(bufIndex.get(gosewrkrestricttypIndex)),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(gosewrkrestricttypIndex)));
		    				    			message = message + "while GOSECrrntWrkInd is set to No, " +
		    				    		    "the data for both GOSEWrkRestrictTyp and GOSELvlRestrictInd" +
		    				    		   " have not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(gosewrkrestricttypIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    			}
    				    			calculatedScore = -2;
    				    		}
    				    		else if (!(Q5bSheltered || Q5bReduced)) {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(gosewrkrestricttypIndex)) == null) {
    				    					message =
    		    			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
    		    			    							guid,
    		    			    							getRawDataRow(subject_row_id, group_row_index),
    		    			    							rgTable.getRepeatableGroupName(),
    		    			    							rgTable.getColumnName(bufIndex.get(gosewrkrestricttypIndex)));
    		    				    			message = message + "while GOSECrrntWrkInd is set to No, " +
    		    	    				    		    "the data for GOSEWrkRestrictTyp" +
    		    	    				    		   " has not been provided";
    		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
    		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		    			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    			    							guid,
		    			    							getRawDataRow(subject_row_id, group_row_index),
		    			    							rgTable.getDataFilePositionMapping(bufIndex.get(gosewrkrestricttypIndex)),
		    			    							rgTable.getRepeatableGroupName(),
		    			    							rgTable.getColumnName(bufIndex.get(gosewrkrestricttypIndex)));
		    				    			message = message + "while GOSECrrntWrkInd is set to No, " +
		    	    				    		    "the data for GOSEWrkRestrictTyp" +
		    	    				    		   " has not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(gosewrkrestricttypIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    			}
    				    			calculatedScore = -2;
    				    		}
    				    		else {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(goselvlrestrictindIndex)) == null) {
    				    					message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goselvlrestrictindIndex)));
		    				    			message = message + "while GOSECrrntWrkInd is set to No, " +
		    	    				    		    "the data for GOSELvlRestrictInd" +
		    	    				    		   " has not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getDataFilePositionMapping(bufIndex.get(goselvlrestrictindIndex)),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goselvlrestrictindIndex)));
		    				    			message = message + "while GOSECrrntWrkInd is set to No, " +
		    	    				    		    "the data for GOSELvlRestrictInd" +
		    	    				    		   " has not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(goselvlrestrictindIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    			}
    				    			calculatedScore = -2;
    				    		}
    				    } // if ((!(Q5bSheltered || Q5bReduced)) || (!(Q5cYes || Q5cNo))   	
    				} // else if (data.equalsIgnoreCase("No"))
    			} // if (gosecrrntwrkindIndex != -1
    			
    			if (Q5bSheltered && (Q5cYes || Q5cNoResponse)) {
    				calculatedScore = 5;
    			}
    		} // if (calculatedScore == -1)
    		
    		if (calculatedScore == -1) {
    			
    			if (goseextntrestrctsocfreqIndex != -1) {
    				data = bufDataVector.get(goseextntrestrctsocfreqIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q6bNoResponse = true;
    				}
    			    else if (data.contains("Unable to participate")) {
    				    Q6bUnable = true;	
    				}
    			    else if (data.contains("Participate much less")) {
    				    Q6bMuchLess = true;	
    				}
    			    else if (data.contains("Participate a bit less")) {
    			    	Q6bBitLess = true;
    			    }
    			} // if (goseextntrestrctsocfreqIndex != -1)
    			
    			if (goseextntrestrctsocpreinjrindIndex != -1) {
    				data = bufDataVector.get(goseextntrestrctsocpreinjrindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q6cNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q6cNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q6cYes = true;	
    				}
    			} // if (goseextntrestrctsocpreinjrindIndex != -1)
    			
    			if (gosesocleisoutindIndex != -1) {
    				data = bufDataVector.get(gosesocleisoutindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    				
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    			    	if ((!(Q6bUnable || Q6bMuchLess || Q6bBitLess)) || (!(Q6cYes || Q6cNo))) {
    				    		if ((!(Q6bUnable || Q6bMuchLess || Q6bBitLess)) && (!(Q6cYes || Q6cNo))) {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(goseextntrestrctsocfreqIndex)) == null) {
    				    					message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goseextntrestrctsocfreqIndex)));
		    				    			message = message + "while GOSESocLeisOutInd is set to No, " +
		    				    		    "the data for both GOSEExtntRestrctSocFreq and GOSExtntRestrctSocPreInjrInd" +
		    				    		   " have not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getDataFilePositionMapping(bufIndex.get(goseextntrestrctsocfreqIndex)),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goseextntrestrctsocfreqIndex)));
		    				    			message = message + "while GOSESocLeisOutInd is set to No, " +
		    				    		    "the data for both GOSEExtntRestrctSocFreq and GOSExtntRestrctSocPreInjrInd" +
		    				    		   " have not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(goseextntrestrctsocfreqIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    			}
    				    			calculatedScore = -2;
    				    		}
    				    		else if (!(Q6bUnable || Q6bMuchLess || Q6bBitLess)) {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(goseextntrestrctsocfreqIndex)) == null) {
    				    					message =
    		    			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
    		    			    							guid,
    		    			    							getRawDataRow(subject_row_id, group_row_index),
    		    			    							rgTable.getRepeatableGroupName(),
    		    			    							rgTable.getColumnName(bufIndex.get(goseextntrestrctsocfreqIndex)));
    		    				    			message = message + "while GOSESocLeisOutInd is set to No, " +
    		    	    				    		    "the data for GOSEExtntRestrctSocFreq" +
    		    	    				    		   " has not been provided";
    		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
    		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		    			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    			    							guid,
		    			    							getRawDataRow(subject_row_id, group_row_index),
		    			    							rgTable.getDataFilePositionMapping(bufIndex.get(goseextntrestrctsocfreqIndex)),
		    			    							rgTable.getRepeatableGroupName(),
		    			    							rgTable.getColumnName(bufIndex.get(goseextntrestrctsocfreqIndex)));
		    				    			message = message + "while GOSESocLeisOutInd is set to No, " +
		    	    				    		    "the data for GOSEExtntRestrctSocFreq" +
		    	    				    		   " has not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(goseextntrestrctsocfreqIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    			}
    				    			calculatedScore = -2;
    				    		}
    				    		else {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(goseextntrestrctsocpreinjrindIndex)) == null) {
    				    					message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goseextntrestrctsocpreinjrindIndex)));
		    				    			message = message + "while GOSESocLeisOutInd is set to No, " +
		    	    				    		    "the data for GOSExtntRestrctSocPreInjrInd" +
		    	    				    		   " has not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getDataFilePositionMapping(bufIndex.get(goseextntrestrctsocpreinjrindIndex)),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goseextntrestrctsocpreinjrindIndex)));
		    				    			message = message + "while GOSESocLeisOutInd is set to No, " +
		    	    				    		    "the data for GOSExtntRestrctSocPreInjrInd" +
		    	    				    		   " has not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(goseextntrestrctsocpreinjrindIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    			}
    				    			calculatedScore = -2;
    				    		}
    				    } // if ((!(Q6bUnable || Q6bMuchLess || Q6bBitLess)) || (!(Q6cYes || Q6cNo)))   	  
    				} // else if (data.equalsIgnoreCase("No"))
    			} // if (gosesocleisoutindIndex != -1)
    			
    			if (Q6bUnable && (Q6cYes || Q6cNoResponse)) {
    				calculatedScore = 5;
    			}
    		} // if (cacluatedScore == -1)
    		
    		if (calculatedScore == -1) {
    			
    			if (goseextntfriendshpstrnfreqIndex != -1) {
    				data = bufDataVector.get(goseextntfriendshpstrnfreqIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q7bNoResponse = true;
    				}
    			    else if (data.contains("Constant")) {
    				    Q7bConstant = true;	
    				}
    			    else if (data.contains("Frequent")) {
    				    Q7bFrequent = true;	
    				}
    			    else if (data.contains("Occasional")) {
    			    	Q7bOccasional = true;
    			    }
    			} // if (goseextntfriendshpstrnfreqIndex != -1)
    			
    			if (goselvlstrnpreinjryindIndex != -1) {
    				data = bufDataVector.get(goselvlstrnpreinjryindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q7cNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q7cNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q7cYes = true;	
    				}
    			} // if (goselvlstrnpreinjryindIndex != -1)
    			
    			if (gosefrindshpindIndex != -1) {
    				data = bufDataVector.get(gosefrindshpindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    			    	if ((!(Q7bConstant || Q7bFrequent || Q7bOccasional)) || (!(Q7cYes || Q7cNo))) {
    				    		if ((!(Q7bConstant || Q7bFrequent || Q7bOccasional)) && (!(Q7cYes || Q7cNo))) {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(goseextntfriendshpstrnfreqIndex)) == null) {
    				    					message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goseextntfriendshpstrnfreqIndex)));
		    				    			message = message + "while GOSEFrindshpInd is set to Yes, " +
		    				    		    "the data for both GOSEExtntFriendshpStrnFreq and GOSELvlStrnPreInjryInd" +
		    				    		   " have not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getDataFilePositionMapping(bufIndex.get(goseextntfriendshpstrnfreqIndex)),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goseextntfriendshpstrnfreqIndex)));
		    				    			message = message + "while GOSEFrindshpInd is set to Yes, " +
		    				    		    "the data for both GOSEExtntFriendshpStrnFreq and GOSELvlStrnPreInjryInd" +
		    				    		   " have not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(goseextntfriendshpstrnfreqIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    			}
    				    			calculatedScore = -2;
    				    		}
    				    		else if (!(Q7bConstant || Q7bFrequent || Q7bOccasional)) {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(goseextntfriendshpstrnfreqIndex)) == null) {
    				    					message =
    		    			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
    		    			    							guid,
    		    			    							getRawDataRow(subject_row_id, group_row_index),
    		    			    							rgTable.getRepeatableGroupName(),
    		    			    							rgTable.getColumnName(bufIndex.get(goseextntfriendshpstrnfreqIndex)));
    		    				    			message = message + "while GOSEFrindshpInd is set to Yes, " +
    		    	    				    		    "the data for GOSEExtntFriendshpStrnFreq" +
    		    	    				    		   " has not been provided";
    		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
    		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		    			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		    			    							guid,
		    			    							getRawDataRow(subject_row_id, group_row_index),
		    			    							rgTable.getDataFilePositionMapping(bufIndex.get(goseextntfriendshpstrnfreqIndex)),
		    			    							rgTable.getRepeatableGroupName(),
		    			    							rgTable.getColumnName(bufIndex.get(goseextntfriendshpstrnfreqIndex)));
		    				    			message = message + "while GOSEFrindshpInd is set to Yes, " +
		    	    				    		    "the data for GOSEExtntFriendshpStrnFreq" +
		    	    				    		   " has not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(goseextntfriendshpstrnfreqIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    			}
    				    			calculatedScore = -2;
    				    		}
    				    		else {
    				    			if (numberWarnings < 1000) {
    				    				if (rgTable.getDataFilePositionMapping(bufIndex.get(goselvlstrnpreinjryindIndex)) == null) {
    				    					message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goselvlstrnpreinjryindIndex)));
		    				    			message = message + "while GOSEFrindshpInd is set to Yes, " +
		    	    				    		    "the data for GOSELvlStrnPreInjryInd" +
		    	    				    		   " has not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					-1, message));	
    				    				}
    				    				else {
		    				    			message =
		        			    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
		        			    							guid,
		        			    							getRawDataRow(subject_row_id, group_row_index),
		        			    							rgTable.getDataFilePositionMapping(bufIndex.get(goselvlstrnpreinjryindIndex)),
		        			    							rgTable.getRepeatableGroupName(),
		        			    							rgTable.getColumnName(bufIndex.get(goselvlstrnpreinjryindIndex)));
		    				    			message = message + "while GOSEFrindshpInd is set to Yes, " +
		    	    				    		    "the data for GOSELvlStrnPreInjryInd" +
		    	    				    		   " has not been provided";
		    				    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
		        			    					rgTable.getDataFilePositionMapping(bufIndex.get(goselvlstrnpreinjryindIndex)), message));
    				    				}
    				    			numberWarnings++;
    				    			}
    				    			calculatedScore = -2;
    				    		}
    				    } // if ((!(Q7bConstant || Q7bFrequent || Q7bOccasional)) || (!(Q7cYes || Q7cNo)))   
    				} // else if (data.equalsIgnoreCase("Yes"))	
    			} // if (gosefrindshpindIndex != -1)
    			
    			if (Q7bConstant && (Q7cNo || Q7cNoResponse)) {
    				calculatedScore = 5;
    			}
    			else if (Q5bReduced && (Q5cYes || Q5cNoResponse)) {
    				calculatedScore = 6;
    			}
    			else if (Q6bMuchLess && (Q6cYes || Q6cNoResponse)) {
    				calculatedScore = 6;
    			}
    			else if (Q7bFrequent && (Q7cNo || Q7cNoResponse)) {
    				calculatedScore = 6;
    			}
    			else if (Q6bBitLess && (Q6cYes || Q6cNoResponse)) {
    				calculatedScore = 7;
    			}
    			else if (Q7bOccasional && (Q7cNo || Q7cNoResponse)) {
    				calculatedScore = 7;
    			}
    		} // if (calculatedScore == -1)
    		
    		if (calculatedScore == -1) {
    			boolean Q8aNoResponse = false;
    			boolean Q8aNo = false;
    			boolean Q8aYes = false;
    		    boolean Q8bNoResponse = false;
    		    boolean Q8bNo = false;
    		    boolean Q8bYes = false;
    			
    			if (gosecrrntprobindIndex != -1) {
    				data = bufDataVector.get(gosecrrntprobindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q8aNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q8aNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q8aYes = true;	
    				}
    			} // if (gosecrrntprobindIndex != -1)
    			
    			if (gosesimlrprobpreinjryindIndex != -1) {
    				data = bufDataVector.get(gosesimlrprobpreinjryindIndex);
    				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
    						(data.trim().isEmpty())) {
    					Q8bNoResponse = true;
    				}
    			    else if (data.equalsIgnoreCase("No")) {
    				    Q8bNo = true;	
    				}
    			    else if (data.equalsIgnoreCase("Yes")) {
    				    Q8bYes = true;	
    				}
    			} // if (gosesimlrprobpreinjryindIndex != -1)
    			
    			if (Q8aYes && (Q8bNo || Q8bNoResponse)) {
    				calculatedScore = 7;
    			}
    			else if (Q8aNo && (Q8bNo || Q8bNoResponse)) {
    				calculatedScore = 8;
    			}
    		} // if (calculatedScore == -1)
    		
    		String calculatedString;
    		if (calculatedScore < 0) {
    			calculatedString = " ";
    		}
    		else {
    			calculatedString = String.valueOf(calculatedScore);
    		}
    		
    		if ((!blankDataScore) && (calculatedScore < 0)) {
    			if (rgTable.getDataFilePositionMapping(index) == null) {
    				message =
	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	    							guid,
	    							getRawDataRow(subject_row_id, group_row_index),
	    							rgTable.getRepeatableGroupName(),
	    							rgTable.getColumnName(index));
	
	    			message =
	    					message
	    							+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
	    									dataScore);
	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    					-1, message));	
    			}
    			else {
	    			message =
	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	    							guid,
	    							getRawDataRow(subject_row_id, group_row_index),
	    							rgTable.getDataFilePositionMapping(index),
	    							rgTable.getRepeatableGroupName(),
	    							rgTable.getColumnName(index));
	
	    			message =
	    					message
	    							+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
	    									dataScore);
	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    					rgTable.getDataFilePositionMapping(index), message));
    			}
    		}
    		
    		else if ((calculatedScore >= 1) && (listedScore != -1)  && (calculatedScore != listedScore)) {
    			if (rgTable.getDataFilePositionMapping(index) == null) {
    				message =
	    					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
	    							guid,
	    							getRawDataRow(subject_row_id, group_row_index),
	    							rgTable.getRepeatableGroupName(),
	    							rgTable.getColumnName(index));
	
	    			message =
	    					message
	    							+ String.format(ApplicationsConstants.ERR_INCORRECT_SCORE,
	    									dataScore, calculatedString);	
	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    					-1, message));		
    			}
    			else {
	    			message =
	    					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
	    							guid,
	    							getRawDataRow(subject_row_id, group_row_index),
	    							rgTable.getDataFilePositionMapping(index),
	    							rgTable.getRepeatableGroupName(),
	    							rgTable.getColumnName(index));
	
	    			message =
	    					message
	    							+ String.format(ApplicationsConstants.ERR_INCORRECT_SCORE,
	    									dataScore, calculatedString);	
	    			table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
	    					rgTable.getDataFilePositionMapping(index), message));	
    			}
    		}	
        } // if (haveForm)
		
	}
	
	private void validateSWLS(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id, 
		    DataStructureTable table) throws Exception {
		// Structure Name:	SWLS_CDISC_FITBIR
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBIUAT_INVPB294RG3
		// group_column_index = 1 group_column_name = subjectidnum data = 1
		// group_column_index = 2 group_column_name = ageyrs data = 20
		// group_column_index = 3 group_column_name = visitdate data = null
		// group_column_index = 4 group_column_name = sitename data = null
		// group_column_index = 5 group_column_name = dayssincebaseline data = 30
		// group_column_index = 6 group_column_name = casecontrlind data = Case
		// group_column_index = 7 group_column_name = generalnotestxt data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Satisfaction with Life Scale
		// rgTable.getSize() = 6
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 6
		// group_column_index = 0 group_column_name = swlslifclosidlscore data = 5
		// group_column_index = 1 group_column_name = swlslifcondexcllncscore data = 6
		// group_column_index = 2 group_column_name = swlslifsatfctnscore data = 6
		// group_column_index = 3 group_column_name = swlslifachvmntscore data = 6
		// group_column_index = 4 group_column_name = swlslifchngscore data = 5
		// group_column_index = 5 group_column_name = swlstotalscore data = 28
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    boolean haveSatisfaction = true;
	    RepeatableGroupTable satisfactionTable = null;
	    int satisfactionIndex[] = new int[5];
	    for (i = 0; i < 5; i++) {
	    	satisfactionIndex[i] = -1;
	    }
	    
        int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Satisfaction with Life Scale")) {
				    haveSatisfaction = false;
				    satisfactionTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		      // System.out.println("group_column_index = " + i +
		      //  " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				
			}
			else if (repeatableGroupName.equalsIgnoreCase("Satisfaction with Life Scale")) {
				if (columnNameVector.get(i).equalsIgnoreCase("swlslifclosidlscore")) {
				    satisfactionIndex[0] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("swlslifcondexcllncscore")) {
				    satisfactionIndex[1] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("swlslifsatfctnscore")) {
				    satisfactionIndex[2] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("swlslifachvmntscore")) {
				    satisfactionIndex[3] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("swlslifchngscore")) {
				    satisfactionIndex[4] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("swlstotalscore")) {
				    totalScoreIndex = bufSizeIndex;	
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveSatisfaction) {
			for (i = 0; i <= 4; i++) {
				if (satisfactionTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									satisfactionTable.getRepeatableGroupName(),
									satisfactionTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(satisfactionTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									satisfactionTable.getDataFilePositionMapping(i),
									satisfactionTable.getRepeatableGroupName(),
									satisfactionTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(satisfactionTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							satisfactionTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 4; i++)			
	    } // if (!haveSatisfaction)
		else { // haveSatisfaction
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
			for (j = 0; j < satisfactionIndex.length; j++) { 
		    	i = satisfactionIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveSatisfaction
	}
	
	private void validateDHI(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3, int subject_row_id, 
			DataStructureTable table) throws Exception {
		// Structure Name:	DHI
		// table.getColumnCount = 4
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBI_INVWJ892MMQ
		// group_column_index = 1 group_column_name = subjectidnum data = OP007
		// group_column_index = 2 group_column_name = ageyrs data = 37
		// group_column_index = 3 group_column_name = vitstatus data = null
		// group_column_index = 4 group_column_name = visitdate data = null
		// group_column_index = 5 group_column_name = sitename data = Mountain Home Veterans Affairs Medical Center
		// group_column_index = 6 group_column_name = dayssincebaseline data = 0
		// group_column_index = 7 group_column_name = casecontrlind data = Control
		// group_column_index = 8 group_column_name = generalnotestxt data = N=130 subjects who 'Completed' the study are contained in this final data. This subject is a Dizzy Control
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Scoring
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = dhiemotionalscr data = 24
		// group_column_index = 1 group_column_name = dhiphysicalscr data = 8
		// group_column_index = 2 group_column_name = dhifunctionalscr data = 20
		// group_column_index = 3 group_column_name = dhitotalscr data = 42
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = DHI
		// rgTable.getSize() = 25
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 25
		// group_column_index = 0 group_column_name = dhilookupincrprobscl data = null
		// group_column_index = 1 group_column_name = dhifeelfrustratedscl data = null
		// group_column_index = 2 group_column_name = dhirestricttravelscl data = null
		// group_column_index = 3 group_column_name = dhiwalkdownaislesupermarketscl data = null
		// group_column_index = 4 group_column_name = dhidiffgettingoutofbedscl data = null
		// group_column_index = 5 group_column_name = dhirestrictsocialactivitiesscl data = null
		// group_column_index = 6 group_column_name = dhidifficultyreadingscl data = null
		// group_column_index = 7 group_column_name = dhiambitiousactincrprobscl data = null
		// group_column_index = 8 group_column_name = dhiafrdleavehomewoaccompanyscl data = 0
		// group_column_index = 9 group_column_name = dhiembarrassedinfrontofothscl data = 2
		// group_column_index = 10 group_column_name = dhiquickmoveofheadincrprobscl data = 4
		// group_column_index = 11 group_column_name = dhiavoidheightsscl data = 4
		// group_column_index = 12 group_column_name = dhiturningoverinbedincrprobscl data = 2
		// group_column_index = 13 group_column_name = dhidifficultstrenuousworkscl data = 4
		// group_column_index = 14 group_column_name = dhiafraidpplthinkintoxscl data = 0
		// group_column_index = 15 group_column_name = dhidiffwalkingbyyourselfscl data = 2
		// group_column_index = 16 group_column_name = dhiwalkdnsidewalkincrprobscl data = 4
		// group_column_index = 17 group_column_name = dhidifftoconcentratescl data = 2
		// group_column_index = 18 group_column_name = dhidifftowalkinhouseindarkscl data = 2
		// group_column_index = 19 group_column_name = dhiafraidtostayhomealonescl data = 4
		// group_column_index = 20 group_column_name = dhifeelhandicappedscl data = 2
		// group_column_index = 21 group_column_name = dhistressonrelationshipsscl data = 2
		// group_column_index = 22 group_column_name = dhidepressedscl data = 4
		// group_column_index = 23 group_column_name = dhiprobintrfrwrspnsbltsscl data = 2
		// group_column_index = 24 group_column_name = dhibendoverincrprobscl data = 2
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = datasource data = Participant/subject
		// group_column_index = 1 group_column_name = datasourceoth data = null
		// group_column_index = 2 group_column_name = contexttype data = After injury
		// group_column_index = 3 group_column_name = contexttypeoth data = null
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveDHI = true;
	    RepeatableGroupTable DHITable = null;
	    boolean haveScoring = true;
	    RepeatableGroupTable scoringTable = null;
	    int emotionalIndex[] = new int[9];
	    for (i = 0; i < 9; i++) {
	    	emotionalIndex[i] = -1;
	    }
	    int physicalIndex[] = new int[7];
	    for (i = 0; i < 7; i++) {
	    	physicalIndex[i] = -1;
	    }
	    int functionalIndex[] = new int[9];
	    for (i = 0; i < 9; i++) {
	    	functionalIndex[i] = -1;
	    }
	    
	    int emotionalScoreIndex = -1;
	    int calculatedEmotionalScore = 0;
	    int actualEmotionalScore = -1;
	    int physicalScoreIndex = -1;
	    int calculatedPhysicalScore = 0;
	    int actualPhysicalScore = -1;
	    int functionalScoreIndex = -1;
	    int calculatedFunctionalScore = 0;
	    int actualFunctionalScore = -1;
	    int totalScoreIndex = -1;
	    int calculatedTotalScore = 0;
	    int actualTotalScore = -1;
	    int numberEmotionalScoresMissing = 0;
	    int numberEmotionalScoresNotInteger = 0;
	    int numberPhysicalScoresMissing = 0;
	    int numberPhysicalScoresNotInteger = 0;
	    int numberFunctionalScoresMissing = 0;
	    int numberFunctionalScoresNotInteger = 0;
	    int numberScoresMissing = 0;
	    int numberScoresNotInteger = 0;
	    
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("DHI")) {
				    haveDHI = false;
				    DHITable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Scoring")) {
					haveScoring = false;
					scoringTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		     // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		     // for (i = 0; i < columnNameVector.size(); i++) {
		     //  System.out.println("group_column_index = " + i +
		     //   " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		     //}
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("DHI")) {
				if (columnNameVector.get(i).equalsIgnoreCase("dhiafraidtostayhomealonescl")) {	
				    emotionalIndex[0] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhifeelfrustratedscl")) {	
				    emotionalIndex[1] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhidifftoconcentratescl")) {	
				    emotionalIndex[2] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhifeelhandicappedscl")) {	
				    emotionalIndex[3] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhidepressedscl")) {	
				    emotionalIndex[4] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhiafrdleavehomewoaccompanyscl")) {	
				    emotionalIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhiafraidpplthinkintoxscl")) {	
				    emotionalIndex[6] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhiembarrassedinfrontofothscl")) {	
				    emotionalIndex[7] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhistressonrelationshipsscl")) {	
				    emotionalIndex[8] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhiwalkdownaislesupermarketscl")) {	
				    physicalIndex[0] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhiambitiousactincrprobscl")) {	
				    physicalIndex[1] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhiwalkdnsidewalkincrprobscl")) {	
				    physicalIndex[2] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhiturningoverinbedincrprobscl")) {	
				    physicalIndex[3] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhilookupincrprobscl")) {	
				    physicalIndex[4] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhiquickmoveofheadincrprobscl")) {	
				    physicalIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhibendoverincrprobscl")) {	
				    physicalIndex[6] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhidiffgettingoutofbedscl")) {	
				    functionalIndex[0] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhirestricttravelscl")) {	
				    functionalIndex[1] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhidifficultstrenuousworkscl")) {	
				    functionalIndex[2] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhirestrictsocialactivitiesscl")) {	
				    functionalIndex[3] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhiavoidheightsscl")) {	
				    functionalIndex[4] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhiprobintrfrwrspnsbltsscl")) {	
				    functionalIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhidiffwalkingbyyourselfscl")) {	
				    functionalIndex[6] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhidifftowalkinhouseindarkscl")) {	
				    functionalIndex[7] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("dhidifficultyreadingscl")) {	
				    functionalIndex[8] = bufSizeIndex;	
				}
			} // else if (repeatableGroupName.equalsIgnoreCase("DHI"))
			else if (repeatableGroupName.equalsIgnoreCase("Scoring")) {
			    if (columnNameVector.get(i).equalsIgnoreCase("dhiemotionalscr")) {
			        emotionalScoreIndex = bufSizeIndex;	
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("dhiphysicalscr")) {
			        physicalScoreIndex = bufSizeIndex;	
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("dhifunctionalscr")) {
			        functionalScoreIndex = bufSizeIndex;	
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("dhitotalscr")) {
			        totalScoreIndex = bufSizeIndex;	
			    }
			} // else if (repeatableGroupName.equalsIgnoreCase("Scoring"))
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
				    if (rgTable.getDataFilePositionMapping(index) == null) {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
									 	getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
				    }
				    else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
									 	getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
				    }
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		if (!haveDHI) {
			numberPhysicalScoresMissing = 7;
			numberEmotionalScoresMissing = 9;
			numberFunctionalScoresMissing = 9;
			numberScoresMissing = 25;
			for (i = 0; i <= 24; i++) {
				if (DHITable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									DHITable.getRepeatableGroupName(),
									DHITable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(DHITable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									DHITable.getDataFilePositionMapping(i),
									DHITable.getRepeatableGroupName(),
									DHITable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(DHITable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							DHITable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 24; i++)			
	    } // if (!haveDHI)
		else { // haveDHI
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
			for (j = 0; j < emotionalIndex.length; j++) { 
		    	i = emotionalIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberEmotionalScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedEmotionalScore +=  Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberEmotionalScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			for (j = 0; j < physicalIndex.length; j++) { 
		    	i = physicalIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberPhysicalScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedPhysicalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberPhysicalScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			for (j = 0; j < functionalIndex.length; j++) { 
		    	i = functionalIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberFunctionalScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedFunctionalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberFunctionalScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			numberScoresMissing = numberEmotionalScoresMissing + numberPhysicalScoresMissing +
					numberFunctionalScoresMissing;
			
			numberScoresNotInteger = numberEmotionalScoresNotInteger + numberPhysicalScoresNotInteger +
					numberFunctionalScoresNotInteger;
			
			calculatedTotalScore = calculatedEmotionalScore + calculatedPhysicalScore +
					calculatedFunctionalScore;
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		} // else haveDHI
		
		if (!haveScoring) {
			if ((numberEmotionalScoresMissing == 0) && (numberEmotionalScoresNotInteger == 0)) {
				if (numberWarnings < 1000) {
					if (scoringTable.getDataFilePositionMapping(0) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoringTable.getRepeatableGroupName(),
										scoringTable.getColumnName(0));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(scoringTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoringTable.getDataFilePositionMapping(0),
										scoringTable.getRepeatableGroupName(),
										scoringTable.getColumnName(0));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(scoringTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								scoringTable.getDataFilePositionMapping(0), message));
					}
					numberWarnings++;
			    } // if (numberWarnings < 1000)	
			} // if ((numberEmotionalScoresMissing == 0) && (numberEmotionalScoresNotInteger == 0))
			if ((numberPhysicalScoresMissing == 0) && (numberPhysicalScoresNotInteger == 0)) {
				if (numberWarnings < 1000) {
					if (scoringTable.getDataFilePositionMapping(1) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoringTable.getRepeatableGroupName(),
										scoringTable.getColumnName(1));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(scoringTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoringTable.getDataFilePositionMapping(1),
										scoringTable.getRepeatableGroupName(),
										scoringTable.getColumnName(1));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(scoringTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								scoringTable.getDataFilePositionMapping(1), message));
					}
					numberWarnings++;
			    } // if (numberWarnings < 1000)	
			} // if ((numberPhysicalScoresMissing == 0) && (numberPhysicalScoresNotInteger == 0))
			if ((numberFunctionalScoresMissing == 0) && (numberFunctionalScoresNotInteger == 0)) {
				if (numberWarnings < 1000) {
					if (scoringTable.getDataFilePositionMapping(2) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoringTable.getRepeatableGroupName(),
										scoringTable.getColumnName(2));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(scoringTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));		
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoringTable.getDataFilePositionMapping(2),
										scoringTable.getRepeatableGroupName(),
										scoringTable.getColumnName(2));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(scoringTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								scoringTable.getDataFilePositionMapping(2), message));
					}
					numberWarnings++;
			    } // if (numberWarnings < 1000)	
			} // if ((numberFunctionalScoresMissing == 0) && (numberFunctionalScoresNotInteger == 0))
			if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
				if (numberWarnings < 1000) {
					if (scoringTable.getDataFilePositionMapping(3) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoringTable.getRepeatableGroupName(),
										scoringTable.getColumnName(3));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(scoringTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoringTable.getDataFilePositionMapping(3),
										scoringTable.getRepeatableGroupName(),
										scoringTable.getColumnName(3));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(scoringTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								scoringTable.getDataFilePositionMapping(3), message));
					}
					numberWarnings++;
			    } // if (numberWarnings < 1000)	
			} // if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0))
		} // if (!haveScoring)
		else { // haveScoring
			if (emotionalScoreIndex >= 0) {
				data = bufDataVector.get(emotionalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(emotionalScoreIndex);
				group_row_index = bufGroup_row_index.get(emotionalScoreIndex);
				index = bufIndex.get(emotionalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberEmotionalScoresMissing == 0) && (numberEmotionalScoresNotInteger == 0)) {
				    if (numberWarnings < 1000) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedEmotionalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
				    	}
				    	else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedEmotionalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
				    	}
						numberWarnings++;
				    } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberEmotionalScoresMissing >= 1) || (numberEmotionalScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualEmotionalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualEmotionalScore > -1) {
		    	if (actualEmotionalScore != calculatedEmotionalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualEmotionalScore), String.valueOf(calculatedEmotionalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));
	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualEmotionalScore), String.valueOf(calculatedEmotionalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    if (physicalScoreIndex >= 0) {
				data = bufDataVector.get(physicalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(physicalScoreIndex);
				group_row_index = bufGroup_row_index.get(physicalScoreIndex);
				index = bufIndex.get(physicalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberPhysicalScoresMissing == 0) && (numberPhysicalScoresNotInteger == 0)) {
				    if (numberWarnings < 1000) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedPhysicalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
				    	}
				    	else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedPhysicalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
				    	}
						numberWarnings++;
				    } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberPhysicalScoresMissing >= 1) || (numberPhysicalScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualPhysicalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualPhysicalScore > -1) {
		    	if (actualPhysicalScore != calculatedPhysicalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualPhysicalScore), String.valueOf(calculatedPhysicalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualPhysicalScore), String.valueOf(calculatedPhysicalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    if (functionalScoreIndex >= 0) {
				data = bufDataVector.get(functionalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(functionalScoreIndex);
				group_row_index = bufGroup_row_index.get(functionalScoreIndex);
				index = bufIndex.get(functionalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberFunctionalScoresMissing == 0) && (numberFunctionalScoresNotInteger == 0)) {
				    if (numberWarnings < 1000) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedFunctionalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
				    	}
				    	else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedFunctionalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
				    	}
						numberWarnings++;
				    } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberFunctionalScoresMissing >= 1) || (numberFunctionalScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualFunctionalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));  
						}
					}
				}
			}
		    
		    if (actualFunctionalScore > -1) {
		    	if (actualFunctionalScore != calculatedFunctionalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualFunctionalScore), String.valueOf(calculatedFunctionalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualFunctionalScore), String.valueOf(calculatedFunctionalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
			if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
				    if (numberWarnings < 1000) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
				    	}
				    	else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
				    	}
						numberWarnings++;
				    } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));		
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));  
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		} // else haveScoring
	}
	
	private void validateHIT6(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3, int subject_row_id, 
			DataStructureTable table) throws Exception {
		//Structure Name:	HIT6
		//table.getColumnCount = 4
		//repeatable_group_id = 0
		//rgTable.getRepeatableGroupName() = HIT-6
		//rgTable.getSize() = 6
		//rgEntries.size() = 1
		//group_row_index = 0
		//columnNameVector.size() = 6
		//group_column_index = 0 group_column_name = hit6headachseverpainfreqscl data = Rarely
		//group_column_index = 1 group_column_name = hit6headachlimitdlyactfreqscl data = Never
		//group_column_index = 2 group_column_name = hit6headachwishliedownfreqscl data = Rarely
		//group_column_index = 3 group_column_name = hit6headachtireddlyactfreqscl data = Never
		//group_column_index = 4 group_column_name = hit6headachfedupirritafreqscl data = Never
		//group_column_index = 5 group_column_name = hit6headachlimconcentrfreqscl data = Rarely
		//repeatable_group_id = 1
		//rgTable.getRepeatableGroupName() = Main
		//rgTable.getSize() = 9
		//rgEntries.size() = 1
		//group_row_index = 0
		//columnNameVector.size() = 9
		//group_column_index = 0 group_column_name = guid data = TBILD409APN
		//group_column_index = 1 group_column_name = subjectidnum data = 1001
		//group_column_index = 2 group_column_name = ageyrs data = null
		//group_column_index = 3 group_column_name = vitstatus data = null
		//group_column_index = 4 group_column_name = visitdate data = null
		//group_column_index = 5 group_column_name = sitename data = null
		//group_column_index = 6 group_column_name = dayssincebaseline data = null
		//group_column_index = 7 group_column_name = casecontrlind data = null
		//group_column_index = 8 group_column_name = generalnotestxt data = age missing
		//repeatable_group_id = 2
		//rgTable.getRepeatableGroupName() = Total Score
		//rgTable.getSize() = 1
		//rgEntries.size() = 1
		//group_row_index = 0
		//columnNameVector.size() = 1
		//group_column_index = 0 group_column_name = hit6ttlscore data = 42
		//repeatable_group_id = 3
		//rgTable.getRepeatableGroupName() = Form Administration
		//rgTable.getSize() = 4
		//rgEntries.size() = 0
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveHIT6 = true;
        RepeatableGroupTable HIT6Table = null;
        int HIT6Index[] = new int[6];
        for (i = 0; i < 6; i++) {
        	HIT6Index[i] = -1;
        }
        boolean haveTotal = true;
        RepeatableGroupTable totalTable = null;
        int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("HIT-6")) {
					haveHIT6 = false;
					HIT6Table = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Total Score")) {
					haveTotal = false;
					totalTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		     // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		     // for (i = 0; i < columnNameVector.size(); i++) {
		     //  System.out.println("group_column_index = " + i +
		     //   " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		     //}
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("HIT-6")) {
				if (columnNameVector.get(i).equalsIgnoreCase("hit6headachseverpainfreqscl")) {
					HIT6Index[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("hit6headachlimitdlyactfreqscl")) {
					HIT6Index[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("hit6headachwishliedownfreqscl")) {
					HIT6Index[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("hit6headachtireddlyactfreqscl")) {
					HIT6Index[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("hit6headachfedupirritafreqscl")) {
					HIT6Index[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("hit6headachlimconcentrfreqscl")) {
					HIT6Index[5] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Total Score")) {
				if (columnNameVector.get(i).equalsIgnoreCase("hit6ttlscore")) {
				    totalScoreIndex = bufSizeIndex;
				}	
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberHitStringNotCorrect = 0;
		if (!haveHIT6) {
			numberScoresMissing = 6;
			for (i = 0; i <= 5; i++) {
				if (numberWarnings < 1000) {
					if (HIT6Table.getDataFilePositionMapping(i) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										HIT6Table.getRepeatableGroupName(),
										HIT6Table.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(HIT6Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										HIT6Table.getDataFilePositionMapping(i),
										HIT6Table.getRepeatableGroupName(),
										HIT6Table.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(HIT6Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								HIT6Table.getDataFilePositionMapping(i), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			} // for (i = 0; i <= 5; i++)			
	    } // if (!haveHIT6)
		else { // haveHIT6
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>incorrectHitStringIndices = new Vector<Integer>();
		    Vector<Integer> incorrectHitString_repeatable_group_id = new Vector<Integer>();
		    Vector<Integer> incorrectHitString_group_row_index = new Vector<Integer>();
		    Vector<String>incorrectHitStringData = new Vector<String>();
		    String permissibleValueString = "Always;Never;Rarely;Sometimes;Very often";
			for (j = 0; j < HIT6Index.length; j++) { 
		    	i = HIT6Index[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else if (!((data.equalsIgnoreCase("Always")) ||
							(data.equalsIgnoreCase("Never"))||
							(data.equalsIgnoreCase("Rarely"))||
							(data.equalsIgnoreCase("Sometimes"))||
							(data.equalsIgnoreCase("Very often")))) {
						numberHitStringNotCorrect++;
						incorrectHitStringIndices.add(bufIndex.get(i));
						incorrectHitString_repeatable_group_id.add(bufRepeatable_group_id.get(i));
						incorrectHitString_group_row_index.add(bufGroup_row_index.get(i));
						incorrectHitStringData.add(data);
					}
					else if (data.equalsIgnoreCase("Always")) {
					    calculatedTotalScore += 13;
					}
					else if (data.equalsIgnoreCase("Never")) {
					    calculatedTotalScore += 6;
					}
					else if (data.equalsIgnoreCase("Rarely")) {
					    calculatedTotalScore += 8;
					}
					else if (data.equalsIgnoreCase("Sometimes")) {
					    calculatedTotalScore += 10;
					}
					else if (data.equalsIgnoreCase("Very often")) {
					    calculatedTotalScore += 11;
					}
		        }
		    }
			
			
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getDataFilePositionMapping(missingIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberHitStringNotCorrect >= 1) {
		    	for (i = 0; i < numberHitStringNotCorrect; i++) {
		    		rgTable = table.getRepeatableGroupTable(incorrectHitString_repeatable_group_id.get(i));
					rgEntries = table.getAllReferences(subject_row_id, 
							incorrectHitString_repeatable_group_id.get(i), null);
					if (rgTable.getDataFilePositionMapping(incorrectHitStringIndices.get(i)) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, incorrectHitString_group_row_index.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(incorrectHitStringIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
												incorrectHitStringData.get(i), permissibleValueString);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, incorrectHitString_group_row_index.get(i)),
								-1, message));	
					}
					else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, incorrectHitString_group_row_index.get(i)),
										rgTable.getDataFilePositionMapping(incorrectHitStringIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(incorrectHitStringIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
												incorrectHitStringData.get(i), permissibleValueString);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, incorrectHitString_group_row_index.get(i)),
								rgTable.getDataFilePositionMapping(incorrectHitStringIndices.get(i)), message));
					}
		    	}	
		    } // if (numberHitStringNotCorrect >= 1)
		    
		} // else haveHIT6
		
		if (!haveTotal) {
			if ((numberScoresMissing == 0) && (numberHitStringNotCorrect == 0)) {
			if (numberWarnings < 1000) {
				if (totalTable.getDataFilePositionMapping(0) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									totalTable.getRepeatableGroupName(),
									totalTable.getColumnName(0));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											"blank",String.valueOf(calculatedTotalScore));
					table.addOutput(new ValidationOutput(totalTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									totalTable.getDataFilePositionMapping(0),
									totalTable.getRepeatableGroupName(),
									totalTable.getColumnName(0));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											"blank",String.valueOf(calculatedTotalScore));
					table.addOutput(new ValidationOutput(totalTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							totalTable.getDataFilePositionMapping(0), message));
				}
			numberWarnings++;
			} // if (numbereWarnings <= 1000)
			} // if ((numberScoresMissing == 0) && (numberHitStringNotCorrect == 0))
	    } // if (!haveTotal)
		else { // haveTotal
			if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberHitStringNotCorrect == 0)) {
				    if (numberWarnings < 1000) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
				    	}
				    	else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
				    	}
						numberWarnings++;
				    } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberHitStringNotCorrect >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
						  		String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));  
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveTotal
	}
	
	private void validateVOMS(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3, int subject_row_id, 
			DataStructureTable table) throws Exception {
		// Structure Name:	VOMS
        // table.getColumnCount = 11
        // repeatable_group_id = 0
        // rgTable.getRepeatableGroupName() = Smooth Pursuits
        // rgTable.getSize() = 6
        // rgEntries.size() = 1
        // group_row_index = 0
        // columnNameVector.size() = 6
        // group_column_index = 0 group_column_name = vomsnottestedind data = 1
        // group_column_index = 1 group_column_name = vomsheadachesymptomscl data = 0
        // group_column_index = 2 group_column_name = vomsdizzinessymptomscl data = 0
        // group_column_index = 3 group_column_name = vomsnauseasymptomscl data = 0
        // group_column_index = 4 group_column_name = vomsfogginessymptomscl data = 0
        // group_column_index = 5 group_column_name = commenttxt data = null
        // repeatable_group_id = 1
        // rgTable.getRepeatableGroupName() = VOMS Scoring
        // rgTable.getSize() = 9
        // rgEntries.size() = 0
        // repeatable_group_id = 2
        // rgTable.getRepeatableGroupName() = Visual Motion Sensitivity (VMS) Test
        // rgTable.getSize() = 6
        // rgEntries.size() = 1
        // group_row_index = 0
        // columnNameVector.size() = 6
        // group_column_index = 0 group_column_name = vomsnottestedind data = 1
        // group_column_index = 1 group_column_name = vomsheadachesymptomscl data = 0
        // group_column_index = 2 group_column_name = vomsdizzinessymptomscl data = 0
        // group_column_index = 3 group_column_name = vomsnauseasymptomscl data = 0
        // group_column_index = 4 group_column_name = vomsfogginessymptomscl data = 0
        // group_column_index = 5 group_column_name = commenttxt data = null
        // repeatable_group_id = 3
        // rgTable.getRepeatableGroupName() = Convergence
        // rgTable.getSize() = 9
        // rgEntries.size() = 1
        // group_row_index = 0
        // columnNameVector.size() = 9
        // group_column_index = 0 group_column_name = vomsnottestedind data = 1
        // group_column_index = 1 group_column_name = vomsheadachesymptomscl data = 0
        // group_column_index = 2 group_column_name = vomsdizzinessymptomscl data = 0
        // group_column_index = 3 group_column_name = vomsnauseasymptomscl data = 0
        // group_column_index = 4 group_column_name = vomsfogginessymptomscl data = 0
        // group_column_index = 5 group_column_name = vomsnearpointconvergence1measr data = 1
        // group_column_index = 6 group_column_name = vomsnearpointconvergence2measr data = 1
        // group_column_index = 7 group_column_name = vomsnearpointconvergence3measr data = 1
        // group_column_index = 8 group_column_name = commenttxt data = null
        // repeatable_group_id = 4
        // rgTable.getRepeatableGroupName() = Vestibular Ocular Reflex (VOR) - Horizontal Test
        // rgTable.getSize() = 6
        // rgEntries.size() = 1
        // group_row_index = 0
        // columnNameVector.size() = 6
        // group_column_index = 0 group_column_name = vomsnottestedind data = 1
        // group_column_index = 1 group_column_name = vomsheadachesymptomscl data = 0
        // group_column_index = 2 group_column_name = vomsdizzinessymptomscl data = 0
        // group_column_index = 3 group_column_name = vomsnauseasymptomscl data = 0
        // group_column_index = 4 group_column_name = vomsfogginessymptomscl data = 0
        // group_column_index = 5 group_column_name = commenttxt data = null
        // repeatable_group_id = 5
        // rgTable.getRepeatableGroupName() = Form Administration
        // rgTable.getSize() = 4
        // rgEntries.size() = 1
        // group_row_index = 0
        // columnNameVector.size() = 4
        // group_column_index = 0 group_column_name = contexttype data = Other, specify
        // group_column_index = 1 group_column_name = contexttypeoth data = Baseline
        // group_column_index = 2 group_column_name = datasource data = null
        // group_column_index = 3 group_column_name = datasourceoth data = null
        // repeatable_group_id = 6
        // rgTable.getRepeatableGroupName() = Baseline  Symptoms
        // rgTable.getSize() = 5
        // rgEntries.size() = 1
        // group_row_index = 0
        // columnNameVector.size() = 5
        // group_column_index = 0 group_column_name = vomsheadachesymptomscl data = 0
        // group_column_index = 1 group_column_name = vomsdizzinessymptomscl data = 0
        // group_column_index = 2 group_column_name = vomsnauseasymptomscl data = 0
        // group_column_index = 3 group_column_name = vomsfogginessymptomscl data = 0
        // group_column_index = 4 group_column_name = commenttxt data = null
        // repeatable_group_id = 7
        // rgTable.getRepeatableGroupName() = Saccades - Vertical
        // rgTable.getSize() = 6
        // rgEntries.size() = 1
        // group_row_index = 0
        // columnNameVector.size() = 6
        // group_column_index = 0 group_column_name = vomsnottestedind data = 1
        // group_column_index = 1 group_column_name = vomsheadachesymptomscl data = 0
        // group_column_index = 2 group_column_name = vomsdizzinessymptomscl data = 0
        // group_column_index = 3 group_column_name = vomsnauseasymptomscl data = 0
        // group_column_index = 4 group_column_name = vomsfogginessymptomscl data = 0
        // group_column_index = 5 group_column_name = commenttxt data = null
        // repeatable_group_id = 8
        // rgTable.getRepeatableGroupName() = Saccades - Horizontal
        // rgTable.getSize() = 6
        // rgEntries.size() = 1
        // group_row_index = 0
        // columnNameVector.size() = 6
        // group_column_index = 0 group_column_name = vomsnottestedind data = 1
        // group_column_index = 1 group_column_name = vomsheadachesymptomscl data = 0
        // group_column_index = 2 group_column_name = vomsdizzinessymptomscl data = 0
        // group_column_index = 3 group_column_name = vomsnauseasymptomscl data = 0
        // group_column_index = 4 group_column_name = vomsfogginessymptomscl data = 0
        // group_column_index = 5 group_column_name = commenttxt data = null
        // repeatable_group_id = 9
        // rgTable.getRepeatableGroupName() = Vestibular Ocular Reflex (VOR) - Vertical Test
        // rgTable.getSize() = 6
        // rgEntries.size() = 1
        // group_row_index = 0
        // columnNameVector.size() = 6
        // group_column_index = 0 group_column_name = vomsnottestedind data = 1
        // group_column_index = 1 group_column_name = vomsheadachesymptomscl data = 0
        // group_column_index = 2 group_column_name = vomsdizzinessymptomscl data = 0
        // group_column_index = 3 group_column_name = vomsnauseasymptomscl data = 0
        // group_column_index = 4 group_column_name = vomsfogginessymptomscl data = 0
        // group_column_index = 5 group_column_name = commenttxt data = null
        // repeatable_group_id = 10
        // rgTable.getRepeatableGroupName() = Main
        // rgTable.getSize() = 9
        // rgEntries.size() = 1
        // group_row_index = 0
        // columnNameVector.size() = 9
        // group_column_index = 0 group_column_name = guid data = TBINU347NHN
        // group_column_index = 1 group_column_name = subjectidnum data = 8755
        // group_column_index = 2 group_column_name = ageyrs data = null
        // group_column_index = 3 group_column_name = vitstatus data = null
        // group_column_index = 4 group_column_name = visitdate data = 2015-07-30T00:00:00Z
        // group_column_index = 5 group_column_name = sitename data = null
        // group_column_index = 6 group_column_name = dayssincebaseline data = null
        // group_column_index = 7 group_column_name = casecontrlind data = null
        // group_column_index = 8 group_column_name = generalnotestxt data = ID numbers in SubjectIDNum field
		//   are used to identify all assessments, time points, etc. related to a particular baseline or injury
		//   event. This is for cases where 1 GUID has multiple baseline and/or injuries associated with it.
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    boolean haveBaseline = true;
	    RepeatableGroupTable baselineTable = null;
	    int baselineIndex[] = new int[4];
	    for (i = 0; i < 4; i++) {
	    	baselineIndex[i] = -1;
	    }
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveSmooth = true;
	    RepeatableGroupTable smoothTable = null;
	    int smoothIndex[] = new int[5];
	    for (i = 0; i < 5; i++) {
	    	smoothIndex[i] = -1;
	    }
	    boolean haveHorizontalSaccades = true;
	    RepeatableGroupTable horizontalSaccadesTable = null;
	    int horizontalSaccadesIndex[] = new int[5];
	    for (i = 0; i < 5; i++) {
	    	horizontalSaccadesIndex[i] = -1;
	    }
	    boolean haveVerticalSaccades = true;
	    RepeatableGroupTable verticalSaccadesTable = null;
	    int verticalSaccadesIndex[] = new int[5];
	    for (i = 0; i < 5; i++) {
	    	verticalSaccadesIndex[i] = -1;
	    }
	    boolean haveConvergence = true;
	    RepeatableGroupTable convergenceTable = null;
	    int convergenceIndex[] = new int[8];
	    for (i = 0; i < 8; i++) {
	    	convergenceIndex[i] = -1;
	    }
	    boolean haveHorizontalTest = true;
	    RepeatableGroupTable horizontalTestTable = null;
	    int horizontalTestIndex[] = new int[5];
	    for (i = 0; i < 5; i++) {
	    	horizontalTestIndex[i] = -1;
	    }
	    boolean haveVerticalTest = true;
	    RepeatableGroupTable verticalTestTable = null;
	    int verticalTestIndex[] = new int[5];
	    for (i = 0; i < 5; i++) {
	    	verticalTestIndex[i] = -1;
	    }
	    boolean haveSensitivityTest = true;
	    RepeatableGroupTable sensitivityTestTable = null;
	    int sensitivityTestIndex[] = new int[5];
	    for (i = 0; i < 5; i++) {
	    	sensitivityTestIndex[i] = -1;
	    }
	    
	 // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Baseline  Symptoms")) {
				    haveBaseline = false;
				    baselineTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Smooth Pursuits")) {
				    haveSmooth = false;
				    smoothTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Saccades - Horizontal")) {
				    haveHorizontalSaccades = false;
				    horizontalSaccadesTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Saccades - Vertical")) {
				    haveVerticalSaccades = false;
				    verticalSaccadesTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Convergence")) {
				    haveConvergence = false;
				    convergenceTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Vestibular Ocular Reflex (VOR) - Horizontal Test")) {
					haveHorizontalTest = false;
					horizontalTestTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Vestibular Ocular Reflex (VOR) - Vertical Test")) {
					haveVerticalTest = false;
					verticalTestTable = rgTable;	
				}
				else if (repeatableGroupName.equalsIgnoreCase("Visual Motion Sensitivity (VMS) Test")) {
					haveSensitivityTest = false;
					sensitivityTestTable = rgTable;	
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		     // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		     // for (i = 0; i < columnNameVector.size(); i++) {
		     //  System.out.println("group_column_index = " + i +
		     //   " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		     //}
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Baseline  Symptoms")) {
				if (columnNameVector.get(i).equalsIgnoreCase("vomsheadachesymptomscl")) {
				    baselineIndex[0] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsdizzinessymptomscl")) {
				    baselineIndex[1] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsnauseasymptomscl")) {
				    baselineIndex[2] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsfogginessymptomscl")) {
				    baselineIndex[3] = bufSizeIndex;	
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Smooth Pursuits")) {
				if (columnNameVector.get(i).equalsIgnoreCase("vomsnottestedind")) {	
					smoothIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsheadachesymptomscl")) {	
					smoothIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsdizzinessymptomscl")) {	
					smoothIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsnauseasymptomscl")) {	
					smoothIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsfogginessymptomscl")) {	
					smoothIndex[4] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Saccades - Horizontal")) {
				if (columnNameVector.get(i).equalsIgnoreCase("vomsnottestedind")) {	
					horizontalSaccadesIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsheadachesymptomscl")) {	
					horizontalSaccadesIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsdizzinessymptomscl")) {	
					horizontalSaccadesIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsnauseasymptomscl")) {	
					horizontalSaccadesIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsfogginessymptomscl")) {	
					horizontalSaccadesIndex[4] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Saccades - Vertical")) {
				if (columnNameVector.get(i).equalsIgnoreCase("vomsnottestedind")) {	
					verticalSaccadesIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsheadachesymptomscl")) {	
					verticalSaccadesIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsdizzinessymptomscl")) {	
					verticalSaccadesIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsnauseasymptomscl")) {	
					verticalSaccadesIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsfogginessymptomscl")) {	
					verticalSaccadesIndex[4] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Convergence")) {
				if (columnNameVector.get(i).equalsIgnoreCase("vomsnottestedind")) {	
					convergenceIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsheadachesymptomscl")) {	
					convergenceIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsdizzinessymptomscl")) {	
					convergenceIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsnauseasymptomscl")) {	
					convergenceIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsfogginessymptomscl")) {	
					convergenceIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsnearpointconvergence1measr")) {	
					convergenceIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsnearpointconvergence2measr")) {	
					convergenceIndex[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsnearpointconvergence3measr")) {	
					convergenceIndex[7] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Vestibular Ocular Reflex (VOR) - Horizontal Test")) {
				if (columnNameVector.get(i).equalsIgnoreCase("vomsnottestedind")) {	
					horizontalTestIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsheadachesymptomscl")) {	
					horizontalTestIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsdizzinessymptomscl")) {	
					horizontalTestIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsnauseasymptomscl")) {	
					horizontalTestIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsfogginessymptomscl")) {	
					horizontalTestIndex[4] = bufSizeIndex;
				}	
			}
			else if (repeatableGroupName.equalsIgnoreCase("Vestibular Ocular Reflex (VOR) - Vertical Test")) {
				if (columnNameVector.get(i).equalsIgnoreCase("vomsnottestedind")) {	
					verticalTestIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsheadachesymptomscl")) {	
					verticalTestIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsdizzinessymptomscl")) {	
					verticalTestIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsnauseasymptomscl")) {	
					verticalTestIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsfogginessymptomscl")) {	
					verticalTestIndex[4] = bufSizeIndex;
				}		
			}
			else if (repeatableGroupName.equalsIgnoreCase("Visual Motion Sensitivity (VMS) Test")) {
				if (columnNameVector.get(i).equalsIgnoreCase("vomsnottestedind")) {	
					sensitivityTestIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsheadachesymptomscl")) {	
					sensitivityTestIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsdizzinessymptomscl")) {	
					sensitivityTestIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsnauseasymptomscl")) {	
					sensitivityTestIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("vomsfogginessymptomscl")) {	
					sensitivityTestIndex[4] = bufSizeIndex;
				}			
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 9) || (age > 40)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "9 to 40 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "9 to 40 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		int numberScoresBlankRequired = 0;
		Vector<Integer>missingIndices = new Vector<Integer>();
	    int missing_repeatable_group_id = -1;
	    int missing_group_row_index = -1;
	    Vector<Integer>notIntegerIndices = new Vector<Integer>();
	    int notInteger_repeatable_group_id = -1;
	    int notInteger_group_row_index = -1;
	    Vector<String>notIntegerData = new Vector<String>();
	    Vector<Integer>blankRequiredIndices = new Vector<Integer>();
	    int blankRequired_repeatable_group_id = -1;
	    int blankRequired_group_row_index = -1;
	    Vector<String>blankRequiredData = new Vector<String>();
	    int value = -1;
	    
		if (!haveBaseline) {
			for (i = 0; i <= 3; i++) {
				if (baselineTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									baselineTable.getRepeatableGroupName(),
									baselineTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(baselineTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									baselineTable.getDataFilePositionMapping(i),
									baselineTable.getRepeatableGroupName(),
									baselineTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(baselineTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							baselineTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 3; i++)			
	    } // if (!haveBaseline)
		else { // haveBaseline
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < baselineIndex.length; j++) { 
		    	i = baselineIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		} // else haveBaseline
		
		if (!haveSmooth) {
			for (i = 0; i <= 4; i++) {
				if (smoothTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									smoothTable.getRepeatableGroupName(),
									smoothTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(smoothTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									smoothTable.getDataFilePositionMapping(i),
									smoothTable.getRepeatableGroupName(),
									smoothTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(smoothTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							smoothTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 4; i++)			
	    } // if (!haveSmooth)
		else { // haveSmooth
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			numberScoresBlankRequired = 0;
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    blankRequiredIndices.clear();
		    blankRequired_repeatable_group_id = -1;
		    blankRequired_group_row_index = -1;
		    blankRequiredData.clear();
		    boolean useMissing = true;
			for (j = 0; j < smoothIndex.length; j++) { 
		    	i = smoothIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
		    		if (useMissing) {
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if ((j == 0) && ((value == 0) || (value == 999))) {
					    	   useMissing = false;
					       }
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		    		} // if (useMissing)
		    		else { // data should not be submitted
		    			if (!((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty()))) {	
		    			    numberScoresBlankRequired++;
		    			    blankRequiredIndices.add(bufIndex.get(i));
		    			    blankRequired_repeatable_group_id = bufRepeatable_group_id.get(i);
		    			    blankRequired_group_row_index = bufGroup_row_index.get(i);
		    			    blankRequiredData.add(data);
		    			}
		    		} // data should not be submitted
		        }
		    }
			
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (numberScoresBlankRequired >= 1) {
		    	rgTable = table.getRepeatableGroupTable(blankRequired_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						blankRequired_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresBlankRequired; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberScoresBlankRequired >= 1)
		} // else haveSmooth
		
		if (!haveHorizontalSaccades) {
			for (i = 0; i <= 4; i++) {
				if (horizontalSaccadesTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									horizontalSaccadesTable.getRepeatableGroupName(),
									horizontalSaccadesTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(horizontalSaccadesTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									horizontalSaccadesTable.getDataFilePositionMapping(i),
									horizontalSaccadesTable.getRepeatableGroupName(),
									horizontalSaccadesTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(horizontalSaccadesTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							horizontalSaccadesTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 4; i++)			
	    } // if (!haveHorizontalSaccades)
		else { // haveHorizontalSaccades
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			numberScoresBlankRequired = 0;
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    blankRequiredIndices.clear();
		    blankRequired_repeatable_group_id = -1;
		    blankRequired_group_row_index = -1;
		    blankRequiredData.clear();
		    boolean useMissing = true;
			for (j = 0; j < horizontalSaccadesIndex.length; j++) { 
		    	i = horizontalSaccadesIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
		    		if (useMissing) {
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if ((j == 0) && ((value == 0) || (value == 999))) {
					    	   useMissing = false;
					       }
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		    		} // if (useMissing)
		    		else { // data should not be submitted
		    			if (!((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty()))) {	
		    			    numberScoresBlankRequired++;
		    			    blankRequiredIndices.add(bufIndex.get(i));
		    			    blankRequired_repeatable_group_id = bufRepeatable_group_id.get(i);
		    			    blankRequired_group_row_index = bufGroup_row_index.get(i);
		    			    blankRequiredData.add(data);
		    			}
		    		} // data should not be submitted
		        }
		    }
			
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (numberScoresBlankRequired >= 1) {
		    	rgTable = table.getRepeatableGroupTable(blankRequired_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						blankRequired_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresBlankRequired; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberScoresBlankRequired >= 1)
		} // else haveHorizontalSaccades
		
		if (!haveVerticalSaccades) {
			for (i = 0; i <= 4; i++) {
				if (verticalSaccadesTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									verticalSaccadesTable.getRepeatableGroupName(),
									verticalSaccadesTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(verticalSaccadesTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									verticalSaccadesTable.getDataFilePositionMapping(i),
									verticalSaccadesTable.getRepeatableGroupName(),
									verticalSaccadesTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(verticalSaccadesTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							verticalSaccadesTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 4; i++)			
	    } // if (!haveVerticalSaccades)
		else { // haveVerticalSaccades
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			numberScoresBlankRequired = 0;
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    blankRequiredIndices.clear();
		    blankRequired_repeatable_group_id = -1;
		    blankRequired_group_row_index = -1;
		    blankRequiredData.clear();
		    boolean useMissing = true;
			for (j = 0; j < verticalSaccadesIndex.length; j++) { 
		    	i = verticalSaccadesIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
		    		if (useMissing) {
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if ((j == 0) && ((value == 0) || (value == 999))) {
					    	   useMissing = false;
					       }
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		    		} // if (useMissing)
		    		else { // data should not be submitted
		    			if (!((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty()))) {	
		    			    numberScoresBlankRequired++;
		    			    blankRequiredIndices.add(bufIndex.get(i));
		    			    blankRequired_repeatable_group_id = bufRepeatable_group_id.get(i);
		    			    blankRequired_group_row_index = bufGroup_row_index.get(i);
		    			    blankRequiredData.add(data);
		    			}
		    		} // data should not be submitted
		        }
		    }
			
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (numberScoresBlankRequired >= 1) {
		    	rgTable = table.getRepeatableGroupTable(blankRequired_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						blankRequired_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresBlankRequired; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberScoresBlankRequired >= 1)
		} // else haveVerticalSaccades
		
		if (!haveConvergence) {
			for (i = 0; i <= 7; i++) {
				if (convergenceTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									convergenceTable.getRepeatableGroupName(),
									convergenceTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(convergenceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									convergenceTable.getDataFilePositionMapping(i),
									convergenceTable.getRepeatableGroupName(),
									convergenceTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(convergenceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							convergenceTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 7; i++)			
	    } // if (!haveConvergence)
		else { // haveConvergence
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			numberScoresBlankRequired = 0;
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    blankRequiredIndices.clear();
		    blankRequired_repeatable_group_id = -1;
		    blankRequired_group_row_index = -1;
		    blankRequiredData.clear();
		    boolean useMissing = true;
			for (j = 0; j < convergenceIndex.length; j++) { 
		    	i = convergenceIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
		    		if (useMissing) {
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
						if (j < 5) {
					       value = Integer.valueOf(data).intValue();
					       if ((j == 0) && ((value == 0) || (value == 999))) {
					    	   useMissing = false;
					       }
						}
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		    		} // if (useMissing)
		    		else { // data should not be submitted
		    			if (!((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty()))) {	
		    			    numberScoresBlankRequired++;
		    			    blankRequiredIndices.add(bufIndex.get(i));
		    			    blankRequired_repeatable_group_id = bufRepeatable_group_id.get(i);
		    			    blankRequired_group_row_index = bufGroup_row_index.get(i);
		    			    blankRequiredData.add(data);
		    			}
		    		} // data should not be submitted
		        }
		    }
			
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (numberScoresBlankRequired >= 1) {
		    	rgTable = table.getRepeatableGroupTable(blankRequired_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						blankRequired_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresBlankRequired; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberScoresBlankRequired >= 1)
		} // else haveConvergence
		
		if (!haveHorizontalTest) {
			for (i = 0; i <= 4; i++) {
				if (horizontalTestTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									horizontalTestTable.getRepeatableGroupName(),
									horizontalTestTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(horizontalTestTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									horizontalTestTable.getDataFilePositionMapping(i),
									horizontalTestTable.getRepeatableGroupName(),
									horizontalTestTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(horizontalTestTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							horizontalTestTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 4; i++)			
	    } // if (!haveHorizontalTest)
		else { // haveHorizontalTest
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			numberScoresBlankRequired = 0;
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    blankRequiredIndices.clear();
		    blankRequired_repeatable_group_id = -1;
		    blankRequired_group_row_index = -1;
		    blankRequiredData.clear();
		    boolean useMissing = true;
			for (j = 0; j < horizontalTestIndex.length; j++) { 
		    	i = horizontalTestIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
		    		if (useMissing) {
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if ((j == 0) && ((value == 0) || (value == 999))) {
					    	   useMissing = false;
					       }
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		    		} // if (useMissing)
		    		else { // data should not be submitted
		    			if (!((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty()))) {	
		    			    numberScoresBlankRequired++;
		    			    blankRequiredIndices.add(bufIndex.get(i));
		    			    blankRequired_repeatable_group_id = bufRepeatable_group_id.get(i);
		    			    blankRequired_group_row_index = bufGroup_row_index.get(i);
		    			    blankRequiredData.add(data);
		    			}
		    		} // data should not be submitted
		        }
		    }
			
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (numberScoresBlankRequired >= 1) {
		    	rgTable = table.getRepeatableGroupTable(blankRequired_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						blankRequired_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresBlankRequired; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberScoresBlankRequired >= 1)
		} // else haveHorizontalTest
		
		if (!haveVerticalTest) {
			for (i = 0; i <= 4; i++) {
				if (verticalTestTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									verticalTestTable.getRepeatableGroupName(),
									verticalTestTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(verticalTestTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									verticalTestTable.getDataFilePositionMapping(i),
									verticalTestTable.getRepeatableGroupName(),
									verticalTestTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(verticalTestTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							verticalTestTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 4; i++)			
	    } // if (!haveVerticalTest)
		else { // haveVerticalTest
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			numberScoresBlankRequired = 0;
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    blankRequiredIndices.clear();
		    blankRequired_repeatable_group_id = -1;
		    blankRequired_group_row_index = -1;
		    blankRequiredData.clear();
		    boolean useMissing = true;
			for (j = 0; j < verticalTestIndex.length; j++) { 
		    	i = verticalTestIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
		    		if (useMissing) {
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if ((j == 0) && ((value == 0) || (value == 999))) {
					    	   useMissing = false;
					       }
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		    		} // if (useMissing)
		    		else { // data should not be submitted
		    			if (!((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty()))) {	
		    			    numberScoresBlankRequired++;
		    			    blankRequiredIndices.add(bufIndex.get(i));
		    			    blankRequired_repeatable_group_id = bufRepeatable_group_id.get(i);
		    			    blankRequired_group_row_index = bufGroup_row_index.get(i);
		    			    blankRequiredData.add(data);
		    			}
		    		} // data should not be submitted
		        }
		    }
			
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (numberScoresBlankRequired >= 1) {
		    	rgTable = table.getRepeatableGroupTable(blankRequired_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						blankRequired_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresBlankRequired; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberScoresBlankRequired >= 1)
		} // else haveVerticalTest
		
		if (!haveSensitivityTest) {
			for (i = 0; i <= 4; i++) {
				if (sensitivityTestTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									sensitivityTestTable.getRepeatableGroupName(),
									sensitivityTestTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(sensitivityTestTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									sensitivityTestTable.getDataFilePositionMapping(i),
									sensitivityTestTable.getRepeatableGroupName(),
									sensitivityTestTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(sensitivityTestTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							sensitivityTestTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 4; i++)			
	    } // if (!haveSensitivityTest)
		else { // haveSensitivityTest
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			numberScoresBlankRequired = 0;
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    blankRequiredIndices.clear();
		    blankRequired_repeatable_group_id = -1;
		    blankRequired_group_row_index = -1;
		    blankRequiredData.clear();
		    boolean useMissing = true;
			for (j = 0; j < sensitivityTestIndex.length; j++) { 
		    	i = sensitivityTestIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
		    		if (useMissing) {
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if ((j == 0) && ((value == 0) || (value == 999))) {
					    	   useMissing = false;
					       }
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		    		} // if (useMissing)
		    		else { // data should not be submitted
		    			if (!((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty()))) {	
		    			    numberScoresBlankRequired++;
		    			    blankRequiredIndices.add(bufIndex.get(i));
		    			    blankRequired_repeatable_group_id = bufRepeatable_group_id.get(i);
		    			    blankRequired_group_row_index = bufGroup_row_index.get(i);
		    			    blankRequiredData.add(data);
		    			}
		    		} // data should not be submitted
		        }
		    }
			
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (numberScoresBlankRequired >= 1) {
		    	rgTable = table.getRepeatableGroupTable(blankRequired_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						blankRequired_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresBlankRequired; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, blankRequired_group_row_index),
											rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(blankRequiredIndices.get(i)));
		
							message =
									message
											+ "is " + blankRequiredData.get(i) +
											" instead of the required blank for VOMSNotTestedInd = " +
											String.valueOf(value);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, blankRequired_group_row_index),
									rgTable.getDataFilePositionMapping(blankRequiredIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberScoresBlankRequired >= 1)
		} // else haveSensitivityTest
	}
	
	private void validateFIM(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3, int subject_row_id, 
			DataStructureTable table) throws Exception {
		// Structure Name:	FIM_Instrument
		// table.getColumnCount = 7
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 6
		// rgEntries.size() = 0
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Expression
		// rgTable.getSize() = 3
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 3
		// group_column_index = 0 group_column_name = visittyp data = Follow-Up
		// group_column_index = 1 group_column_name = fimcognexpressionscl data = 7
		// group_column_index = 2 group_column_name = fimcogncompehensexpressmodetyp data = null
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Comprehension
		// rgTable.getSize() = 3
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 3
		// group_column_index = 0 group_column_name = visittyp data = Follow-Up
		// group_column_index = 1 group_column_name = fimcogncompehensscl data = 7
		// group_column_index = 2 group_column_name = fimcogncompehensexpressmodetyp data = null
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = Social Cognition
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = visittyp data = Follow-Up
		// group_column_index = 1 group_column_name = fimcognsoclinteractscl data = 6
		// group_column_index = 2 group_column_name = fimcognprobsolvscl data = 5
		// group_column_index = 3 group_column_name = fimcognmemoryscl data = 7
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = Motor subscale
		// rgTable.getSize() = 15
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 15
		// group_column_index = 0 group_column_name = visittyp data = Follow-Up
		// group_column_index = 1 group_column_name = fimmotorselfcareeatingscl data = 7
		// group_column_index = 2 group_column_name = fimmotorselfcaregroomingscl data = 7
		// group_column_index = 3 group_column_name = fimmotorselfcarebathingscl data = 7
		// group_column_index = 4 group_column_name = fimmotorselfcaredreslowbodyscl data = 7
		// group_column_index = 5 group_column_name = fimmotorselfcaredresuppbodyscl data = 7
		// group_column_index = 6 group_column_name = fimmotorselfcaretoiletingscl data = 7
		// group_column_index = 7 group_column_name = fimmotorsphcontrbladdermgmtscl data = 6
		// group_column_index = 8 group_column_name = fimmotorsphcontrbowelmgmtscl data = 7
		// group_column_index = 9 group_column_name = fimmotortransfbedchairwchscl data = 7
		// group_column_index = 10 group_column_name = fimmotortransftoiletscl data = 7
		// group_column_index = 11 group_column_name = fimmotortransftubshowerscl data = 7
		// group_column_index = 12 group_column_name = fimmotorlocomotionwalkwcscl data = 6
		// group_column_index = 13 group_column_name = fimmotorlocomotionmodetyp data = W
		// group_column_index = 14 group_column_name = fimmotorlocomotionstairsscl data = 6
		// repeatable_group_id = 5
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBI_INVAA005PE4
		// group_column_index = 1 group_column_name = subjectidnum data = null
		// group_column_index = 2 group_column_name = ageyrs data = 13
		// group_column_index = 3 group_column_name = vitstatus data = null
		// group_column_index = 4 group_column_name = visitdate data = null
		// group_column_index = 5 group_column_name = sitename data = TBIMS NDSC
		// group_column_index = 6 group_column_name = dayssincebaseline data = 772
		// group_column_index = 7 group_column_name = casecontrlind data = Age is out of range
		// group_column_index = 8 group_column_name = generalnotestxt data = null
		// repeatable_group_id = 6
		// rgTable.getRepeatableGroupName() = Scores
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = visittyp data = Follow-Up
		// group_column_index = 1 group_column_name = fiminstrmotorsubscore data = 88
		// group_column_index = 2 group_column_name = fiminstrcognfunctsubscore data = 32
		// group_column_index = 3 group_column_name = fiminstrtotalscore data = 120
	
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveMotor = true;
	    RepeatableGroupTable motorTable = null;
	    int motorIndex[] = new int[15];
	    for (i = 0; i < 15; i++) {
	    	motorIndex[i] = -1;
	    }
	    int calculatedMotorScore = 0;
	    int actualMotorScore = -1;
	    int calculatedOthersScore = 0;
	    int actualOthersScore = -1;
	    int calculatedTotalScore = 0;
	    int actualTotalScore = -1;
	    int motorScoreIndex = -1;
	    int othersScoreIndex = -1;
	    int totalScoreIndex = -1;
	    boolean haveScores = true;
	    RepeatableGroupTable scoresTable = null;
	    int visitScoreIndex = -1;
	    boolean haveComprehension = true;
	    RepeatableGroupTable comprehensionTable = null;
	    int comprehensionIndex[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	comprehensionIndex[i] = -1;
	    }
	    boolean haveExpression = true;
	    RepeatableGroupTable expressionTable = null;
	    int expressionIndex[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	expressionIndex[i] = -1;
	    }
	    boolean haveSocial = true;
	    RepeatableGroupTable socialTable = null;
	    int socialIndex[] = new int[4];
	    for (i = 0; i < 4; i++) {
	    	socialIndex[i] = -1;
	    }
	    
	    
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Motor subscale")) {
				    haveMotor = false;
				    motorTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Scores")) {
				    haveScores = false;
				    scoresTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Comprehension")) {
				    haveComprehension = false;
				    comprehensionTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Expression")) {
				    haveExpression = false;
				    expressionTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Social Cognition")) {
				    haveSocial = false;
				    socialTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		     // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		     // for (i = 0; i < columnNameVector.size(); i++) {
		     //  System.out.println("group_column_index = " + i +
		     //   " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		     //}
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Motor subscale")) {
				if (columnNameVector.get(i).equalsIgnoreCase("visittyp")) {	
					motorIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotorselfcareeatingscl")) {	
					motorIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotorselfcaregroomingscl")) {	
					motorIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotorselfcarebathingscl")) {	
					motorIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotorselfcaredreslowbodyscl")) {	
					motorIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotorselfcaredresuppbodyscl")) {	
					motorIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotorselfcaretoiletingscl")) {	
					motorIndex[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotorsphcontrbladdermgmtscl")) {	
					motorIndex[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotorsphcontrbowelmgmtscl")) {	
					motorIndex[8] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotortransfbedchairwchscl")) {	
					motorIndex[9] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotortransftoiletscl")) {	
					motorIndex[10] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotortransftubshowerscl")) {	
					motorIndex[11] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotorlocomotionwalkwcscl")) {	
					motorIndex[12] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotorlocomotionmodetyp")) {	
					motorIndex[13] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimmotorlocomotionstairsscl")) {	
					motorIndex[14] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Scores")) {
				if (columnNameVector.get(i).equalsIgnoreCase("visittyp")) {	
					visitScoreIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fiminstrmotorsubscore")) {	
					motorScoreIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fiminstrcognfunctsubscore")) {	
					othersScoreIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fiminstrtotalscore")) {	
					totalScoreIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Comprehension")) {
				if (columnNameVector.get(i).equalsIgnoreCase("visittyp")) {
					comprehensionIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimcogncompehensscl")) {
					comprehensionIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimcogncompehensexpressmodetyp")) {
					comprehensionIndex[2] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Expression")) {
				if (columnNameVector.get(i).equalsIgnoreCase("visittyp")) {
					expressionIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimcognexpressionscl")) {
					expressionIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimcogncompehensexpressmodetyp")) {
					expressionIndex[2] = bufSizeIndex;
				}	
			}
			else if (repeatableGroupName.equalsIgnoreCase("Social Cognition")) {
				if (columnNameVector.get(i).equalsIgnoreCase("visittyp")) {
					socialIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimcognsoclinteractscl")) {
					socialIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimcognprobsolvscl")) {
					socialIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("fimcognmemoryscl")) {
					socialIndex[3] = bufSizeIndex;
				}
			}
			
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int numberMotorScoresMissing = 0;
		boolean motorModeTypMissing = false;
		boolean motorVisitTypMissing = false;
		int numberMotorScoresNotInteger = 0;
		int numberOthersScoresMissing = 0;
		int numberOthersScoresNotInteger = 0;
		int numberComprehensionScoresMissing = 0;
		boolean comprehensionModeTypMissing = false;
		boolean comprehensionVisitTypMissing = false;
		int numberComprehensionScoresNotInteger = 0;
		int numberSocialScoresMissing = 0;
		int numberSocialScoresNotInteger = 0;
		boolean socialVisitTypMissing = false;
		int numberExpressionScoresMissing = 0;
		boolean expressionModeTypMissing = false;
		boolean expressionVisitTypMissing = false;
		int numberExpressionScoresNotInteger = 0;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		Vector<Integer>missingIndices = new Vector<Integer>();
		Vector<Boolean>missingErrors = new Vector<Boolean>();
	    int missing_repeatable_group_id = -1;
	    int missing_group_row_index = -1;
	    Vector<Integer>notIntegerIndices = new Vector<Integer>();
	    int notInteger_repeatable_group_id = -1;
	    int notInteger_group_row_index = -1;
	    Vector<String>notIntegerData = new Vector<String>();
	    String permissibleValueString = "Follow-Up;Inpatient admission;Discharge";
	    int value;
		if (!haveMotor) {
			numberMotorScoresMissing = 15;
			motorVisitTypMissing = true;
			motorModeTypMissing = true;
			for (i = 0; i <= 14; i++) {
				if (motorTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									motorTable.getRepeatableGroupName(),
									motorTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					if ((i == 0) || (i == 13)) {
						table.addOutput(new ValidationOutput(motorTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							    -1, message));	
					}
					else {
					    table.addOutput(new ValidationOutput(motorTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							    -1, message));
					}	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									motorTable.getDataFilePositionMapping(i),
									motorTable.getRepeatableGroupName(),
									motorTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					if ((i == 0) || (i == 13)) {
						table.addOutput(new ValidationOutput(motorTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							    motorTable.getDataFilePositionMapping(i), message));	
					}
					else {
					    table.addOutput(new ValidationOutput(motorTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							    motorTable.getDataFilePositionMapping(i), message));
					}
				}
			} // for (i = 0; i <= 14; i++)			
	    } // if (!haveMotor)
		else { // haveMotor
			missingIndices.clear();
			missingErrors.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < motorIndex.length; j++) { 
		    	i = motorIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberMotorScoresMissing++;
			    		if (j == 0) {
			    			motorVisitTypMissing = true;
			    			missingErrors.add(false);
			    		}
			    		else if (j == 13) {
						    motorModeTypMissing = true;
						    missingErrors.add(false);
						}
			    		else {
			    			missingErrors.add(true);
			    		}
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
						   if ((j != 0) && (j != 13)) {
						       value = Integer.valueOf(data).intValue();
						       calculatedMotorScore += value;
						   }
						   else if (j == 0) {
						   if ((!data.equalsIgnoreCase("Follow-Up")) &&
							   (!data.equalsIgnoreCase("Inpatient admission")) &&
							   (!data.equalsIgnoreCase("Discharge")) ) {
							   rgTable = table.getRepeatableGroupTable(bufRepeatable_group_id.get(i));
							   rgEntries = table.getAllReferences(subject_row_id, 
									   bufRepeatable_group_id.get(i), null);
							   if (rgTable.getDataFilePositionMapping(bufIndex.get(i)) == null) {
								   message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
													guid,
													getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(bufIndex.get(i)));
								   message =
											message
													+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
															data,permissibleValueString);
									table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
											-1, message));   
							   }
							   else {
								   message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
													guid,
													getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
													rgTable.getDataFilePositionMapping(bufIndex.get(i)),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(bufIndex.get(i)));
								   message =
											message
													+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
															data,permissibleValueString);
									table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
											rgTable.getDataFilePositionMapping(bufIndex.get(i)), message));
							   }
						   }
						   }
						}
						catch (NumberFormatException e) {
							numberMotorScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			
		    if (numberMotorScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberMotorScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						if (missingErrors.get(i)) {
						    table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								    -1, message));
						}
						else {
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
								    -1, message));	
						}	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						if (missingErrors.get(i)) {
						    table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								    rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
						}
						else {
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
								    rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));	
						}
		    		}
		    	}
		    } // if (numberMotorScoresMissing >= 1)
		    
		    if (numberMotorScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberMotorScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberMotorScoresNotInteger >= 1)
		    
		    
		    
		} // else haveMotor
		
		if (!haveComprehension) {
			numberComprehensionScoresMissing = 3;
			comprehensionVisitTypMissing = true;
			comprehensionModeTypMissing = true;
			for (i = 0; i <= 2; i++) {
				if (comprehensionTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									comprehensionTable.getRepeatableGroupName(),
									comprehensionTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					if ((i == 0) || (i == 2)) {
						table.addOutput(new ValidationOutput(comprehensionTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
					    table.addOutput(new ValidationOutput(comprehensionTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));
					}	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									comprehensionTable.getDataFilePositionMapping(i),
									comprehensionTable.getRepeatableGroupName(),
									comprehensionTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					if ((i == 0) || (i == 2)) {
						table.addOutput(new ValidationOutput(comprehensionTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								comprehensionTable.getDataFilePositionMapping(i), message));	
					}
					else {
					    table.addOutput(new ValidationOutput(comprehensionTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							comprehensionTable.getDataFilePositionMapping(i), message));
					}
				}
			} // for (i = 0; i <= 2; i++)			
	    } // if (!haveComprehension)
		else { // haveComprehension
			missingIndices.clear();
			missingErrors.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < comprehensionIndex.length; j++) { 
		    	i = comprehensionIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberComprehensionScoresMissing++;
			    		if (j == 0) {
			    			comprehensionVisitTypMissing = true;
			    			missingErrors.add(false);
			    		}
			    		else if (j == 2) {
			    			comprehensionModeTypMissing = true;
			    			missingErrors.add(false);
			    		}
			    		else {
			    			missingErrors.add(true);
			    		}
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
						   if (j == 1) {
						       value = Integer.valueOf(data).intValue();
						       calculatedOthersScore += value;
						   }
						   else if (j == 0) {
						   if ((!data.equalsIgnoreCase("Follow-Up")) &&
							   (!data.equalsIgnoreCase("Inpatient admission")) &&
							   (!data.equalsIgnoreCase("Discharge")) ) {
							   rgTable = table.getRepeatableGroupTable(bufRepeatable_group_id.get(i));
							   rgEntries = table.getAllReferences(subject_row_id, 
									   bufRepeatable_group_id.get(i), null);
							   if (rgTable.getDataFilePositionMapping(bufIndex.get(i)) == null) {
								   message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
													guid,
													getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(bufIndex.get(i)));
								   message =
											message
													+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
															data,permissibleValueString);
									table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
											-1, message));   
							   }
							   else {
								   message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
													guid,
													getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
													rgTable.getDataFilePositionMapping(bufIndex.get(i)),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(bufIndex.get(i)));
								   message =
											message
													+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
															data,permissibleValueString);
									table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
											rgTable.getDataFilePositionMapping(bufIndex.get(i)), message));
							   }
						   }
						   }
						}
						catch (NumberFormatException e) {
							numberComprehensionScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			
		    if (numberComprehensionScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberComprehensionScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						if (missingErrors.get(i)) {
						    table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));
						}
						else {
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									-1, message));	
						}	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						if (missingErrors.get(i)) {
						    table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
						}
						else {
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));	
						}
		    		}
		    	}
		    } // if (numberComprehensionScoresMissing >= 1)
		    
		    if (numberComprehensionScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberComprehensionScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberComprehensionScoresNotInteger >= 1)
		} // else haveComprehension
		
		if (!haveExpression) {
			numberExpressionScoresMissing = 3;
			expressionVisitTypMissing = true;
			expressionModeTypMissing = true;
			for (i = 0; i <= 2; i++) {
				if (expressionTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									expressionTable.getRepeatableGroupName(),
									expressionTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					if ((i == 0) || (i == 2)) {
						table.addOutput(new ValidationOutput(expressionTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
					    table.addOutput(new ValidationOutput(expressionTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));
					}	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									expressionTable.getDataFilePositionMapping(i),
									expressionTable.getRepeatableGroupName(),
									expressionTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					if ((i == 0) || (i == 2)) {
						table.addOutput(new ValidationOutput(expressionTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								expressionTable.getDataFilePositionMapping(i), message));	
					}
					else {
					    table.addOutput(new ValidationOutput(expressionTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							expressionTable.getDataFilePositionMapping(i), message));
					}
				}
			} // for (i = 0; i <= 2; i++)			
	    } // if (!haveExpression)
		else { // haveExpression
			missingIndices.clear();
			missingErrors.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < expressionIndex.length; j++) { 
		    	i = expressionIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberExpressionScoresMissing++;
			    		if (j == 0) {
			    			expressionVisitTypMissing = true;
			    			missingErrors.add(false);
			    		}
			    		else if (j == 2) {
			    			expressionModeTypMissing = true;
			    			missingErrors.add(false);
			    		}
			    		else {
			    			missingErrors.add(true);
			    		}
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
						   if (j == 1) {
						       value = Integer.valueOf(data).intValue();
						       calculatedOthersScore += value;
						   }
						   else if (j == 0) {
						   if ((!data.equalsIgnoreCase("Follow-Up")) &&
							   (!data.equalsIgnoreCase("Inpatient admission")) &&
							   (!data.equalsIgnoreCase("Discharge")) ) {
							   rgTable = table.getRepeatableGroupTable(bufRepeatable_group_id.get(i));
							   rgEntries = table.getAllReferences(subject_row_id, 
									   bufRepeatable_group_id.get(i), null);
							   if (rgTable.getDataFilePositionMapping(bufIndex.get(i)) == null) {
								   message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
													guid,
													getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(bufIndex.get(i)));
								   message =
											message
													+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
															data,permissibleValueString);
									table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
											-1, message));   
							   }
							   else {
								   message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
													guid,
													getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
													rgTable.getDataFilePositionMapping(bufIndex.get(i)),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(bufIndex.get(i)));
								   message =
											message
													+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
															data,permissibleValueString);
									table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
											rgTable.getDataFilePositionMapping(bufIndex.get(i)), message));
							   }
						   }
						   }
						}
						catch (NumberFormatException e) {
							numberExpressionScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			
		    if (numberExpressionScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberExpressionScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						if (missingErrors.get(i)) {
						    table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));
						}
						else {
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									-1, message));	
						}	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						if (missingErrors.get(i)) {
						    table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
						}
						else {
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));	
						}
		    		}
		    	}
		    } // if (numberExpressionScoresMissing >= 1)
		    
		    if (numberExpressionScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberExpressionScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberExpressionScoresNotInteger >= 1)
		} // else haveExpression
		
		if (!haveSocial) {
			numberSocialScoresMissing = 4;
			socialVisitTypMissing = true;
			for (i = 0; i <= 3; i++) {
				if (comprehensionTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									comprehensionTable.getRepeatableGroupName(),
									comprehensionTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					if (i == 0) {
						table.addOutput(new ValidationOutput(comprehensionTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
					    table.addOutput(new ValidationOutput(comprehensionTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));
					}	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									comprehensionTable.getDataFilePositionMapping(i),
									comprehensionTable.getRepeatableGroupName(),
									comprehensionTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					if (i == 0) {
						table.addOutput(new ValidationOutput(comprehensionTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								comprehensionTable.getDataFilePositionMapping(i), message));	
					}
					else {
					    table.addOutput(new ValidationOutput(comprehensionTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							comprehensionTable.getDataFilePositionMapping(i), message));
					}
				}
			} // for (i = 0; i <= 3; i++)			
	    } // if (!haveSocial)
		else { // haveSocial
			missingIndices.clear();
			missingErrors.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < socialIndex.length; j++) { 
		    	i = socialIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberComprehensionScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
						if (j == 0) {
							socialVisitTypMissing = true;
							missingErrors.add(false);
						}
						else {
							missingErrors.add(true);
						}
			    	}
			    	else {
						try {
						   if (j >= 1) {
						       value = Integer.valueOf(data).intValue();
						       calculatedOthersScore += value;
						   }
						   else if (j == 0) {
						   if ((!data.equalsIgnoreCase("Follow-Up")) &&
							   (!data.equalsIgnoreCase("Inpatient admission")) &&
							   (!data.equalsIgnoreCase("Discharge")) ) {
							   rgTable = table.getRepeatableGroupTable(bufRepeatable_group_id.get(i));
							   rgEntries = table.getAllReferences(subject_row_id, 
									   bufRepeatable_group_id.get(i), null);
							   if (rgTable.getDataFilePositionMapping(bufIndex.get(i)) == null) {
								   message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
													guid,
													getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(bufIndex.get(i)));
								   message =
											message
													+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
															data,permissibleValueString);
									table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
											-1, message));   
							   }
							   else {
								   message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
													guid,
													getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
													rgTable.getDataFilePositionMapping(bufIndex.get(i)),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(bufIndex.get(i)));
								   message =
											message
													+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
															data,permissibleValueString);
									table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, bufGroup_row_index.get(i)),
											rgTable.getDataFilePositionMapping(bufIndex.get(i)), message));
							   }
						   }
						   }
						}
						catch (NumberFormatException e) {
							numberSocialScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			
		    if (numberSocialScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberSocialScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						if (missingErrors.get(i)) {
						    table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));
						}
						else {
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									-1, message));	
						}	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						if (missingErrors.get(i)) {
						    table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
						}
						else {
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));	
						}
		    		}
		    	}
		    } // if (numberSocialScoresMissing >= 1)
		    
		    if (numberSocialScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberSocialScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberSocialScoresNotInteger >= 1)
		} // else haveSocial

		if (motorVisitTypMissing) {
			numberMotorScoresMissing -= 1;
		}
		if (motorModeTypMissing) {
        	numberMotorScoresMissing -= 1;
        }
		if (comprehensionVisitTypMissing) {
			numberComprehensionScoresMissing -= 1;
		}
        if (comprehensionModeTypMissing) {
        	numberComprehensionScoresMissing -= 1;
        }
        if (expressionVisitTypMissing) {
        	numberExpressionScoresMissing -= 1;
        }
        if (expressionModeTypMissing) {
        	numberExpressionScoresMissing -= 1;
        }
        if (socialVisitTypMissing) {
        	numberSocialScoresMissing -= 1;
        }
		numberOthersScoresMissing = numberComprehensionScoresMissing + numberExpressionScoresMissing +
        		numberSocialScoresMissing;
        numberOthersScoresNotInteger = numberComprehensionScoresNotInteger + numberExpressionScoresNotInteger +
        		numberSocialScoresNotInteger;
        numberScoresMissing = numberMotorScoresMissing + numberOthersScoresMissing;
        numberScoresNotInteger = numberMotorScoresNotInteger + numberOthersScoresNotInteger;
        calculatedTotalScore = calculatedMotorScore + calculatedOthersScore;
        
        if (!haveScores) {
        	if (scoresTable.getDataFilePositionMapping(0) == null) {
        		message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								scoresTable.getRepeatableGroupName(),
								scoresTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
						-1, message));	
        	}
        	else {
        		message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								scoresTable.getDataFilePositionMapping(0),
								scoresTable.getRepeatableGroupName(),
								scoresTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(scoresTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
						scoresTable.getDataFilePositionMapping(0), message));
        	}
   
            if ((numberMotorScoresMissing == 0)	&& (numberMotorScoresNotInteger == 0)) {
            	if (scoresTable.getDataFilePositionMapping(1) == null) {
            		message =
    						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
    								guid,
    								getRawDataRow(subject_row_id, 0),
    								scoresTable.getRepeatableGroupName(),
    								scoresTable.getColumnName(1));
    	
    				message =
    						message
    								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
    				table.addOutput(new ValidationOutput(scoresTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
    						-1, message));	
            	}
            	else {
            		message =
    						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
    								guid,
    								getRawDataRow(subject_row_id, 0),
    								scoresTable.getDataFilePositionMapping(1),
    								scoresTable.getRepeatableGroupName(),
    								scoresTable.getColumnName(1));
    	
    				message =
    						message
    								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
    				table.addOutput(new ValidationOutput(scoresTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
    						scoresTable.getDataFilePositionMapping(1), message));
            	}
            }
            if ((numberOthersScoresMissing == 0)	&& (numberOthersScoresNotInteger == 0)) {
            	if (scoresTable.getDataFilePositionMapping(2) == null) {
            		message =
    						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
    								guid,
    								getRawDataRow(subject_row_id, 0),
    								scoresTable.getRepeatableGroupName(),
    								scoresTable.getColumnName(2));
    	
    				message =
    						message
    								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
    				table.addOutput(new ValidationOutput(scoresTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
    						-1, message));	
            	}
            	else {
            		message =
    						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
    								guid,
    								getRawDataRow(subject_row_id, 0),
    								scoresTable.getDataFilePositionMapping(2),
    								scoresTable.getRepeatableGroupName(),
    								scoresTable.getColumnName(2));
    	
    				message =
    						message
    								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
    				table.addOutput(new ValidationOutput(scoresTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
    						scoresTable.getDataFilePositionMapping(2), message));
            	}
            }
            if ((numberScoresMissing == 0)	&& (numberScoresNotInteger == 0)) {
            	if (scoresTable.getDataFilePositionMapping(3) == null) {
            		message =
    						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
    								guid,
    								getRawDataRow(subject_row_id, 0),
    								scoresTable.getRepeatableGroupName(),
    								scoresTable.getColumnName(3));
    	
    				message =
    						message
    								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
    				table.addOutput(new ValidationOutput(scoresTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
    						-1, message));	
            	}
            	else {
            		message =
    						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
    								guid,
    								getRawDataRow(subject_row_id, 0),
    								scoresTable.getDataFilePositionMapping(3),
    								scoresTable.getRepeatableGroupName(),
    								scoresTable.getColumnName(3));
    	
    				message =
    						message
    								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
    				table.addOutput(new ValidationOutput(scoresTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
    						scoresTable.getDataFilePositionMapping(3), message));
            	}
            }
        } // if (!haveScores)
        else { // haveScores
        	if (motorScoreIndex >= 0) {
				data = bufDataVector.get(motorScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(motorScoreIndex);
				group_row_index = bufGroup_row_index.get(motorScoreIndex);
				index = bufIndex.get(motorScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberMotorScoresMissing == 0) && (numberMotorScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedMotorScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedMotorScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
				    }
				}
			    else if ((numberMotorScoresMissing >= 1) || (numberMotorScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualMotorScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualMotorScore > -1) {
		    	if (actualMotorScore != calculatedMotorScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualMotorScore), String.valueOf(calculatedMotorScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualMotorScore), String.valueOf(calculatedMotorScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		    
        	if (othersScoreIndex >= 0) {
				data = bufDataVector.get(othersScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(othersScoreIndex);
				group_row_index = bufGroup_row_index.get(othersScoreIndex);
				index = bufIndex.get(othersScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberOthersScoresMissing == 0) && (numberOthersScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedOthersScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedOthersScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
				    }
				}
			    else if ((numberOthersScoresMissing >= 1) || (numberOthersScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualOthersScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualOthersScore > -1) {
		    	if (actualOthersScore != calculatedOthersScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualOthersScore), String.valueOf(calculatedOthersScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualOthersScore), String.valueOf(calculatedOthersScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
        } // else haveScores
	}
	
	
	
	private void validateBESS(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3, int subject_row_id, 
			DataStructureTable table) throws Exception {
		// Structure Name:	BESS
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBICD238VCK
		// group_column_index = 1 group_column_name = subjectidnum data = 1198
		// group_column_index = 2 group_column_name = ageyrs data = 22
		// group_column_index = 3 group_column_name = visitdate data = 2014-11-25T00:00:00Z
		// group_column_index = 4 group_column_name = sitename data = null
		// group_column_index = 5 group_column_name = dayssincebaseline data = null
		// group_column_index = 6 group_column_name = casecontrlind data = null
		// group_column_index = 7 group_column_name = generalnotestxt data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Balance Error Scoring Test
		// rgTable.getSize() = 10
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 10
		// group_column_index = 0 group_column_name = bessdbllegfirmerrorct data = 0
		// group_column_index = 1 group_column_name = besssgllegfirmerrorct data = 0
		// group_column_index = 2 group_column_name = besstandemfirmerrorct data = 1
		// group_column_index = 3 group_column_name = besstotalfirmerrorct data = 1
		// group_column_index = 4 group_column_name = bessdbllegfoamerrorct data = 0
		// group_column_index = 5 group_column_name = besssgllegfoamerrorct data = 8
		// group_column_index = 6 group_column_name = besstandemstncfoamsrfcerrorct data = 0
		// group_column_index = 7 group_column_name = besstotalfoamerrorct data = 8
		// group_column_index = 8 group_column_name = besstotalerrorct data = 9
		// group_column_index = 9 group_column_name = lattyp data = Left
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = contexttype data = Other, specify
		// group_column_index = 1 group_column_name = contexttypeoth data = Baseline
		// group_column_index = 2 group_column_name = datasource data = null
		// group_column_index = 3 group_column_name = datasourceoth data = null
		
		Vector<Vector<String>> columnNameVector2;
        Vector<Vector<String>> dataVector2;
        Vector<String> columnNameVector;
        Vector<String> dataVector;
        int i, j;
        String message;
        Vector<String> bufColumnNameVector = new Vector<String>();
        Vector<String> bufDataVector = new Vector<String>();
        Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
        Vector<Integer> bufGroup_row_index = new Vector<Integer>();
        Vector<Integer> bufIndex = new Vector<Integer>();
        Vector<String> bufRepeatableGroupName = new Vector<String>();
        String repeatableGroupName;
        String guid = null;
        int group_row_index = -1;
        int repeatable_group_id;
        RepeatableGroupTable rgTable = null;
        ArrayList<Integer> rgEntries = null;
        int index = -1;
        String data;
        boolean haveMain = true;
        RepeatableGroupTable mainTable = null;
        int bufSizeIndex = -1;
        int guidIndex =-1;
        int ageyrsIndex = -1;
        boolean haveBalance = true;
        RepeatableGroupTable balanceTable = null;
        int firmIndex[] = new int[3];
        for (i = 0; i < 3; i++) {
        	firmIndex[i] = -1;
        }
        int totalFirmErrorCtIndex = 1;
        int foamIndex[] = new int[3];
        for (i = 0; i < 3; i++) {
        	foamIndex[i] = -1;
        }
        int totalFoamErrorCtIndex = -1;
        int totalErrorCtIndex = -1;
        int latTypIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Balance Error Scoring Test")) {
					haveBalance = false;
					balanceTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		      // System.out.println("group_column_index = " + i +
		      // " group_column_name = " + columnNameVector.get(i) +
		      // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Balance Error Scoring Test")) {
				if (columnNameVector.get(i).equalsIgnoreCase("bessdbllegfirmerrorct")) {
					firmIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("besssgllegfirmerrorct")) {
					firmIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("besstandemfirmerrorct")) {
					firmIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("besstotalfirmerrorct")) {
					totalFirmErrorCtIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bessdbllegfoamerrorct")) {
					foamIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("besssgllegfoamerrorct")) {
					foamIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("besstandemstncfoamsrfcerrorct")) {
					foamIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("besstotalfoamerrorct")) {
					totalFoamErrorCtIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("besstotalerrorct")) {
					totalErrorCtIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("lattyp")) {
					latTypIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 8) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "8 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "8 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalFirmScore = 0;
		int actualTotalFirmScore = -1;
		int calculatedTotalFoamScore = 0;
		int actualTotalFoamScore = -1;
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberFirmScoresMissing = 0;
		int numberFirmScoresNotInteger = 0;
		int numberFoamScoresMissing = 0;
		int numberFoamScoresNotInteger = 0;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveBalance) {
			for (i = 0; i <= 2; i++) {
				if (balanceTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									balanceTable.getRepeatableGroupName(),
									balanceTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(balanceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									balanceTable.getDataFilePositionMapping(i),
									balanceTable.getRepeatableGroupName(),
									balanceTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(balanceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							balanceTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 2; i++)	
			
			for (i = 4; i <= 6; i++) {
				if (balanceTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									balanceTable.getRepeatableGroupName(),
									balanceTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(balanceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									balanceTable.getDataFilePositionMapping(i),
									balanceTable.getRepeatableGroupName(),
									balanceTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(balanceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							balanceTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 4; i <= 6; i++)
			
			if (balanceTable.getDataFilePositionMapping(9) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								balanceTable.getRepeatableGroupName(),
								balanceTable.getColumnName(9));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(balanceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								balanceTable.getDataFilePositionMapping(9),
								balanceTable.getRepeatableGroupName(),
								balanceTable.getColumnName(9));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(balanceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						balanceTable.getDataFilePositionMapping(9), message));
			}
	    } // if (!haveBalance)
		else { // haveBalance
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
			for (j = 0; j < firmIndex.length; j++) { 
		    	i = firmIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberFirmScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedTotalFirmScore += Integer.valueOf(data).intValue();;
						}
						catch (NumberFormatException e) {
							numberFirmScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			for (j = 0; j < foamIndex.length; j++) { 
		    	i = foamIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberFoamScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedTotalFoamScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberFoamScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			numberScoresMissing = numberFirmScoresMissing + numberFoamScoresMissing;
			numberScoresNotInteger = numberFirmScoresNotInteger + numberFoamScoresNotInteger;
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalFirmErrorCtIndex >= 0) {
				data = bufDataVector.get(totalFirmErrorCtIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalFirmErrorCtIndex);
				group_row_index = bufGroup_row_index.get(totalFirmErrorCtIndex);
				index = bufIndex.get(totalFirmErrorCtIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberFirmScoresMissing == 0) && (numberFirmScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalFirmScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalFirmScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberFirmScoresMissing >= 1) || (numberFirmScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalFirmScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));  
						}
					}
				}
			}
		    
		    if (actualTotalFirmScore > -1) {
		    	if (actualTotalFirmScore != calculatedTotalFirmScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalFirmScore), String.valueOf(calculatedTotalFirmScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalFirmScore), String.valueOf(calculatedTotalFirmScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    if (totalFoamErrorCtIndex >= 0) {
				data = bufDataVector.get(totalFoamErrorCtIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalFoamErrorCtIndex);
				group_row_index = bufGroup_row_index.get(totalFoamErrorCtIndex);
				index = bufIndex.get(totalFoamErrorCtIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberFoamScoresMissing == 0) && (numberFoamScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalFoamScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalFoamScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
				    }
				}
			    else if ((numberFoamScoresMissing >= 1) || (numberFoamScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalFoamScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualTotalFoamScore > -1) {
		    	if (actualTotalFoamScore != calculatedTotalFoamScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalFoamScore), String.valueOf(calculatedTotalFoamScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalFoamScore), String.valueOf(calculatedTotalFoamScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    calculatedTotalScore = calculatedTotalFirmScore + calculatedTotalFoamScore;
		    
		    if (totalErrorCtIndex >= 0) {
				data = bufDataVector.get(totalErrorCtIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalErrorCtIndex);
				group_row_index = bufGroup_row_index.get(totalErrorCtIndex);
				index = bufIndex.get(totalErrorCtIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    if (latTypIndex >= 0) {
				data = bufDataVector.get(latTypIndex);
				repeatable_group_id = bufRepeatable_group_id.get(latTypIndex);
				group_row_index = bufGroup_row_index.get(latTypIndex);
				index = bufIndex.get(latTypIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
				    if (numberWarnings < 1000) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
				    	}
				    	else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
				    	}
						numberWarnings++;
				    } // if (numberWarnings < 1000)
				    }
				}
		} // else haveBALANCE
	}
	
	private void validateMDS_UPDRS(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3, int subject_row_id, 
			DataStructureTable table) throws Exception {
		// Name:	MDS_UPDRS
		// table.getColumnCount = 7
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Part I: nM-EDL
		// rgTable.getSize() = 16
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 16
		// group_column_index = 0 group_column_name = mdsupdrsprimrysrcinfotyp data = Patient
		// group_column_index = 1 group_column_name = mdsupdrsrcntcogimprmntscore data = 0
		// group_column_index = 2 group_column_name = mdsupdrshallucpsychosscore data = 0
		// group_column_index = 3 group_column_name = mdsupdrsdrpssmoodscore data = 0
		// group_column_index = 4 group_column_name = mdsupdrsanxsmoodscore data = 0
		// group_column_index = 5 group_column_name = mdsupdrsapathyscore data = 0
		// group_column_index = 6 group_column_name = mdsupdrsdopmndysregsyndscore data = 0
		// group_column_index = 7 group_column_name = mdsupdrsqstnnreinfoprovdrtyp data = Patient
		// group_column_index = 8 group_column_name = mdsupdrssleepprobscore data = 0
		// group_column_index = 9 group_column_name = mdsupdrsdaytmsleepscore data = 0
		// group_column_index = 10 group_column_name = mdsupdrspainothrsensscore data = 0
		// group_column_index = 11 group_column_name = mdsupdrsurnryprobscore data = 0
		// group_column_index = 12 group_column_name = mdsupdrsconstipprobscore data = 0
		// group_column_index = 13 group_column_name = mdsupdrsliteheadstndngscore data = 0
		// group_column_index = 14 group_column_name = mdsupdrsfatiguescore data = 0
		// group_column_index = 15 group_column_name = mdsupdrs_partiscore data = 0
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 0
		// rgEntries.size() = 0
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Part III: Motor Examination
		// rgTable.getSize() = 41
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 41
		// group_column_index = 0 group_column_name = mdsupdrsptntprknsnmedind data = No
		// group_column_index = 1 group_column_name = mdsupdrsptclinstateprknsnmdind data = null
		// group_column_index = 2 group_column_name = mdsupdrsptntuseldopaind data = No
		// group_column_index = 3 group_column_name = mdsupdrslstldopadosetm data = null
		// group_column_index = 4 group_column_name = mdsupdrsfreeflowspeechscore data = 0
		// group_column_index = 5 group_column_name = mdsupdrsfacialexprscore data = 0
		// group_column_index = 6 group_column_name = mdsupdrsneckrigidscore data = 0
		// group_column_index = 7 group_column_name = mdsupdrsruerigidscore data = 0
		// group_column_index = 8 group_column_name = mdsupdrsluerigidscore data = 0
		// group_column_index = 9 group_column_name = mdsupdrsrlerigidscore data = 0
		// group_column_index = 10 group_column_name = mdsupdrsllerigidscore data = 0
		// group_column_index = 11 group_column_name = mdsupdrsfingertppngrtehndscore data = 0
		// group_column_index = 12 group_column_name = mdsupdrsfingertppnglfthndscore data = 0
		// group_column_index = 13 group_column_name = mdsupdrsrtehndscore data = 0
		// group_column_index = 14 group_column_name = mdsupdrslfthndscore data = 0
		// group_column_index = 15 group_column_name = mdsupdrsprontsupnrthndmvmtscr data = 0
		// group_column_index = 16 group_column_name = pronatsupinlfthndmvmntscore data = 0
		// group_column_index = 17 group_column_name = rtefttoetppngscore data = 0
		// group_column_index = 18 group_column_name = mdsupdrslftfttoetppngscore data = 0
		// group_column_index = 19 group_column_name = mdsupdrslegagiltyrtelegscore data = 0
		// group_column_index = 20 group_column_name = mdsupdrslegagiltylftlegscore data = 0
		// group_column_index = 21 group_column_name = mdsupdrsarisingfrmchrscore data = 0
		// group_column_index = 22 group_column_name = mdsupdrsgaitscore data = 0
		// group_column_index = 23 group_column_name = mdsupdrsfreezinggaitscore data = 0
		// group_column_index = 24 group_column_name = mdsupdrspostrlstabltyscore data = 0
		// group_column_index = 25 group_column_name = mdsupdrsposturescore data = 0
		// group_column_index = 26 group_column_name = mdsupdrsglblspontntymvmntscore data = 0
		// group_column_index = 27 group_column_name = mdsupdrspostrltremorrthndscore data = 0
		// group_column_index = 28 group_column_name = mdsupdrspostrltremrlfthndscore data = 0
		// group_column_index = 29 group_column_name = mdsupdrskinetictremrrthndscore data = 0
		// group_column_index = 30 group_column_name = mdsupdrskinetictremrlfthndscr data = 0
		// group_column_index = 31 group_column_name = mdsupdrsresttremorampruescore data = 0
		// group_column_index = 32 group_column_name = mdsupdrsresttremorampluescore data = 0
		// group_column_index = 33 group_column_name = mdsupdrsresttremoramprlescore data = 0
		// group_column_index = 34 group_column_name = mdsupdrsresttremorampllescore data = 0
		// group_column_index = 35 group_column_name = mdsupdrsresttremramplipjawscr data = 0
		// group_column_index = 36 group_column_name = mdsupdrsconstncyresttremrscore data = 0
		// group_column_index = 37 group_column_name = mdsupdrsdyskchreadystnaprsscr data = No
		// group_column_index = 38 group_column_name = mdsupdrsmvmntintrfrncescore data = null
		// group_column_index = 39 group_column_name = mdsupdrshoehnyahrstagescore data = 0
		// group_column_index = 40 group_column_name = mdsupdrs_partiiiscore data = 0
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = Part IV: Motor Complications
		// rgTable.getSize() = 16
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 16
		// group_column_index = 0 group_column_name = mdsupdrstmspntdyskscore data = 0
		// group_column_index = 1 group_column_name = mdsupdrsttlhrawkdysknum data = null
		// group_column_index = 2 group_column_name = mdsupdrsttlhrdysknum data = null
		// group_column_index = 3 group_column_name = mdsupdrsprcntdyskval data = null
		// group_column_index = 4 group_column_name = mdsupdrsfuncimpactdyskscore data = 0
		// group_column_index = 5 group_column_name = mdsupdrsttlhrawkoffstatenum data = null
		// group_column_index = 6 group_column_name = mdsupdrsttlhroffnum data = null
		// group_column_index = 7 group_column_name = mdsupdrsprcntoffval data = null
		// group_column_index = 8 group_column_name = mdsupdrstmspntoffstatescore data = 0
		// group_column_index = 9 group_column_name = mdsupdrsfuncimpactfluctscore data = 0
		// group_column_index = 10 group_column_name = mdsupdrscomplxtymtrfluctscore data = 0
		// group_column_index = 11 group_column_name = mdsupdrspainfloffstatdystnascr data = 0
		// group_column_index = 12 group_column_name = mdsupdrsttlhroffdemndystnianum data = null
		// group_column_index = 13 group_column_name = mdsupdrsttlhroffwdystnianum data = null
		// group_column_index = 14 group_column_name = mdsupdrsprcntoffdystniaval data = null
		// group_column_index = 15 group_column_name = mdsupdrs_partivscore data = 0
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = Part II: M-EDL
		// rgTable.getSize() = 14
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 14
		// group_column_index = 0 group_column_name = mdsupdrsspeechscore data = 0
		// group_column_index = 1 group_column_name = mdsupdrsslivadroolscore data = 0
		// group_column_index = 2 group_column_name = mdsupdrschwngswllwngscore data = 0
		// group_column_index = 3 group_column_name = mdsupdrseatingtskscore data = 0
		// group_column_index = 4 group_column_name = mdsupdrsdressingscore data = 0
		// group_column_index = 5 group_column_name = mdsupdrshygienescore data = 0
		// group_column_index = 6 group_column_name = mdsupdrshandwritingscore data = 0
		// group_column_index = 7 group_column_name = mdsupdrshobbieothractscore data = 0
		// group_column_index = 8 group_column_name = mdsupdrsturngbedscore data = 0
		// group_column_index = 9 group_column_name = mdsupdrstremorscore data = 0
		// group_column_index = 10 group_column_name = mdsupdrsgttngoutbedscore data = 0
		// group_column_index = 11 group_column_name = mdsupdrswlkngbalancescore data = 0
		// group_column_index = 12 group_column_name = mdsupdrsfreezingscore data = 0
		// group_column_index = 13 group_column_name = mdsupdrs_partiiscore data = 0
		// repeatable_group_id = 5
		// rgTable.getRepeatableGroupName() = Required Fields
		// rgTable.getSize() = 7
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 7
		// group_column_index = 0 group_column_name = sitename data = Brigham and Women's
		// group_column_index = 1 group_column_name = visittyppdbp data = 6 months
		// group_column_index = 2 group_column_name = visitdate data = 2015-11-19T00:00:00Z
		// group_column_index = 3 group_column_name = guid data = PDTT264VT6
		// group_column_index = 4 group_column_name = ageyrs data = 12
		// group_column_index = 5 group_column_name = ageremaindrmonths data = 2
		// group_column_index = 6 group_column_name = ageval data = 770
		// repeatable_group_id = 6
		// rgTable.getRepeatableGroupName() = Total Score
		// rgTable.getSize() = 1
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 1
		// group_column_index = 0 group_column_name = mdsupdrs_totalscore data = 0
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveRequired = true;
	    RepeatableGroupTable requiredTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    int ageremaindrmonthsIndex = -1;
	    int agevalIndex = -1;
	    boolean havePart1 = true;
	    RepeatableGroupTable part1Table = null;
	    int part1With555Index[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	part1With555Index[i] = -1;
	    }
	    int part1No555Index[] = new int[7];
	    for (i = 0; i < 7; i++) {
	    	part1No555Index[i] = -1;
	    }
	    int part1OtherIndex[] = new int[2];
	    for (i = 0; i < 2; i++) {
	    	part1OtherIndex[i] = -1;
	    }
	    int part1ScoreIndex = -1;
	    boolean havePart2  = true;
	    RepeatableGroupTable part2Table = null;
	    int part2Index[] = new int[13];
	    for (i = 0; i < 13; i++) {
	    	part2Index[i] = -1;
	    }
	    int part2ScoreIndex = -1;
	    boolean havePart3 = true;
	    RepeatableGroupTable part3Table = null;
	    int part3With555Index[] = new int[33];
	    for (i = 0; i < 33; i++) {
	    	part3With555Index[i] = -1;
	    }
	    int part3ScoreIndex = -1;
	    boolean havePart4 = true;
	    RepeatableGroupTable part4Table = null;
	    int part4With555Index[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	part4With555Index[i] = -1;
	    }
	    int part4ScoreIndex = -1;
	    boolean haveTotal = true;
        RepeatableGroupTable totalTable = null;
        int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Required Fields")) {
					haveRequired = false;
					requiredTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Part I: nM-EDL")) {
					havePart1 = false;
					part1Table = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Part II: M-EDL")) {
					havePart2 = false;
					part2Table = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Part III: Motor Examination")) {
					havePart3 = false;
					part3Table = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Part IV: Motor Complications")) {
					havePart4 = false;
					part4Table = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Total Score")) {
					haveTotal = false;
					totalTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		       // System.out.println("group_column_index = " + i +
		       // " group_column_name = " + columnNameVector.get(i) +
		      // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Required Fields")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageremaindrmonths")) {
					ageremaindrmonthsIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageval")) {
					agevalIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Part I: nM-EDL")) {
			    if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsrcntcogimprmntscore")) {
			    	part1With555Index[0] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrshallucpsychosscore")) {
			    	part1With555Index[1] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsdrpssmoodscore")) {
			    	part1With555Index[2] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsanxsmoodscore")) {
			    	part1With555Index[3] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsapathyscore")) {
			    	part1With555Index[4] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsdopmndysregsyndscore")) {
			    	part1With555Index[5] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrssleepprobscore")) {
			    	part1No555Index[0] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsdaytmsleepscore")) {
			    	part1No555Index[1] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrspainothrsensscore")) {
			    	part1No555Index[2] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsurnryprobscore")) {
			    	part1No555Index[3] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsconstipprobscore")) {
			    	part1No555Index[4] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsliteheadstndngscore")) {
			    	part1No555Index[5] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsfatiguescore")) {
			    	part1No555Index[6] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsprimrysrcinfotyp")) {
			    	part1OtherIndex[0] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsqstnnreinfoprovdrtyp")) {
			    	part1OtherIndex[1] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrs_partiscore")) {
			    	part1ScoreIndex = bufSizeIndex;
			    }
			}
			else if (repeatableGroupName.equalsIgnoreCase("Part II: M-EDL")) {
				if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsspeechscore")) {
			    	part2Index[0] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsslivadroolscore")) {
			    	part2Index[1] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrschwngswllwngscore")) {
			    	part2Index[2] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrseatingtskscore")) {
			    	part2Index[3] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsdressingscore")) {
			    	part2Index[4] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrshygienescore")) {
			    	part2Index[5] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrshandwritingscore")) {
			    	part2Index[6] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrshobbieothractscore")) {
			    	part2Index[7] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsturngbedscore")) {
			    	part2Index[8] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrstremorscore")) {
			    	part2Index[9] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsgttngoutbedscore")) {
			    	part2Index[10] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrswlkngbalancescore")) {
			    	part2Index[11] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsfreezingscore")) {
			    	part2Index[12] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrs_partiiscore")) {
			    	part2ScoreIndex = bufSizeIndex;
			    }
			}
			else if (repeatableGroupName.equalsIgnoreCase("Part III: Motor Examination")) {
				if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsfreeflowspeechscore")) {
			    	part3With555Index[0] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsfacialexprscore")) {
			    	part3With555Index[1] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsneckrigidscore")) {
			    	part3With555Index[2] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsruerigidscore")) {
			    	part3With555Index[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsluerigidscore")) {
			    	part3With555Index[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsrlerigidscore")) {
			    	part3With555Index[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsllerigidscore")) {
			    	part3With555Index[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsfingertppngrtehndscore")) {
			    	part3With555Index[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsfingertppnglfthndscore")) {
			    	part3With555Index[8] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsrtehndscore")) {
			    	part3With555Index[9] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrslfthndscore")) {
			    	part3With555Index[10] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsprontsupnrthndmvmtscr")) {
			    	part3With555Index[11] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pronatsupinlfthndmvmntscore")) {
			    	part3With555Index[12] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rtefttoetppngscore")) {
			    	part3With555Index[13] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrslftfttoetppngscore")) {
			    	part3With555Index[14] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrslegagiltyrtelegscore")) {
			    	part3With555Index[15] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrslegagiltylftlegscore")) {
			    	part3With555Index[16] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsarisingfrmchrscore")) {
			    	part3With555Index[17] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsgaitscore")) {
			    	part3With555Index[18] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsfreezinggaitscore")) {
			    	part3With555Index[19] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrspostrlstabltyscore")) {
			    	part3With555Index[20] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsposturescore")) {
			    	part3With555Index[21] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsglblspontntymvmntscore")) {
			    	part3With555Index[22] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrspostrltremorrthndscore")) {
			    	part3With555Index[23] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrspostrltremrlfthndscore")) {
			    	part3With555Index[24] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrskinetictremrrthndscore")) {
			    	part3With555Index[25] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrskinetictremrlfthndscr")) {
			    	part3With555Index[26] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsresttremorampruescore")) {
			    	part3With555Index[27] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsresttremorampluescore")) {
			    	part3With555Index[28] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsresttremoramprlescore")) {
			    	part3With555Index[29] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsresttremorampllescore")) {
			    	part3With555Index[30] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsresttremramplipjawscr")) {
			    	part3With555Index[31] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsconstncyresttremrscore")) {
			    	part3With555Index[32] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrs_partiiiscore")) {
			    	part3ScoreIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Part IV: Motor Complications")) {
				if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrstmspntdyskscore")) {
			    	part4With555Index[0] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsfuncimpactdyskscore")) {
			    	part4With555Index[1] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrstmspntoffstatescore")) {
			    	part4With555Index[2] = bufSizeIndex;
			    }
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrsfuncimpactfluctscore")) {
			    	part4With555Index[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrscomplxtymtrfluctscore")) {
			    	part4With555Index[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrspainfloffstatdystnascr")) {
			    	part4With555Index[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrs_partivscore")) {
			    	part4ScoreIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Total Score")) {
				if (columnNameVector.get(i).equalsIgnoreCase("mdsupdrs_totalscore")) {
			    	totalScoreIndex = bufSizeIndex;	
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
		int ageYears = -1;
    	if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
					numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				try {
					ageYears = Integer.valueOf(ageData).intValue();
					if (ageYears < 18) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "18 or more years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "18 or more years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
					}
				}
				catch (NumberFormatException e) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,ageData);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,ageData);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
				}
				
		  } // if (ageyrsIndex > -1)
		
		int ageRemainderMonths = -1;
		if (ageremaindrmonthsIndex >= 0) {
			String ageData = bufDataVector.get(ageremaindrmonthsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageremaindrmonthsIndex);
			group_row_index = bufGroup_row_index.get(ageremaindrmonthsIndex);
			index = bufIndex.get(ageremaindrmonthsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
						    -1, message));
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
					}
					numberWarnings++;
				}
			}	
			else {
				try {
					ageRemainderMonths = Integer.valueOf(ageData).intValue();
					if ((ageRemainderMonths < 0) || (ageRemainderMonths > 11)) {
						if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
			
								message =
										message
												+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
												  ageData, "0 to 11 remainder months");
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message));	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
			
								message =
										message
												+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
												  ageData, "0 to 11 remainder months");
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message));
							}
							numberWarnings++;
						}
					}
				}
				catch (NumberFormatException e) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,ageData);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,ageData);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageremaindrmonthsIndex >= 0)
		
		    int calculatedMonths = -1;
		    if ((ageYears >= 0) && (ageRemainderMonths >= 0) && (ageRemainderMonths <= 11)) {
		    	calculatedMonths = ageYears * 12 + ageRemainderMonths;
		    }
		    
		    int ageMonths = -1;
			if (agevalIndex >= 0) {
				String ageData = bufDataVector.get(agevalIndex);
				repeatable_group_id = bufRepeatable_group_id.get(agevalIndex);
				group_row_index = bufGroup_row_index.get(agevalIndex);
				index = bufIndex.get(agevalIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
						(ageData.trim().isEmpty())) {
					if (numberWarnings < 1000) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
						numberWarnings++;
					}
				}	
				else {
					try {
						ageMonths = Integer.valueOf(ageData).intValue();
						if ((calculatedMonths >= 0) && (ageMonths != calculatedMonths)) {
							if (numberWarnings < 1000) {
						        if (rgTable.getDataFilePositionMapping(index) == null) {
						        	message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
			
									message =
											message
													+ String.format(ApplicationsConstants.WARNING_INCORRECT_CALCULATION,
															String.valueOf(ageMonths), 
															String.valueOf(calculatedMonths));
									
									table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											-1, message));	
						        }
						        else {
									message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getDataFilePositionMapping(index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
			
									message =
											message
													+ String.format(ApplicationsConstants.WARNING_INCORRECT_CALCULATION,
															String.valueOf(ageMonths), 
															String.valueOf(calculatedMonths));
									
									table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index), message));
						        }
							}
						}
					}
					catch (NumberFormatException ex) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,ageData);
							
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,ageData);
							
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
					}
				}
			  } // if (agevalIndex >= 0)
		
			int numberScoresMissing = 0;
			int numberOtherMissing = 0;
			int numberMissing = 0;
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    Vector<String>variables555 = new Vector<String>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    int numberScoresNotInteger = 0;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
		    int calculatedPart1Sum = 0;
		    int values555 = 0;
		    boolean goodPart1Sum = true;
		    int actualPart1Sum = -1;
			if (!havePart1) {
				goodPart1Sum = false;
				for (i = 0; i <= 14; i++) {
					if (numberWarnings < 1000) {
					    if (part1Table.getDataFilePositionMapping(i) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											part1Table.getRepeatableGroupName(),
											part1Table.getColumnName(i));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(part1Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
									-1, message));
					    }
					    else {
					    	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											part1Table.getDataFilePositionMapping(i),
											part1Table.getRepeatableGroupName(),
											part1Table.getColumnName(i));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(part1Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
									part1Table.getDataFilePositionMapping(i), message));	
					    }
					numberWarnings++;
					} // if (numberWarnings < 1000)
				} // for (i = 0; i <= 14; i++)			
		    } // if (!havePart1)
			else { // havePart1
				for (j = 0; j < part1With555Index.length; j++) { 
			    	i = part1With555Index[j];
			    	if (i >= 0) {
			    		data = bufDataVector.get(i);
				    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty())) {
				    		goodPart1Sum = false;
				    		numberScoresMissing++;
				    		missingIndices.add(bufIndex.get(i));
						    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
							missing_group_row_index = bufGroup_row_index.get(i);
				    	}
				    	else {
							try {
						       value = Integer.valueOf(data).intValue();
						       if (value != 555) {
			            	        calculatedPart1Sum += value;
			 
					    		}
					    		else {
					    			goodPart1Sum = false;
					    			values555++;
					    			variables555.add(bufColumnNameVector.get(i));
					    		}
							}
							catch (NumberFormatException e) {
								goodPart1Sum = false;
								numberScoresNotInteger++;
							    notIntegerIndices.add(bufIndex.get(i));
							    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
								notInteger_group_row_index = bufGroup_row_index.get(i);
								notIntegerData.add(data);
							}
						}
			        }
			    }
				
				for (j = 0; j < part1No555Index.length; j++) { 
			    	i = part1No555Index[j];
			    	if (i >= 0) {
			    		data = bufDataVector.get(i);
				    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty())) {
				    		numberScoresMissing++;
				    		missingIndices.add(bufIndex.get(i));
						    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
							missing_group_row_index = bufGroup_row_index.get(i);
				    	}
				    	else {
							try {
						       calculatedPart1Sum += Integer.valueOf(data).intValue();
							}
							catch (NumberFormatException e) {
								goodPart1Sum = false;
								numberScoresNotInteger++;
							    notIntegerIndices.add(bufIndex.get(i));
							    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
								notInteger_group_row_index = bufGroup_row_index.get(i);
								notIntegerData.add(data);
							}
						}
			        }
			    }
				
				for (j = 0; j < part1OtherIndex.length; j++) { 
			    	i = part1OtherIndex[j];
			    	if (i >= 0) {
			    		data = bufDataVector.get(i);
				    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty())) {
				    		numberOtherMissing++;
				    		missingIndices.add(bufIndex.get(i));
						    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
							missing_group_row_index = bufGroup_row_index.get(i);
				    	}
			        }
			    }
				
				numberMissing = numberScoresMissing + numberOtherMissing;
			    
			    if (numberMissing >= 1) {
			    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							missing_repeatable_group_id, null);
			    	for (i = 0; i < numberMissing; i++) {
			    		if (numberWarnings < 1000) {
			    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
			    				message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, missing_group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(missingIndices.get(i)));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
										-1, message));	
			    			}
			    			else {
					    		message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, missing_group_row_index),
												rgTable.getDataFilePositionMapping(missingIndices.get(i)),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(missingIndices.get(i)));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
			    			}
						numberWarnings++;
			    		} // if (numberWarnings < 1000)
			    	}
			    } // if (numberMissing >= 1)
			    
			    if (numberScoresNotInteger >= 1) {
			    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							notInteger_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresNotInteger; i++) {
			    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
			    		}
			    	}
			    } // if (numberScoresNotInteger >= 1)
			    
			    if (part1ScoreIndex >= 0) {
					data = bufDataVector.get(part1ScoreIndex);
					repeatable_group_id = bufRepeatable_group_id.get(part1ScoreIndex);
					group_row_index = bufGroup_row_index.get(part1ScoreIndex);
					index = bufIndex.get(part1ScoreIndex);
					rgTable = table.getRepeatableGroupTable(repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
					if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
						if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0) && (values555 == 0)) {
					    if (numberWarnings < 1000) {
					    	if (rgTable.getDataFilePositionMapping(index) == null) {
					    		message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedPart1Sum));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message));	
					    	}
					    	else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedPart1Sum));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message));
					    	}
							numberWarnings++;
					    } // if (numberWarnings < 1000)
					    }
					}
				    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1) || (values555 >= 1)) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));	
				    	}
				    	else {
					    	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
				    	}

						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,data);
						if ((values555 > 0) && (numberScoresMissing > 0)) {
							message = message + " Blank required by 555 in:";
							for (i = 0; i < values555; i++) {
								message = message + " " + variables555.get(i);
								if (i < values555-1) {
									message = message + ",";
								}
							}
							message = message + " and " + String.valueOf(numberScoresMissing);
						    message = message + " missing required value";
							if (numberScoresMissing >= 2) {
								message = message + "s";
							}
						}
						else if (values555 > 0) {
							message = message + " Blank required by 555 in:";
							for (i = 0; i < values555; i++) {
								message = message + " " + variables555.get(i);
								if (i < values555-1) {
									message = message + ",";
								}
							}	
						}
						else if (numberScoresMissing > 0) {
							message = message + String.format(" Blank required by " + numberScoresMissing +
									" missing required value");
							if (numberScoresMissing >= 2) {
								message = message + "s";
							}
						}
						if (rgTable.getDataFilePositionMapping(index) == null) {
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
					else {
						try {
					        actualPart1Sum = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
														data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										-1,message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
														data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),message)); 
							}
						}
					}
				}
			    
			    if (actualPart1Sum > -1) {
			    	if (actualPart1Sum != calculatedPart1Sum) {
			    		if (rgTable.getDataFilePositionMapping(index) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													String.valueOf(actualPart1Sum), String.valueOf(calculatedPart1Sum));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													String.valueOf(actualPart1Sum), String.valueOf(calculatedPart1Sum));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
			    		}
			    	}
			    }	
			} // else havePart1
			
			numberScoresMissing = 0;
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    numberScoresNotInteger = 0;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    int calculatedPart2Sum = 0;
		    boolean goodPart2Sum = true;
		    int actualPart2Sum = -1;
			if (!havePart2) {
				goodPart2Sum = false;
				for (i = 0; i <= 12; i++) {
					if (numberWarnings < 1000) {
					    if (part2Table.getDataFilePositionMapping(i) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											part2Table.getRepeatableGroupName(),
											part2Table.getColumnName(i));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(part2Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
									-1, message));
					    }
					    else {
					    	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											part2Table.getDataFilePositionMapping(i),
											part2Table.getRepeatableGroupName(),
											part2Table.getColumnName(i));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(part2Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
									part2Table.getDataFilePositionMapping(i), message));	
					    }
					numberWarnings++;
					} // if (numberWarnings < 1000)
				} // for (i = 0; i <= 12; i++)			
		    } // if (!havePart2)
			else { // havePart2
				for (j = 0; j < part2Index.length; j++) { 
			    	i = part2Index[j];
			    	if (i >= 0) {
			    		data = bufDataVector.get(i);
				    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty())) {
				    		goodPart2Sum = false;
				    		numberScoresMissing++;
				    		missingIndices.add(bufIndex.get(i));
						    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
							missing_group_row_index = bufGroup_row_index.get(i);
				    	}
				    	else {
							try {
			            	    calculatedPart2Sum += Integer.valueOf(data).intValue();
							}
							catch (NumberFormatException e) {
								goodPart2Sum = false;
								numberScoresNotInteger++;
							    notIntegerIndices.add(bufIndex.get(i));
							    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
								notInteger_group_row_index = bufGroup_row_index.get(i);
								notIntegerData.add(data);
							}
						}
			        }
			    }
			    
			    if (numberScoresMissing >= 1) {
			    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							missing_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresMissing; i++) {
			    		if (numberWarnings < 1000) {
			    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
			    				message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, missing_group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(missingIndices.get(i)));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
										-1, message));	
			    			}
			    			else {
					    		message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, missing_group_row_index),
												rgTable.getDataFilePositionMapping(missingIndices.get(i)),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(missingIndices.get(i)));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
			    			}
						numberWarnings++;
			    		} // if (numberWarnings < 1000)
			    	}
			    } // if (numberScoresMissing >= 1)
			    
			    if (numberScoresNotInteger >= 1) {
			    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							notInteger_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresNotInteger; i++) {
			    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
			    		}
			    	}
			    } // if (numberScoresNotInteger >= 1)
			    
			    if (part2ScoreIndex >= 0) {
					data = bufDataVector.get(part2ScoreIndex);
					repeatable_group_id = bufRepeatable_group_id.get(part2ScoreIndex);
					group_row_index = bufGroup_row_index.get(part2ScoreIndex);
					index = bufIndex.get(part2ScoreIndex);
					rgTable = table.getRepeatableGroupTable(repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
					if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
						if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
					    if (numberWarnings < 1000) {
					    	if (rgTable.getDataFilePositionMapping(index) == null) {
					    		message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedPart1Sum));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
					    	}
					    	else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedPart1Sum));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
					    	}
							numberWarnings++;
					    } // if (numberWarnings < 1000)
					    }
					}
				    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,data);
							if (numberScoresMissing > 0) {
								message = message + String.format(" Blank required by " + numberScoresMissing +
										" missing required value");
								if (numberScoresMissing >= 2) {
									message = message + "s";
								}
							}
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
				    	}
				    	else {
					    	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,data);
							if (numberScoresMissing > 0) {
								message = message + String.format(" Blank required by " + numberScoresMissing +
										" missing required value");
								if (numberScoresMissing >= 2) {
									message = message + "s";
								}
							}
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
				    	}
					}
					else {
						try {
					        actualPart2Sum = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
														data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										-1,message)); 
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
														data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),message)); 
							}
						}
					}
				}
			    
			    if (actualPart2Sum > -1) {
			    	if (actualPart2Sum != calculatedPart2Sum) {
			    		if (rgTable.getDataFilePositionMapping(index) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													String.valueOf(actualPart2Sum), String.valueOf(calculatedPart2Sum));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													String.valueOf(actualPart2Sum), String.valueOf(calculatedPart2Sum));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
			    		}
			    	}
			    }	
			} // else havePart2
			
			numberScoresMissing = 0;
		    missingIndices.clear();
		    variables555.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    numberScoresNotInteger = 0;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    int calculatedPart3Sum = 0;
		    values555 = 0;
		    boolean goodPart3Sum = true;
		    int actualPart3Sum = -1;
			if (!havePart3) {
				goodPart3Sum = false;
				for (i = 0; i <= 32; i++) {
					if (numberWarnings < 1000) {
						if (part3Table.getDataFilePositionMapping(i) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											part3Table.getRepeatableGroupName(),
											part3Table.getColumnName(i));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(part3Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											part3Table.getDataFilePositionMapping(i),
											part3Table.getRepeatableGroupName(),
											part3Table.getColumnName(i));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(part3Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
									part3Table.getDataFilePositionMapping(i), message));
						}
					numberWarnings++;
					} // if (numberWarnings < 1000)
				} // for (i = 0; i <= 32; i++)			
		    } // if (!havePart3)
			else { // havePart3
				for (j = 0; j < part3With555Index.length; j++) { 
			    	i = part3With555Index[j];
			    	if (i >= 0) {
			    		data = bufDataVector.get(i);
				    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty())) {
				    		goodPart3Sum = false;
				    		numberScoresMissing++;
				    		missingIndices.add(bufIndex.get(i));
						    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
							missing_group_row_index = bufGroup_row_index.get(i);
				    	}
				    	else {
							try {
						       value = Integer.valueOf(data).intValue();
						       if (value != 555) {
			            	        calculatedPart3Sum += value;
			 
					    		}
					    		else {
					    			goodPart3Sum = false;
					    			values555++;
					    			variables555.add(bufColumnNameVector.get(i));
					    		}
							}
							catch (NumberFormatException e) {
								goodPart3Sum = false;
								numberScoresNotInteger++;
							    notIntegerIndices.add(bufIndex.get(i));
							    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
								notInteger_group_row_index = bufGroup_row_index.get(i);
								notIntegerData.add(data);
							}
						}
			        }
			    }
			    
			    if (numberScoresMissing >= 1) {
			    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							missing_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresMissing; i++) {
			    		if (numberWarnings < 1000) {
			    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
			    				message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, missing_group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(missingIndices.get(i)));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
										-1, message));	
			    			}
			    			else {
					    		message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, missing_group_row_index),
												rgTable.getDataFilePositionMapping(missingIndices.get(i)),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(missingIndices.get(i)));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
			    			}
						numberWarnings++;
			    		} // if (numberWarnings < 1000)
			    	}
			    } // if (numberScoresMissing >= 1)
			    
			    if (numberScoresNotInteger >= 1) {
			    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							notInteger_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresNotInteger; i++) {
			    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
			    		}
			    	}
			    } // if (numberScoresNotInteger >= 1)
			    
			    if (part3ScoreIndex >= 0) {
					data = bufDataVector.get(part3ScoreIndex);
					repeatable_group_id = bufRepeatable_group_id.get(part3ScoreIndex);
					group_row_index = bufGroup_row_index.get(part3ScoreIndex);
					index = bufIndex.get(part3ScoreIndex);
					rgTable = table.getRepeatableGroupTable(repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
					if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
						if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0) && (values555 == 0)) {
					    if (numberWarnings < 1000) {
					    	if (rgTable.getDataFilePositionMapping(index) == null) {
					    		message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedPart3Sum));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 
					    	}
					    	else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedPart3Sum));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
					    	}
							numberWarnings++;
					    } // if (numberWarnings < 1000)
					    }
					}
				    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1) || (values555 >= 1)) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));	
				    	}
				    	else {
					    	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
				    	}

						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,data);
						if ((values555 > 0) && (numberScoresMissing > 0)) {
							message = message + " Blank required by 555 in:";
							for (i = 0; i < values555; i++) {
								message = message + " " + variables555.get(i);
								if (i < values555-1) {
									message = message + ",";
								}
							}
							message = message + " and " + String.valueOf(numberScoresMissing);
						    message = message + " missing required value";
							if (numberScoresMissing >= 2) {
								message = message + "s";
							}
						}
						else if (values555 > 0) {
							message = message + " Blank required by 555 in:";
							for (i = 0; i < values555; i++) {
								message = message + " " + variables555.get(i);
								if (i < values555-1) {
									message = message + ",";
								}
							}	
						}
						else if (numberScoresMissing > 0) {
							message = message + String.format(" Blank required by " + numberScoresMissing +
									" missing required value");
							if (numberScoresMissing >= 2) {
								message = message + "s";
							}
						}
						if (rgTable.getDataFilePositionMapping(index) == null) {
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
					else {
						try {
					        actualPart3Sum = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
														data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										-1,message));  	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
														data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),message));  
							}
						}
					}
				}
			    
			    if (actualPart3Sum > -1) {
			    	if (actualPart3Sum != calculatedPart3Sum) {
			    		if (rgTable.getDataFilePositionMapping(index) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													String.valueOf(actualPart3Sum), String.valueOf(calculatedPart3Sum));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													String.valueOf(actualPart3Sum), String.valueOf(calculatedPart3Sum));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
			    		}
			    	}
			    }	
			} // else havePart3
			
			numberScoresMissing = 0;
		    missingIndices.clear();
		    variables555.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    numberScoresNotInteger = 0;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    int calculatedPart4Sum = 0;
		    values555 = 0;
		    boolean goodPart4Sum = true;
		    int actualPart4Sum = -1;
			if (!havePart4) {
				goodPart4Sum = false;
				for (i = 0; i <= 5; i++) {
					if (numberWarnings < 1000) {
						if (part4Table.getDataFilePositionMapping(i) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											part4Table.getRepeatableGroupName(),
											part4Table.getColumnName(i));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(part4Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								 -1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											part4Table.getDataFilePositionMapping(i),
											part4Table.getRepeatableGroupName(),
											part4Table.getColumnName(i));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(part4Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
									part4Table.getDataFilePositionMapping(i), message));
						}
					numberWarnings++;
					} // if (numberWarnings < 1000)
				} // for (i = 0; i <= 5; i++)			
		    } // if (!havePart4)
			else { // havePart4
				for (j = 0; j < part4With555Index.length; j++) { 
			    	i = part4With555Index[j];
			    	if (i >= 0) {
			    		data = bufDataVector.get(i);
				    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
								(data.trim().isEmpty())) {
				    		goodPart4Sum = false;
				    		numberScoresMissing++;
				    		missingIndices.add(bufIndex.get(i));
						    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
							missing_group_row_index = bufGroup_row_index.get(i);
				    	}
				    	else {
							try {
						       value = Integer.valueOf(data).intValue();
						       if (value != 555) {
			            	        calculatedPart4Sum += value;
			 
					    		}
					    		else {
					    			goodPart4Sum = false;
					    			values555++;
					    			variables555.add(bufColumnNameVector.get(i));
					    		}
							}
							catch (NumberFormatException e) {
								goodPart4Sum = false;
								numberScoresNotInteger++;
							    notIntegerIndices.add(bufIndex.get(i));
							    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
								notInteger_group_row_index = bufGroup_row_index.get(i);
								notIntegerData.add(data);
							}
						}
			        }
			    }
			    
			    if (numberScoresMissing >= 1) {
			    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							missing_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresMissing; i++) {
			    		if (numberWarnings < 1000) {
			    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
			    				message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, missing_group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(missingIndices.get(i)));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
										-1, message));	
			    			}
			    			else {
					    		message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, missing_group_row_index),
												rgTable.getDataFilePositionMapping(missingIndices.get(i)),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(missingIndices.get(i)));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
			    			}
						numberWarnings++;
			    		} // if (numberWarnings < 1000)
			    	}
			    } // if (numberScoresMissing >= 1)
			    
			    if (numberScoresNotInteger >= 1) {
			    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, 
							notInteger_repeatable_group_id, null);
			    	for (i = 0; i < numberScoresNotInteger; i++) {
			    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, notInteger_group_row_index),
											rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(notIntegerIndices.get(i)));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													notIntegerData.get(i));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
			    		}
			    	}
			    } // if (numberScoresNotInteger >= 1)
			    
			    if (part4ScoreIndex >= 0) {
					data = bufDataVector.get(part4ScoreIndex);
					repeatable_group_id = bufRepeatable_group_id.get(part4ScoreIndex);
					group_row_index = bufGroup_row_index.get(part4ScoreIndex);
					index = bufIndex.get(part4ScoreIndex);
					rgTable = table.getRepeatableGroupTable(repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
					if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
						if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0) && (values555 == 0)) {
					    if (numberWarnings < 1000) {
					    	if (rgTable.getDataFilePositionMapping(index) == null) {
					    		message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedPart4Sum));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
					    	}
					    	else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedPart4Sum));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
					    	}
							numberWarnings++;
					    } // if (numberWarnings < 1000)
					    }
					}
				    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1) || (values555 >= 1)) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));	
				    	}
				    	else {
					    	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
				    	}

						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,data);
						if ((values555 > 0) && (numberScoresMissing > 0)) {
							message = message + " Blank required by 555 in:";
							for (i = 0; i < values555; i++) {
								message = message + " " + variables555.get(i);
								if (i < values555-1) {
									message = message + ",";
								}
							}
							message = message + " and " + String.valueOf(numberScoresMissing);
						    message = message + " missing required value";
							if (numberScoresMissing >= 2) {
								message = message + "s";
							}
						}
						else if (values555 > 0) {
							message = message + " Blank required by 555 in:";
							for (i = 0; i < values555; i++) {
								message = message + " " + variables555.get(i);
								if (i < values555-1) {
									message = message + ",";
								}
							}	
						}
						else if (numberScoresMissing > 0) {
							message = message + String.format(" Blank required by " + numberScoresMissing +
									" missing required value");
							if (numberScoresMissing >= 2) {
								message = message + "s";
							}
						}
						if (rgTable.getDataFilePositionMapping(index) == null) {
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
					else {
						try {
					        actualPart4Sum = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
														data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										-1,message));  	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
														data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),message));  
							}
						}
					}
				}
			    
			    if (actualPart4Sum > -1) {
			    	if (actualPart4Sum != calculatedPart4Sum) {
			    		if (rgTable.getDataFilePositionMapping(index) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													String.valueOf(actualPart4Sum), String.valueOf(calculatedPart4Sum));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													String.valueOf(actualPart4Sum), String.valueOf(calculatedPart4Sum));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
			    		}
			    	}
			    }	
			} // else havePart4
			
			int calculatedTotalSum = calculatedPart1Sum + calculatedPart2Sum +
					calculatedPart3Sum + calculatedPart4Sum;
			int actualTotalSum = -1;
			if (!haveTotal) {
				if (goodPart1Sum && goodPart2Sum && goodPart3Sum && goodPart4Sum) {
				    if (numberWarnings < 1000) {
				    	if (totalTable.getDataFilePositionMapping(0) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											totalTable.getRepeatableGroupName(),
											totalTable.getColumnName(0));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank", String.valueOf(calculatedTotalSum));
							table.addOutput(new ValidationOutput(totalTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
									-1, message));	
				    	}
				    	else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											totalTable.getDataFilePositionMapping(0),
											totalTable.getRepeatableGroupName(),
											totalTable.getColumnName(0));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank", String.valueOf(calculatedTotalSum));
							table.addOutput(new ValidationOutput(totalTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
									totalTable.getDataFilePositionMapping(0), message));
				    	}
						numberWarnings++;
					} // if (numberWarnings < 1000)	
				} // if (goodPart1Sum && goodPart2Sum && goodPart3Sum && goodPart4Sum)
		    } // if (!haveTotal)
			else { // haveTotal
				if (totalScoreIndex >= 0) {
					data = bufDataVector.get(totalScoreIndex);
					repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
					group_row_index = bufGroup_row_index.get(totalScoreIndex);
					index = bufIndex.get(totalScoreIndex);
					rgTable = table.getRepeatableGroupTable(repeatable_group_id);
					rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
					if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
						if (goodPart1Sum && goodPart2Sum && goodPart3Sum && goodPart4Sum) {
					    if (numberWarnings < 1000) {
					    	if (rgTable.getDataFilePositionMapping(index) == null) {
					    		message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalSum));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
					    	}
					    	else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalSum));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
					    	}
							numberWarnings++;
					    } // if (numberWarnings < 1000)
					    }
					}
				    else if((!goodPart1Sum) || (!goodPart2Sum) || (!goodPart3Sum) || (!goodPart4Sum)) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,data);
													table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
				    	}
				    	else {
					    	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,data);
													table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
				    	}
					}
					else {
						try {
					        actualTotalSum = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
														data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										-1,message));	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
														data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),message));
							}
						}
					}
				}
			    
			    if (actualTotalSum > -1) {
			    	if (actualTotalSum != calculatedTotalSum) {
			    		if (rgTable.getDataFilePositionMapping(index) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													String.valueOf(actualTotalSum), String.valueOf(calculatedTotalSum));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													String.valueOf(actualTotalSum), String.valueOf(calculatedTotalSum));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
			    		}
			    	}
			    }		
			} // else haveTotal

	}
	
	private void validateRivermead(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3, int subject_row_id, 
			DataStructureTable table) throws Exception {
		// 0 = Not experienced
		// 1 = No more a problem
		// 4 = A severe problem
		// Values of 1 are excluded from sums forming
		// rpq3score, rpq13score, and rpqtotalscore
		
		// Structure Name:	Rivermead
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBIUAT_INVPB294RG3
		// group_column_index = 1 group_column_name = subjectidnum data = 1
		// group_column_index = 2 group_column_name = ageyrs data = 20
		// group_column_index = 3 group_column_name = visitdate data = null
		// group_column_index = 4 group_column_name = sitename data = Bethesda
		// group_column_index = 5 group_column_name = dayssincebaseline data = 30
		// group_column_index = 6 group_column_name = casecontrlind data = Case
		// group_column_index = 7 group_column_name = generalnotestxt data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Questionnaire
		// rgTable.getSize() = 23
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 23
		// group_column_index = 0 group_column_name = rpqheadachesscale data = 3
		// group_column_index = 1 group_column_name = rpqdizzinessscale data = 3
		// group_column_index = 2 group_column_name = rpqnauseascale data = 1
		// group_column_index = 3 group_column_name = rpqnoisesensscale data = 2
		// group_column_index = 4 group_column_name = rpqsleepdistscale data = 1
		// group_column_index = 5 group_column_name = rpqfatiguescale data = 4
		// group_column_index = 6 group_column_name = rpqirritablescale data = 3
		// group_column_index = 7 group_column_name = rpqdepressedscale data = 2
		// group_column_index = 8 group_column_name = rpqfrustratedscale data = 2
		// group_column_index = 9 group_column_name = rpqforgetfulscale data = 4
		// group_column_index = 10 group_column_name = rpqpoorconcscale data = 4
		// group_column_index = 11 group_column_name = rpqlongtothinkscale data = 3
		// group_column_index = 12 group_column_name = rpqblurredvisionscale data = 2
		// group_column_index = 13 group_column_name = rpqlightsensscale data = 3
		// group_column_index = 14 group_column_name = rpqdblvisionscale data = 1
		// group_column_index = 15 group_column_name = rpqrestlessscale data = 1
		// group_column_index = 16 group_column_name = rpqothr1diffcltyscale data = null
		// group_column_index = 17 group_column_name = rpqothr1diffcltytxt data = null
		// group_column_index = 18 group_column_name = rpqothr2diffcltyscale data = null
		// group_column_index = 19 group_column_name = rpqothr2diffcltytxt data = null
		// group_column_index = 20 group_column_name = rpq3score data = 7
		// group_column_index = 21 group_column_name = rpq13score data = 32
		// group_column_index = 22 group_column_name = rpqtotalscore data = 39
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveQues = true;
	    RepeatableGroupTable quesTable = null;
	    int rpq3Index[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	rpq3Index[i] = -1;
	    }
	    int rpq13Index[] = new int[13];
	    for (i = 0; i < 13; i++) {
	    	rpq13Index[i] = -1;
	    }
	    int rpq3ScoreIndex = -1;
	    int rpq3Score = -1;
	    int rpq13ScoreIndex = -1;
	    int rpq13Score = -1;
        int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Questionnaire")) {
				    haveQues = false;
				    quesTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		      // System.out.println("group_column_index = " + i +
		       // " group_column_name = " + columnNameVector.get(i) +
		      // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Questionnaire")) {
				if (columnNameVector.get(i).equalsIgnoreCase("rpqheadachesscale")) {
					rpq3Index[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqdizzinessscale")) {
					rpq3Index[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqnauseascale")) {
					rpq3Index[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqnoisesensscale")) {
					rpq13Index[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqsleepdistscale")) {
					rpq13Index[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqfatiguescale")) {
					rpq13Index[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqirritablescale")) {
					rpq13Index[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqdepressedscale")) {
					rpq13Index[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqfrustratedscale")) {
					rpq13Index[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqforgetfulscale")) {
					rpq13Index[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqpoorconcscale")) {
					rpq13Index[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqlongtothinkscale")) {
					rpq13Index[8] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqblurredvisionscale")) {
					rpq13Index[9] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqlightsensscale")) {
					rpq13Index[10] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqdblvisionscale")) {
					rpq13Index[11] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqrestlessscale")) {
					rpq13Index[12] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpq3score")) {
					rpq3ScoreIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpq13score")) {
					rpq13ScoreIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("rpqtotalscore")) {
					totalScoreIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedrpq3Score = 0;
		int actualrpq3Score = -1;
		int calculatedrpq13Score = 0;
		int actualrpq13Score = -1;
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberrpq3ScoresMissing = 0;
		int numberrpq3ScoresNotInteger = 0;
		int numberrpq13ScoresMissing = 0;
		int numberrpq13ScoresNotInteger = 0;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveQues) {
			for (i = 0; i <= 15; i++) {
				if (quesTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									quesTable.getRepeatableGroupName(),
									quesTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(quesTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									quesTable.getDataFilePositionMapping(i),
									quesTable.getRepeatableGroupName(),
									quesTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(quesTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							quesTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 15; i++)			
	    } // if (!haveQues)
		else { // haveQues
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
			for (j = 0; j < rpq3Index.length; j++) { 
		    	i = rpq3Index[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberrpq3ScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if (value != 1) {
					           calculatedrpq3Score += value;
					       }
						}
						catch (NumberFormatException e) {
							numberrpq3ScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			for (j = 0; j < rpq13Index.length; j++) { 
		    	i = rpq13Index[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberrpq13ScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if (value != 1) {
					           calculatedrpq13Score += value;
					       }
						}
						catch (NumberFormatException e) {
							numberrpq13ScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			numberScoresMissing = numberrpq3ScoresMissing + numberrpq13ScoresMissing;
			numberScoresNotInteger = numberrpq3ScoresNotInteger + numberrpq13ScoresNotInteger;
			calculatedTotalScore = calculatedrpq3Score + calculatedrpq13Score;
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (rpq3ScoreIndex >= 0) {
				data = bufDataVector.get(rpq3ScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(rpq3ScoreIndex);
				group_row_index = bufGroup_row_index.get(rpq3ScoreIndex);
				index = bufIndex.get(rpq3ScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberrpq3ScoresMissing == 0) && (numberrpq3ScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedrpq3Score));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedrpq3Score));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberrpq3ScoresMissing >= 1) || (numberrpq3ScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualrpq3Score = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualrpq3Score > -1) {
		    	if (actualrpq3Score != calculatedrpq3Score) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualrpq3Score), String.valueOf(calculatedrpq3Score));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualrpq3Score), String.valueOf(calculatedrpq3Score));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		    
		    if (rpq13ScoreIndex >= 0) {
				data = bufDataVector.get(rpq13ScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(rpq13ScoreIndex);
				group_row_index = bufGroup_row_index.get(rpq13ScoreIndex);
				index = bufIndex.get(rpq13ScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberrpq13ScoresMissing == 0) && (numberrpq13ScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedrpq13Score));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedrpq13Score));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberrpq13ScoresMissing >= 1) || (numberrpq13ScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualrpq13Score = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualrpq13Score > -1) {
		    	if (actualrpq13Score != calculatedrpq13Score) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualrpq13Score), String.valueOf(calculatedrpq13Score));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualrpq13Score), String.valueOf(calculatedrpq13Score));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveQues

	}
	
	private void validateBSI18(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3,  int subject_row_id,
			DataStructureTable table) throws Exception {
		// Name:	BSI18
		// table.getColumnCount = 2
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBIUAT_INVPB294RG3
		// group_column_index = 1 group_column_name = subjectidnum data = 1
		// group_column_index = 2 group_column_name = ageyrs data = 20
		// group_column_index = 3 group_column_name = visitdate data = null
		// group_column_index = 4 group_column_name = sitename data = Bethesda
		// group_column_index = 5 group_column_name = dayssincebaseline data = 30
		// group_column_index = 6 group_column_name = casecontrlind data = Case
		// group_column_index = 7 group_column_name = generalnotestxt data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Form Completion
		// rgTable.getSize() = 26
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 26
		// group_column_index = 0 group_column_name = bsi18faintscale data = 0
		// group_column_index = 1 group_column_name = bsi18nointerestscale data = 0
		// group_column_index = 2 group_column_name = bsinervousscale data = 0
		// group_column_index = 3 group_column_name = bsi18chestpainscale data = 0
		// group_column_index = 4 group_column_name = bsi18feellonelyscale data = 0
		// group_column_index = 5 group_column_name = bsi18feeltensescale data = 0
		// group_column_index = 6 group_column_name = bsi18nauseascale data = 0
		// group_column_index = 7 group_column_name = bsi18feelbluescale data = 0
		// group_column_index = 8 group_column_name = bsi18scaredscale data = 0
		// group_column_index = 9 group_column_name = bsi18trblbreathscale data = 0
		// group_column_index = 10 group_column_name = bsi18feelworthlessscale data = 0
		// group_column_index = 11 group_column_name = bsi18terrororpanicscale data = 0
		// group_column_index = 12 group_column_name = bsi18numbscale data = 0
		// group_column_index = 13 group_column_name = bsi18feelhopelessscale data = 0
		// group_column_index = 14 group_column_name = bsi18feelrestlessscale data = 0
		// group_column_index = 15 group_column_name = bsi18feelweakscale data = 1
		// group_column_index = 16 group_column_name = bsi18thoughtsendinglifescale data = 0
		// group_column_index = 17 group_column_name = bsi18feelfearfulscale data = 0
		// group_column_index = 18 group_column_name = bsi18somscoreraw data = 0
		// group_column_index = 19 group_column_name = bsi18somscoret data = null
		// group_column_index = 20 group_column_name = bsi18deprscoreraw data = 0
		// group_column_index = 21 group_column_name = bsi18deprscoret data = null
		// group_column_index = 22 group_column_name = bsi18anxscoreraw data = 0
		// group_column_index = 23 group_column_name = bsi18anxscoret data = null
		// group_column_index = 24 group_column_name = bsi18gsiscoreraw data = 0
		// group_column_index = 25 group_column_name = bsi18gsiscoret data = null
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveForm = true;
	    RepeatableGroupTable formTable = null;
	    int somatizationIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	somatizationIndex[i] = -1;
	    }
	    int somscorerawIndex = -1;
	    int depressionIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	depressionIndex[i] = -1;
	    }
	    int deprscorerawIndex = -1;
	    int anxietyIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	anxietyIndex[i] = -1;
	    }
	    int anxscorerawIndex = -1;
	    int gsiscorerawIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Form Completion")) {
				    haveForm = false;
				    formTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		      // System.out.println("group_column_index = " + i +
		      // " group_column_name = " + columnNameVector.get(i) +
		      // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Form Completion")) {
				if (columnNameVector.get(i).equalsIgnoreCase("bsi18faintscale")) {
				    somatizationIndex[0] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18chestpainscale")) {
				    somatizationIndex[1] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18nauseascale")) {
				    somatizationIndex[2] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18trblbreathscale")) {
				    somatizationIndex[3] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18numbscale")) {
				    somatizationIndex[4] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18feelweakscale")) {
				    somatizationIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18somscoreraw")) {
					somscorerawIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18nointerestscale")) {
					depressionIndex[0] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18feellonelyscale")) {
					depressionIndex[1] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18feelbluescale")) {
					depressionIndex[2] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18feelworthlessscale")) {
					depressionIndex[3] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18feelhopelessscale")) {
					depressionIndex[4] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18thoughtsendinglifescale")) {
					depressionIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18deprscoreraw")) {
					deprscorerawIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsinervousscale")) {
					anxietyIndex[0] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18feeltensescale")) {
					anxietyIndex[1] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18scaredscale")) {
					anxietyIndex[2] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18terrororpanicscale")) {
					anxietyIndex[3] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18feelrestlessscale")) {
					anxietyIndex[4] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18feelfearfulscale")) {
					anxietyIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18anxscoreraw")) {
					anxscorerawIndex = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bsi18gsiscoreraw")) {
					gsiscorerawIndex = bufSizeIndex;	
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
		
		int calculatedTotalSomatizationScore = 0;
		int actualTotalSomatizationScore = -1;
		int numberSomatizationScoresMissing = 0;
		int numberSomatizationScoresNotInteger = 0;
		int calculatedTotalDepressionScore = 0;
		int actualTotalDepressionScore = -1;
		int numberDepressionScoresMissing = 0;
		int numberDepressionScoresNotInteger = 0;
		int calculatedTotalAnxietyScore = 0;
		int actualTotalAnxietyScore = -1;
		int numberAnxietyScoresMissing = 0;
		int numberAnxietyScoresNotInteger = 0;
    	int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		
		if (!haveForm) {
			for (i = 0; i <= 17; i++) {
				if (formTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									formTable.getRepeatableGroupName(),
									formTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(formTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									formTable.getDataFilePositionMapping(i),
									formTable.getRepeatableGroupName(),
									formTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(formTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							formTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 17; i++)			
	    } // if (!haveForm)
		else { // haveForm
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
			for (j = 0; j < somatizationIndex.length; j++) { 
		    	i = somatizationIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberSomatizationScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedTotalSomatizationScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberSomatizationScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
		    if (numberSomatizationScoresMissing > 2) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberSomatizationScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberSomatizationScoresMissing > 2)
		    
		    if (numberSomatizationScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberSomatizationScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberSomatizationScoresNotInteger >= 1)
		    
		    if (somscorerawIndex >= 0) {
				data = bufDataVector.get(somscorerawIndex);
				repeatable_group_id = bufRepeatable_group_id.get(somscorerawIndex);
				group_row_index = bufGroup_row_index.get(somscorerawIndex);
				index = bufIndex.get(somscorerawIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberSomatizationScoresMissing == 0) && (numberSomatizationScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalSomatizationScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalSomatizationScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberSomatizationScoresMissing > 2) || (numberSomatizationScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalSomatizationScore = Integer.valueOf(data).intValue();
				        if (numberSomatizationScoresMissing == 1) {
				        	if (numberWarnings < 1000) {
				        		if (rgTable.getDataFilePositionMapping(index) == null) {
				        			message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_ONE_MISSING,
															"Somatization",rgTable.getColumnName(missingIndices.get(0)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											-1, message)); 	
				        		}
				        		else {
						        	message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getDataFilePositionMapping(index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_ONE_MISSING,
															"Somatization",rgTable.getColumnName(missingIndices.get(0)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),message)); 
				        		}
				        	numberWarnings++;
				        	} // if (numberWarnings < 1000)
				        } // if (numberSomatizationScoresMissing == 1)
				        else if (numberSomatizationScoresMissing == 2) {
				        	if (numberWarnings < 1000) {
				        		if (rgTable.getDataFilePositionMapping(index) == null) {
				        			message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_TWO_MISSING,
															"Somatization",rgTable.getColumnName(missingIndices.get(0)),
															rgTable.getColumnName(missingIndices.get(1)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											-1, message)); 	
				        		}
				        		else {
						        	message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getDataFilePositionMapping(index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_TWO_MISSING,
															"Somatization",rgTable.getColumnName(missingIndices.get(0)),
															rgTable.getColumnName(missingIndices.get(1)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),message)); 
				        		}
					        	numberWarnings++;
					        	} // if (numberWarnings < 1000)	
				        } // else if (numberSomatizationScoresMissing == 2)
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			}
		    
		    if (actualTotalSomatizationScore > -1) {
		    	if ((actualTotalSomatizationScore != calculatedTotalSomatizationScore) && 
		    			(numberSomatizationScoresMissing == 0)) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalSomatizationScore),
												String.valueOf(calculatedTotalSomatizationScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalSomatizationScore),
												String.valueOf(calculatedTotalSomatizationScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    missingIndices.clear();
		    notIntegerIndices.clear();
		    notIntegerData.clear();
		    
		    for (j = 0; j < depressionIndex.length; j++) { 
		    	i = depressionIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberDepressionScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedTotalDepressionScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberDepressionScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
		    if (numberDepressionScoresMissing > 2) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberDepressionScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberDepressionScoresMissing > 2)
		    
		    if (numberDepressionScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberDepressionScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberDepressionScoresNotInteger >= 1)
		    
		    if (deprscorerawIndex >= 0) {
				data = bufDataVector.get(deprscorerawIndex);
				repeatable_group_id = bufRepeatable_group_id.get(deprscorerawIndex);
				group_row_index = bufGroup_row_index.get(deprscorerawIndex);
				index = bufIndex.get(deprscorerawIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberDepressionScoresMissing == 0) && (numberDepressionScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalDepressionScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalDepressionScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberDepressionScoresMissing > 2) || (numberDepressionScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalDepressionScore = Integer.valueOf(data).intValue();
				        if (numberDepressionScoresMissing == 1) {
				        	if (numberWarnings < 1000) {
				        		if (rgTable.getDataFilePositionMapping(index) == null) {
				        			message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_ONE_MISSING,
															"Depression",rgTable.getColumnName(missingIndices.get(0)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											-1, message));	
				        		}
				        		else {
						        	message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getDataFilePositionMapping(index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_ONE_MISSING,
															"Depression",rgTable.getColumnName(missingIndices.get(0)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),message));
				        		}
				        	numberWarnings++;
				        	} // if (numberWarnings < 1000)
				        } // if (numberDepressionScoresMissing == 1)
				        else if (numberDepressionScoresMissing == 2) {
				        	if (numberWarnings < 1000) {
				        		if (rgTable.getDataFilePositionMapping(index) == null) {
				        			message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_TWO_MISSING,
															"Depression",rgTable.getColumnName(missingIndices.get(0)),
															rgTable.getColumnName(missingIndices.get(1)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											-1, message));	
				        		}
				        		else {
						        	message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getDataFilePositionMapping(index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_TWO_MISSING,
															"Depression",rgTable.getColumnName(missingIndices.get(0)),
															rgTable.getColumnName(missingIndices.get(1)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),message));
				        		}
					        	numberWarnings++;
					        	} // if (numberWarnings < 1000)	
				        } // else if (numberDepressionScoresMissing == 2)
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								    -1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));  
						}
					}
				}
			}
		    
		    if (actualTotalDepressionScore > -1) {
		    	if ((actualTotalDepressionScore != calculatedTotalDepressionScore) && 
		    			(numberDepressionScoresMissing == 0)) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalDepressionScore),
												String.valueOf(calculatedTotalDepressionScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalDepressionScore),
												String.valueOf(calculatedTotalDepressionScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    missingIndices.clear();
		    notIntegerIndices.clear();
		    notIntegerData.clear();
		    
		    for (j = 0; j < anxietyIndex.length; j++) { 
		    	i = anxietyIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberAnxietyScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedTotalAnxietyScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberAnxietyScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
		    if (numberAnxietyScoresMissing > 2) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberAnxietyScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberAnxietyScoresMissing > 2)
		    
		    if (numberAnxietyScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberAnxietyScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberAnxietyScoresNotInteger >= 1)
		    
		    if (anxscorerawIndex >= 0) {
				data = bufDataVector.get(anxscorerawIndex);
				repeatable_group_id = bufRepeatable_group_id.get(anxscorerawIndex);
				group_row_index = bufGroup_row_index.get(anxscorerawIndex);
				index = bufIndex.get(anxscorerawIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberAnxietyScoresMissing == 0) && (numberAnxietyScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalAnxietyScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalAnxietyScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberAnxietyScoresMissing > 2) || (numberAnxietyScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalAnxietyScore = Integer.valueOf(data).intValue();
				        if (numberAnxietyScoresMissing == 1) {
				        	if (numberWarnings < 1000) {
				        		if (rgTable.getDataFilePositionMapping(index) == null) {
				        			message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_ONE_MISSING,
															"Anxiety",rgTable.getColumnName(missingIndices.get(0)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											-1, message));	
				        		}
				        		else {
						        	message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getDataFilePositionMapping(index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_ONE_MISSING,
															"Anxiety",rgTable.getColumnName(missingIndices.get(0)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),message));
				        		}
				        	numberWarnings++;
				        	} // if (numberWarnings < 1000)
				        } // if (numberAnxietyScoresMissing == 1)
				        else if (numberAnxietyScoresMissing == 2) {
				        	if (numberWarnings < 1000) {
				        		if (rgTable.getDataFilePositionMapping(index) == null) {
				        			message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_TWO_MISSING,
															"Anxiety",rgTable.getColumnName(missingIndices.get(0)),
															rgTable.getColumnName(missingIndices.get(1)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											-1, message));	
				        		}
				        		else {
						        	message =
											String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
													guid,
													getRawDataRow(subject_row_id, group_row_index),
													rgTable.getDataFilePositionMapping(index),
													rgTable.getRepeatableGroupName(),
													rgTable.getColumnName(index));
						        	message =
											message
													+ String.format(ApplicationsConstants.WARNING_SUBSCORE_TWO_MISSING,
															"Anxiety",rgTable.getColumnName(missingIndices.get(0)),
															rgTable.getColumnName(missingIndices.get(1)));
						        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),message));
				        		}
					        	numberWarnings++;
					        	} // if (numberWarnings < 1000)	
				        } // else if (numberAnxietyScoresMissing == 2)
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualTotalAnxietyScore > -1) {
		    	if ((actualTotalAnxietyScore != calculatedTotalAnxietyScore) && 
		    			(numberAnxietyScoresMissing == 0)) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalAnxietyScore),
												String.valueOf(calculatedTotalAnxietyScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalAnxietyScore),
												String.valueOf(calculatedTotalAnxietyScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		    
		    numberScoresMissing = numberSomatizationScoresMissing + numberDepressionScoresMissing + 
		    		numberAnxietyScoresMissing;
		    numberScoresNotInteger = numberSomatizationScoresNotInteger + numberDepressionScoresNotInteger +
		    		numberAnxietyScoresNotInteger;
		    // If all 6 components of somatization, depression, or anxiety are valid, use the
		    // 6 individual components
		    // Otherwise if a subscore is valid use the subscore
		    // Otherwise if a subscore is not valid but 4 valid scores with no nonintegers
		    // are present in somatization, depression, or anxiety take the sum of the
		    // individual components instead of the subscore
		    if ((numberSomatizationScoresMissing <= 2) && (numberDepressionScoresMissing <= 2) &&
		    		(numberAnxietyScoresMissing <= 2) && (numberScoresNotInteger == 0)) {
		    	if (numberSomatizationScoresMissing == 0) {
		    	    calculatedTotalScore += calculatedTotalSomatizationScore;	
		    	}
		    	else if (actualTotalSomatizationScore >= 0) {
		    		calculatedTotalScore += actualTotalSomatizationScore;
		    	}
		    	else {
		    		calculatedTotalScore += calculatedTotalSomatizationScore;
		    	}
		    	
		    	if (numberDepressionScoresMissing == 0) {
		    	    calculatedTotalScore += calculatedTotalDepressionScore;	
		    	}
		    	else if (actualTotalDepressionScore >= 0) {
		    		calculatedTotalScore += actualTotalDepressionScore;
		    	}
		    	else {
		    		calculatedTotalScore += calculatedTotalDepressionScore;
		    	}
		    	
		    	if (numberAnxietyScoresMissing == 0) {
		    	    calculatedTotalScore += calculatedTotalAnxietyScore;	
		    	}
		    	else if (actualTotalAnxietyScore >= 0) {
		    		calculatedTotalScore += actualTotalAnxietyScore;
		    	}
		    	else {
		    		calculatedTotalScore += calculatedTotalAnxietyScore;
		    	}
		    }
		    
		    if (gsiscorerawIndex >= 0) {
				data = bufDataVector.get(gsiscorerawIndex);
				repeatable_group_id = bufRepeatable_group_id.get(gsiscorerawIndex);
				group_row_index = bufGroup_row_index.get(gsiscorerawIndex);
				index = bufIndex.get(gsiscorerawIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberSomatizationScoresMissing > 2) || (numberDepressionScoresMissing > 2) ||
			    		(numberAnxietyScoresMissing > 2) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveForm
	}
	
	

	private void validateBDI2(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3, int subject_row_id, 
			DataStructureTable table) throws Exception {
		// Structure Name:	BDI2
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = contexttype data = At time of assessment
		// group_column_index = 1 group_column_name = contexttypeoth data = null
		// group_column_index = 2 group_column_name = datasource data = Participant/subject
		// group_column_index = 3 group_column_name = datasourceoth data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBI_INVLU329PXB
		// group_column_index = 1 group_column_name = subjectidnum data = EV0418
		// group_column_index = 2 group_column_name = ageyrs data = 13
		// group_column_index = 3 group_column_name = visitdate data = 2016-04-17T00:00:00Z
		// group_column_index = 4 group_column_name = sitename data = University of Washington
		// group_column_index = 5 group_column_name = dayssincebaseline data = 1
		// group_column_index = 6 group_column_name = casecontrlind data = case
		// group_column_index = 7 group_column_name = generalnotestxt data = null
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Inventory
		// rgTable.getSize() = 22
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 22
		// group_column_index = 0 group_column_name = bdiiisadnessscale data = 0
		// group_column_index = 1 group_column_name = bdiiipessimismscale data = 0
		// group_column_index = 2 group_column_name = bdiiipastfailurescale data = 0
		// group_column_index = 3 group_column_name = bdiiilossofpleasurescale data = 0
		// group_column_index = 4 group_column_name = bdiiiguiltyfeelingsscale data = 0
		// group_column_index = 5 group_column_name = bdiiipunishmentfeelingsscale data = 0
		// group_column_index = 6 group_column_name = bdiiiselfdislikescale data = 0
		// group_column_index = 7 group_column_name = bdiiiselfcriticalnessscale data = 0
		// group_column_index = 8 group_column_name = bdiiisuicidalscale data = 0
		// group_column_index = 9 group_column_name = bdiiicryingscale data = 0
		// group_column_index = 10 group_column_name = bdiiiagitationscale data = 0
		// group_column_index = 11 group_column_name = bdiiilossofinterestscale data = 0
		// group_column_index = 12 group_column_name = bdiiiindecisivnessscale data = 0
		// group_column_index = 13 group_column_name = bdiiiworthlessnessscale data = 0
		// group_column_index = 14 group_column_name = bdiiilossofenergyscale data = 0
		// group_column_index = 15 group_column_name = bdiiisleeppatternscale data = 1
		// group_column_index = 16 group_column_name = bdiiiirritabilityscale data = 0
		// group_column_index = 17 group_column_name = bdiiiappetitescale data = 1
		// group_column_index = 18 group_column_name = bdiiiconcentrationscale data = 0
		// group_column_index = 19 group_column_name = bdiiitirednessscale data = 0
		// group_column_index = 20 group_column_name = bdiiilossinterestsexscale data = 0
		// group_column_index = 21 group_column_name = bdiiitotalscore data = 2
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
		boolean haveInventory = true;
		RepeatableGroupTable inventoryTable = null;
		int inventoryIndex[] = new int[21];
		for (i = 0; i < 21; i++) {
		    inventoryIndex[i] = -1;
		}
	    int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    	    // System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Inventory")) {
				    haveInventory = false;
				    inventoryTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		        // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		        // for (i = 0; i < columnNameVector.size(); i++) {
		        // System.out.println("group_column_index = " + i +
		        // " group_column_name = " + columnNameVector.get(i) +
		        // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Inventory")) {
				if (columnNameVector.get(i).equalsIgnoreCase("bdiiisadnessscale")) {
				     inventoryIndex[0] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiipessimismscale")) {
				     inventoryIndex[1] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiipastfailurescale")) {
				     inventoryIndex[2] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiilossofpleasurescale")) {
				     inventoryIndex[3] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiiguiltyfeelingsscale")) {
				     inventoryIndex[4] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiipunishmentfeelingsscale")) {
				     inventoryIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiiselfdislikescale")) {
				     inventoryIndex[6] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiiselfcriticalnessscale")) {
				     inventoryIndex[7] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiisuicidalscale")) {
				     inventoryIndex[8] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiicryingscale")) {
				     inventoryIndex[9] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiiagitationscale")) {
				     inventoryIndex[10] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiilossofinterestscale")) {
				     inventoryIndex[11] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiiindecisivnessscale")) {
				     inventoryIndex[12] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiiworthlessnessscale")) {
				     inventoryIndex[13] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiilossofenergyscale")) {
				     inventoryIndex[14] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiisleeppatternscale")) {
				     inventoryIndex[15] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiiirritabilityscale")) {
				     inventoryIndex[16] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiiappetitescale")) {
				     inventoryIndex[17] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiiconcentrationscale")) {
				     inventoryIndex[18] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiitirednessscale")) {
				     inventoryIndex[19] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiilossinterestsexscale")) {
				     inventoryIndex[20] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bdiiitotalscore")) {
				     totalScoreIndex = bufSizeIndex;	
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 13) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "13 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "13 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		int numberScoresNotPermissible = 0;
		if (!haveInventory) {
			for (i = 0; i <= 20; i++) {
				if (inventoryTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									inventoryTable.getRepeatableGroupName(),
									inventoryTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(inventoryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
						   			guid,
									getRawDataRow(subject_row_id, 0),
									inventoryTable.getDataFilePositionMapping(i),
									inventoryTable.getRepeatableGroupName(),
									inventoryTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(inventoryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							inventoryTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 20; i++)			
	    } // if (!haveInventory)
		else { // haveInventory
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    Vector<Integer>notPermissibleIndices = new Vector<Integer>();
		    int notPermissible_repeatable_group_id = -1;
		    int notPermissible_group_row_index = -1;
		    Vector<String>notPermissibleData = new Vector<String>();
		    int value;
			for (j = 0; j < inventoryIndex.length; j++) { 
		    	i = inventoryIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else if ((j != 15) && (j != 17)) {
						try {
					       calculatedTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
			    	else {
			    		if (data.equalsIgnoreCase("1")) {
			    		    // Add 0 to calculatedTotalScore	
			    		}
			    		else if (data.equalsIgnoreCase("1a")) {
			    			calculatedTotalScore += 1;
			    		}
			    		else if (data.equalsIgnoreCase("1b")) {
			    			calculatedTotalScore += 1;
			    		}
			    		else if (data.equalsIgnoreCase("2a")) {
			    			calculatedTotalScore += 2;
			    		}
			    		else if (data.equalsIgnoreCase("2b")) {
			    			calculatedTotalScore += 2;
			    		}
			    		else if (data.equalsIgnoreCase("3a")) {
			    			calculatedTotalScore += 3;
			    		}
			    		else if (data.equalsIgnoreCase("3b")) {
			    			calculatedTotalScore += 3;
			    		}
			    		else {
			    			numberScoresNotPermissible++;
						    notPermissibleIndices.add(bufIndex.get(i));
						    notPermissible_repeatable_group_id = bufRepeatable_group_id.get(i);
							notPermissible_group_row_index = bufGroup_row_index.get(i);
							notPermissibleData.add(data);	
			    		}
			    	}
		        }
		    }
			
			
		    
		    if (numberScoresMissing >= 2) {
		    	// Allow 1 missing score
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 2)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (numberScoresNotPermissible >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notPermissible_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notPermissible_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotPermissible; i++) {
		    		if (rgTable.getDataFilePositionMapping(notPermissibleIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notPermissible_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notPermissibleIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
												notPermissibleData.get(i),"1,1a,1b,2a,2b,3a,3b");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notPermissible_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notPermissible_group_row_index),
										rgTable.getDataFilePositionMapping(notPermissibleIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notPermissibleIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE,
												notPermissibleData.get(i),"1,1a,1b,2a,2b,3a,3b");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notPermissible_group_row_index),
								rgTable.getDataFilePositionMapping(notPermissibleIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotPermissible >= 1)
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing <= 1) && (numberScoresNotInteger == 0) && (numberScoresNotPermissible == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScoresMissing >= 2) || (numberScoresNotInteger >= 1) || (numberScoresNotPermissible >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveInventory
	}
	
	private void validateBVMTR(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// 2019-07-25 14:00:02,551Structure Name:	BVMTR
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Brief Visuospatial Memory Test
		// rgTable.getSize() = 36
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 36
		// group_column_index = 0 group_column_name = bvmtrformadministerednum data = null
		// group_column_index = 1 group_column_name = bvmtrtrial1rawscore data = 3
		// group_column_index = 2 group_column_name = bvmtrtrial1tscore data = 34
		// group_column_index = 3 group_column_name = bvmtrtrial1percentile data = null
		// group_column_index = 4 group_column_name = bvmtrtrial2rawscore data = 3
		// group_column_index = 5 group_column_name = bvmtrtrial2tscore data = 20
		// group_column_index = 6 group_column_name = bvmtrtrial2percentile data = null
		// group_column_index = 7 group_column_name = bvmtrtrial3rawscore data = 4
		// group_column_index = 8 group_column_name = bvmtrtrial3tscore data = null
		// group_column_index = 9 group_column_name = bvmtrtrial3percentile data = null
		// group_column_index = 10 group_column_name = bvmtrttlrecallrawscore data = 10
		// group_column_index = 11 group_column_name = bvmtrttlrecalltscore data = null
		// group_column_index = 12 group_column_name = bvmtrttlrecallpercentile data = null
		// group_column_index = 13 group_column_name = bvmtrlearnrawscore data = 1
		// group_column_index = 14 group_column_name = bvmtrlearntscore data = 35
		// group_column_index = 15 group_column_name = bvmtrlearnpercentile data = null
		// group_column_index = 16 group_column_name = bvmtrdelayrecallrawscore data = 3
		// group_column_index = 17 group_column_name = bvmtrdelayrecalltscore data = null
		// group_column_index = 18 group_column_name = bvmtrdelayrecallpercentile data = null
		// group_column_index = 19 group_column_name = bvmtrpercntretainrawscore data = null
		// group_column_index = 20 group_column_name = bvmtrpercntretainpercentile data = null
		// group_column_index = 21 group_column_name = bvmtrhitsrawscore data = 5
		// group_column_index = 22 group_column_name = bvmtrhitspercentile data = null
		// group_column_index = 23 group_column_name = bvmtrfalsealarmrawscore data = 1
		// group_column_index = 24 group_column_name = bvmtrfalsealarmpercentile data = null
		// group_column_index = 25 group_column_name = bvmtrdiscrimindxrawscore data = 4
		// group_column_index = 26 group_column_name = bvmtrdiscrimindxpercentile data = null
		// group_column_index = 27 group_column_name = bvmtrresponsbiasrawscore data = null
		// group_column_index = 28 group_column_name = bvmtrresponsbiaspercentile data = null
		// group_column_index = 29 group_column_name = bvmtrcopyrawscore data = null
		// group_column_index = 30 group_column_name = bvmtrcomparisongrouptxt data = null
		// group_column_index = 31 group_column_name = bvmtrtrial3completetime data = null
		// group_column_index = 32 group_column_name = bvmtrdelayrecallstarttime data = null
		// group_column_index = 33 group_column_name = bvmtrdelayintervaltime data = null
		// group_column_index = 34 group_column_name = bvmtrcopyimage data = null
		// group_column_index = 35 group_column_name = bvmtrstimulusimage data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBI_INVHJ184WZC
		// group_column_index = 1 group_column_name = subjectidnum data = 01C1066
		// group_column_index = 2 group_column_name = ageyrs data = 50
		// group_column_index = 3 group_column_name = vitstatus data = null
		// group_column_index = 4 group_column_name = visitdate data = null
		// group_column_index = 5 group_column_name = sitename data = Hunter Holmes McGuire Veterans Hospital (001)
		// group_column_index = 6 group_column_name = dayssincebaseline data = 0
		// group_column_index = 7 group_column_name = casecontrlind data = Case
		// group_column_index = 8 group_column_name = generalnotestxt data = null
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveBrief = true;
	    RepeatableGroupTable briefTable = null;
	    int BVMTIndex[] = new int[4];
	    for (i = 0; i < 4; i++) {
	    	BVMTIndex[i] = -1;
	    }
	    int neededIndices[] = new int[] {1,4,7,16};
	    boolean delayMissing = false;
	    boolean delayNotInteger = false;
	    int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Brief Visuospatial Memory Test")) {
				    haveBrief = false;
				    briefTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		     // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		     // for (i = 0; i < columnNameVector.size(); i++) {
		     //  System.out.println("group_column_index = " + i +
		     //   " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		     //}
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Brief Visuospatial Memory Test")) {
				if (columnNameVector.get(i).equalsIgnoreCase("bvmtrtrial1rawscore")) { 
					BVMTIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bvmtrtrial2rawscore")) { 
					BVMTIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bvmtrtrial3rawscore")) { 
					BVMTIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bvmtrdelayrecallrawscore")) { 
					BVMTIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("bvmtrttlrecallrawscore")) { 
					totalScoreIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 18) || (age > 79)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 to 79 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 to 79 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveBrief) {
			for (i = 0; i < neededIndices.length; i++) {
				j = neededIndices[i];
				if (briefTable.getDataFilePositionMapping(j) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									briefTable.getRepeatableGroupName(),
									briefTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(briefTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									briefTable.getDataFilePositionMapping(j),
									briefTable.getRepeatableGroupName(),
									briefTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(briefTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							briefTable.getDataFilePositionMapping(j), message));
				}
			} // for (i = 0; i <= neededIndices.length; i++)			
	    } // if (!haveBrief)
		else { // haveBrief
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
			for (j = 0; j < BVMTIndex.length; j++) { 
		    	i = BVMTIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		if (j == 3) {
			    			delayMissing = true;
			    		}
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       value = Integer.valueOf(data).intValue();
					       if (j != 3) {
					           calculatedTotalScore += value;
					       }
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							if (j == 3) {
								delayNotInteger = true;
							}
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (delayMissing) {
		    	numberScoresMissing -= 1;
		    }
		    else if (delayNotInteger) {
		    	numberScoresNotInteger -= 1;
		    }
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveBrief
	}
	
	private void validateCOWAT(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	COWAT
		// table.getColumnCount = 5
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Totals
		// rgTable.getSize() = 9
		// rgEntries.size() = 2
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = cowattestcatnam data = Semantic
		// group_column_index = 1 group_column_name = cowatcategcorrectwordsnum data = 45
		// group_column_index = 2 group_column_name = cowatcategerrorsnum data = 22
		// group_column_index = 3 group_column_name = cowatcategrepetlnum data = 1
		// group_column_index = 4 group_column_name = cowatttlcorrecwordsnum data = 45
		// group_column_index = 5 group_column_name = cowatttlerrorslnum data = 42
		// group_column_index = 6 group_column_name = cowatttlrepetnum data = 15
		// group_column_index = 7 group_column_name = cowatrawtotalscore data = 45
		// group_column_index = 8 group_column_name = cowatadjustedtotalscore data = 43
		// group_row_index = 1
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = cowattestcatnam data = Phonemic
		// group_column_index = 1 group_column_name = cowatcategcorrectwordsnum data = 37
		// group_column_index = 2 group_column_name = cowatcategerrorsnum data = 20
		// group_column_index = 3 group_column_name = cowatcategrepetlnum data = 14
		// group_column_index = 4 group_column_name = cowatttlcorrecwordsnum data = 36
		// group_column_index = 5 group_column_name = cowatttlerrorslnum data = null
		// group_column_index = 6 group_column_name = cowatttlrepetnum data = null
		// group_column_index = 7 group_column_name = cowatrawtotalscore data = 39
		// group_column_index = 8 group_column_name = cowatadjustedtotalscore data = 36
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = contexttype data = null
		// group_column_index = 1 group_column_name = contexttypeoth data = null
		// group_column_index = 2 group_column_name = datasource data = participant/subject
		// group_column_index = 3 group_column_name = datasourceoth data = null
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Semantic test
		// rgTable.getSize() = 7
		// rgEntries.size() = 3
		// group_row_index = 0
		// columnNameVector.size() = 7
		// group_column_index = 0 group_column_name = trialnum data = Trial 1
		// group_column_index = 1 group_column_name = cowattestcatnam data = Semantic
		// group_column_index = 2 group_column_name = cowatsemantcatnam data = Animals
		// group_column_index = 3 group_column_name = cowatsemantcatwordcount data = 16
		// group_column_index = 4 group_column_name = cowatcategcorrectwordsnum data = 16
		// group_column_index = 5 group_column_name = cowatcategrepetlnum data = 0
		// group_column_index = 6 group_column_name = cowatcategerrorsnum data = 8
		// group_row_index = 1
		// columnNameVector.size() = 7
		// group_column_index = 0 group_column_name = trialnum data = Trial 2
		// group_column_index = 1 group_column_name = cowattestcatnam data = Semantic
		// group_column_index = 2 group_column_name = cowatsemantcatnam data = Furniture
		// group_column_index = 3 group_column_name = cowatsemantcatwordcount data = 15
		// group_column_index = 4 group_column_name = cowatcategcorrectwordsnum data = 14
		// group_column_index = 5 group_column_name = cowatcategrepetlnum data = 1
		// group_column_index = 6 group_column_name = cowatcategerrorsnum data = 7
		// group_row_index = 2
		// columnNameVector.size() = 7
		// group_column_index = 0 group_column_name = trialnum data = Trial 3
		// group_column_index = 1 group_column_name = cowattestcatnam data = Semantic
		// group_column_index = 2 group_column_name = cowatsemantcatnam data = Transport
		// group_column_index = 3 group_column_name = cowatsemantcatwordcount data = 18
		// group_column_index = 4 group_column_name = cowatcategcorrectwordsnum data = 15
		// group_column_index = 5 group_column_name = cowatcategrepetlnum data = 0
		// group_column_index = 6 group_column_name = cowatcategerrorsnum data = 7
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = Phonemic test
		// rgTable.getSize() = 9
		// rgEntries.size() = 3
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = trialnum data = Trial 1
		// group_column_index = 1 group_column_name = cowatlettername data = F
		// group_column_index = 2 group_column_name = cowatwordslistindivlettrcount data = 16
		// group_column_index = 3 group_column_name = cowatindivdullettrcorrectnum data = 16
		// group_column_index = 4 group_column_name = cowatindivdullettrerrorsnum data = 8
		// group_column_index = 5 group_column_name = cowatindivdullettrrepetnum data = 0
		// group_column_index = 6 group_column_name = cowatcategcorrectwordsnum data = null
		// group_column_index = 7 group_column_name = cowatcategerrorsnum data = null
		// group_column_index = 8 group_column_name = cowatcategrepetlnum data = null
		// group_row_index = 1
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = trialnum data = Trial 2
		// group_column_index = 1 group_column_name = cowatlettername data = A
		// group_column_index = 2 group_column_name = cowatwordslistindivlettrcount data = 18
		// group_column_index = 3 group_column_name = cowatindivdullettrcorrectnum data = 10
		// group_column_index = 4 group_column_name = cowatindivdullettrerrorsnum data = 6
		// group_column_index = 5 group_column_name = cowatindivdullettrrepetnum data = 8
		// group_column_index = 6 group_column_name = cowatcategcorrectwordsnum data = null
		// group_column_index = 7 group_column_name = cowatcategerrorsnum data = null
		// group_column_index = 8 group_column_name = cowatcategrepetlnum data = null
		// group_row_index = 2
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = trialnum data = Trial 3
		// group_column_index = 1 group_column_name = cowatlettername data = S
		// group_column_index = 2 group_column_name = cowatwordslistindivlettrcount data = 20
		// group_column_index = 3 group_column_name = cowatindivdullettrcorrectnum data = 12
		// group_column_index = 4 group_column_name = cowatindivdullettrerrorsnum data = 6
		// group_column_index = 5 group_column_name = cowatindivdullettrrepetnum data = 6
		// group_column_index = 6 group_column_name = cowatcategcorrectwordsnum data = 38
		// group_column_index = 7 group_column_name = cowatcategerrorsnum data = 20
		// group_column_index = 8 group_column_name = cowatcategrepetlnum data = 14
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBI_INVCB298TTM
		// group_column_index = 1 group_column_name = subjectidnum data = 1234
		// group_column_index = 2 group_column_name = ageyrs data = 3
		// group_column_index = 3 group_column_name = visitdate data = 2017-04-11T00:00:00Z
		// group_column_index = 4 group_column_name = sitename data = University of Miami
		// group_column_index = 5 group_column_name = dayssincebaseline data = 60
		// group_column_index = 6 group_column_name = casecontrlind data = case
		// group_column_index = 7 group_column_name = generalnotestxt data = Phonemic test.COWATCategCorrectWordsNum= 
		//      Totals.COWATCategCorrectWordsNum= Totals.COWATTtlCorrecWordsNum= Totals.COWATRawTotalScore
	
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean havePhonemic1 = true;
	    boolean havePhonemic2 = true;
	    boolean havePhonemic3 = true;
	    RepeatableGroupTable phonemicTable = null;
	    int phonemicTest1Index[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	phonemicTest1Index[i] = -1;
	    }
	    int phonemicTest2Index[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	phonemicTest2Index[i] = -1;
	    }
	    int phonemicTest3Index[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	phonemicTest3Index[i] = -1;
	    }
	    int phonemicTestIndices[] = new int[] {0,1,3};
	    boolean haveSemantic1 = true;
	    boolean haveSemantic2 = true;
	    boolean haveSemantic3 = true;
	    RepeatableGroupTable semanticTable = null;
	    int semanticTest1Index[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	semanticTest1Index[i] = -1;
	    }
	    int semanticTest2Index[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	semanticTest2Index[i] = -1;
	    }
	    int semanticTest3Index[] = new int[3];
	    for (i = 0; i < 3; i++) {
	    	semanticTest3Index[i] = -1;
	    }
	    int semanticTestIndices[] = new int[] {0,2,4};
	    // Notice here start with false rather than the usual start with true
	    boolean havePhonemicTotals = false;
	    boolean haveSemanticTotals = false;
	    RepeatableGroupTable totalsTable = null;
	    int phonemic_group_row_index = -1;
	    int semantic_group_row_index = -1;
	    int phonemicRawTotalScoreIndex = -1;
	    int semanticRawTotalScoreIndex = -1;
	    int maxrgEntriesSize = 0;
	    int actualPhonemicRawTotalScore = -1;
	    int calculatedPhonemicRawTotalScore = 0;
	    int actualSemanticRawTotalScore = -1;
	    int calculatedSemanticRawTotalScore = 0;
	    int testCatNam0Index  = -1;
	    int testCatNam1Index = -1;
	    int numberPhonemicScoresMissing = 0;
	    int numberPhonemicScoresNotInteger = 0;
	    int numberSemanticScoresMissing = 0;
	    int numberSemanticScoresNotInteger = 0;
	    int phonemicCorrectWordsIndex = -1;
	    int phonemicTotalCorrectWordsIndex = -1;
	    int phonemicCorrectWords = -1;
	    int phonemicTotalCorrectWords = -1;
	    int semanticCorrectWordsIndex = -1;
	    int semanticTotalCorrectWordsIndex = -1;
	    int semanticCorrectWords = -1;
	    int semanticTotalCorrectWords = -1;
	    int neededTotalsIndices[] = new int[] {0,1,4,7};
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() > maxrgEntriesSize) {
				maxrgEntriesSize = rgEntries.size();
			}
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Phonemic test")) {
				    havePhonemic1 = false;
				    havePhonemic2 = false;
				    havePhonemic3 = false;
				    phonemicTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Semantic test")) {
				    haveSemantic1 = false;
				    haveSemantic2 = false;
				    haveSemantic3 = false;
				    semanticTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Totals")) {
					totalsTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			else if (rgEntries.size() == 1) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Phonemic test")) {
				    havePhonemic2 = false;
				    havePhonemic3 = false;
				    phonemicTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Semantic test")) {
				    haveSemantic2 = false;
				    haveSemantic3 = false;
				    semanticTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Totals")) {
					totalsTable = rgTable;
				}
			} // else if (rgEntries.size() == 1)
			else if (rgEntries.size() == 2) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Phonemic test")) {
				    havePhonemic3 = false;
				    phonemicTable = rgTable;
				}	
				else if (repeatableGroupName.equalsIgnoreCase("Semantic test")) {
				    haveSemantic3 = false;
				    semanticTable = rgTable;
				}
			} // else if (rgEntries.size() == 2)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		       // System.out.println("group_column_index = " + i +
		        // " group_column_name = " + columnNameVector.get(i) +
		       // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;	
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Phonemic test")) {
				if (group_row_index == 0) {
					if (columnNameVector.get(i).equalsIgnoreCase("trialnum")) {
						phonemicTest1Index[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatlettername")) {
						phonemicTest1Index[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatindivdullettrcorrectnum")) {
						phonemicTest1Index[2] = bufSizeIndex;
					}
				}
				else if (group_row_index == 1) {
					if (columnNameVector.get(i).equalsIgnoreCase("trialnum")) {
						phonemicTest2Index[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatlettername")) {
						phonemicTest2Index[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatindivdullettrcorrectnum")) {
						phonemicTest2Index[2] = bufSizeIndex;
					}
				}
				else if (group_row_index == 2) {
					if (columnNameVector.get(i).equalsIgnoreCase("trialnum")) {
						phonemicTest3Index[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatlettername")) {
						phonemicTest3Index[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatindivdullettrcorrectnum")) {
						phonemicTest3Index[2] = bufSizeIndex;
					}
				}
			} // else if (repeatableGroupName.equalsIgnoreCase("Phonemic test"))
			else if (repeatableGroupName.equalsIgnoreCase("Semantic test")) {
				if (group_row_index == 0) {
					if (columnNameVector.get(i).equalsIgnoreCase("trialnum")) {
						semanticTest1Index[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatsemantcatnam")) {
						semanticTest1Index[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatcategcorrectwordsnum")) {
						semanticTest1Index[2] = bufSizeIndex;
					}
				}
				else if (group_row_index == 1) {
					if (columnNameVector.get(i).equalsIgnoreCase("trialnum")) {
						semanticTest2Index[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatsemantcatnam")) {
						semanticTest2Index[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatcategcorrectwordsnum")) {
						semanticTest2Index[2] = bufSizeIndex;
					}
				}
				else if (group_row_index == 2) {
					if (columnNameVector.get(i).equalsIgnoreCase("trialnum")) {
						semanticTest3Index[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatsemantcatnam")) {
						semanticTest3Index[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("cowatcategcorrectwordsnum")) {
						semanticTest3Index[2] = bufSizeIndex;
					}
				}
			} // else if (repeatableGroupName.equalsIgnoreCase("Semantic test"))
			else if (repeatableGroupName.equals("Totals")) {
				if (columnNameVector.get(i).equalsIgnoreCase("cowattestcatnam")) {
					if ((dataVector.get(i) != null) && (dataVector.get(i).equalsIgnoreCase("Phonemic"))) {
						havePhonemicTotals = true;
						phonemic_group_row_index = group_row_index;
					}
					else if ((dataVector.get(i) != null) && (dataVector.get(i).equalsIgnoreCase("Semantic"))) {
						haveSemanticTotals = true;
						semantic_group_row_index = group_row_index;
					}
					else if (group_row_index == 0) {
						testCatNam0Index = bufSizeIndex;
					}
					else if (group_row_index == 1) {
						testCatNam1Index = bufSizeIndex;
					}
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("cowatrawtotalscore")) {
					if (group_row_index == phonemic_group_row_index) {
						phonemicRawTotalScoreIndex = bufSizeIndex;
					}
					else if (group_row_index == semantic_group_row_index) {
						semanticRawTotalScoreIndex = bufSizeIndex;
					}
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("cowatcategcorrectwordsnum")) {
					if (group_row_index == phonemic_group_row_index) {
						phonemicCorrectWordsIndex = bufSizeIndex;
					}
					else if (group_row_index == semantic_group_row_index) {
						semanticCorrectWordsIndex = bufSizeIndex;
					}	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("cowatttlcorrecwordsnum")) {
					if (group_row_index == phonemic_group_row_index) {
						phonemicTotalCorrectWordsIndex = bufSizeIndex;
					}
					else if (group_row_index == semantic_group_row_index) {
						semanticTotalCorrectWordsIndex = bufSizeIndex;
					}	
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 6) || (age > 69)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "6 to 69 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "6 to 69 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		Vector<Integer>missingIndices = new Vector<Integer>();
	    int missing_repeatable_group_id = -1;
	    int missing_group_row_index = -1;
	    Vector<Integer>notIntegerIndices = new Vector<Integer>();
	    int notInteger_repeatable_group_id = -1;
	    int notInteger_group_row_index = -1;
	    Vector<String>notIntegerData = new Vector<String>();
	    int numberPhonemicTrialsPresent = 0;
	    if (havePhonemic1) {
	    	numberPhonemicTrialsPresent++;
	    }
	    if (havePhonemic2) {
	    	numberPhonemicTrialsPresent++;
	    }
	    if (havePhonemic3) {
	    	numberPhonemicTrialsPresent++;
	    }
		if (!havePhonemic1) {
			if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	        	message = message + " data is only submitted for " +
								String.valueOf(numberPhonemicTrialsPresent) +
								" of the Phonemic test trials instead of the correct 3";
	        	if (rgTable.getDataFilePositionMapping(phonemicTestIndices[0]) == null) {
	        		table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							-1, message));	
	        	}
	        	else {
		        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							rgTable.getDataFilePositionMapping(phonemicTestIndices[0]), message));
	        	}
	        	numberWarnings++;
			}
			for (i = 0; i < phonemicTestIndices.length; i++) {
				j = phonemicTestIndices[i];
				if (phonemicTable.getDataFilePositionMapping(j) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									phonemicTable.getRepeatableGroupName(),
									phonemicTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(phonemicTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));
				}         
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									phonemicTable.getDataFilePositionMapping(j),
									phonemicTable.getRepeatableGroupName(),
									phonemicTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(phonemicTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							phonemicTable.getDataFilePositionMapping(j), message));
				}
				numberPhonemicScoresMissing++;
			} // for (i = 0; i < phonemicTestIndices.length; i++)			
	    } // if (!havePhonemic1)
		else { // havePhonemic1
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    if ((numberPhonemicTrialsPresent < 3) && (numberWarnings < 1000)) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	        	message = message + " data is only submitted for " +
								String.valueOf(numberPhonemicTrialsPresent) +
								" of the Phonemic test trials instead of the correct 3";
	        	if (rgTable.getDataFilePositionMapping(phonemicTestIndices[0]) == null) {
	        		table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							-1, message));	
	        	}
	        	else  {
		        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							rgTable.getDataFilePositionMapping(phonemicTestIndices[0]), message));
	        	}
	        	numberWarnings++;
			}
			for (j = 0; j < phonemicTest1Index.length; j++) { 
		    	i = phonemicTest1Index[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		if (j == 2) {
			    			numberPhonemicScoresMissing++;
			    		}
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else if (j == 2) {
						try {
					       calculatedPhonemicRawTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberPhonemicScoresNotInteger++;
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						} // catch
					} // else if (j == 2)
		        } // if (i >= 0)
		    } // for (j = 0; j < phonemicTest1Index.length; j++)
			
			if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		} // else havePhonemic1
		if (!havePhonemic2) {
			numberPhonemicScoresMissing++;	
		}
		if ((!havePhonemic2) && (maxrgEntriesSize >= 2)) {
			for (i = 0; i < phonemicTestIndices.length; i++) {
				j = phonemicTestIndices[i];
				if (phonemicTable.getDataFilePositionMapping(j) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 1),
									phonemicTable.getRepeatableGroupName(),
									phonemicTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(phonemicTable, OutputType.ERROR, getRawDataRow(subject_row_id, 1), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 1),
									phonemicTable.getDataFilePositionMapping(j),
									phonemicTable.getRepeatableGroupName(),
									phonemicTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(phonemicTable, OutputType.ERROR, getRawDataRow(subject_row_id, 1), 
							phonemicTable.getDataFilePositionMapping(j), message));
				}
			} // for (i = 0; i < phonemicTestIndices.length; i++)			
	    } // if ((!havePhonemic2) && (maxrgEntriesSize >= 2))
		else if (havePhonemic2) {
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < phonemicTest2Index.length; j++) { 
		    	i = phonemicTest2Index[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		if (j == 2) {
			    			numberPhonemicScoresMissing++;
			    		}
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else if (j == 2) {
						try {
							calculatedPhonemicRawTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberPhonemicScoresNotInteger++;
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						} // catch
					} // else if (j == 2)
		        } // if (i >= 0)
		    } // for (j = 0; j < phonemicTest2Index.length; j++)
			
			if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		} // else if (havePhonemic2)
		if (!havePhonemic3) {
			numberPhonemicScoresMissing++;
		}
		if ((!havePhonemic3) && (maxrgEntriesSize >= 3)) {
			for (i = 0; i < phonemicTestIndices.length; i++) {
				j = phonemicTestIndices[i];
				if (phonemicTable.getDataFilePositionMapping(j) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 2),
									phonemicTable.getRepeatableGroupName(),
									phonemicTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(phonemicTable, OutputType.ERROR, getRawDataRow(subject_row_id, 2), 
							-1, message));		
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 2),
									phonemicTable.getDataFilePositionMapping(j),
									phonemicTable.getRepeatableGroupName(),
									phonemicTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(phonemicTable, OutputType.ERROR, getRawDataRow(subject_row_id, 2), 
							phonemicTable.getDataFilePositionMapping(j), message));
				}
			} // for (i = 0; i < phonemicTestIndices.length; i++)			
	    } // if ((!havePhonemic3) && (maxrgEntriesSize >= 3))
		else if (havePhonemic3) {
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < phonemicTest3Index.length; j++) { 
		    	i = phonemicTest3Index[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		if (j == 2) {
			    			numberPhonemicScoresMissing++;
			    		}
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else if (j == 2) {
						try {
							calculatedPhonemicRawTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberPhonemicScoresNotInteger++;
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						} // catch
					} // else if (j == 2)
		        } // if (i >= 0)
		    } // for (j = 0; j < phonemicTest3Index.length; j++)
			
			if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    		
		    	}
		    } // if (numberScoresNotInteger >= 1)	
		} // else if (havePhonemic3)
		
		if (havePhonemic1 && havePhonemic2 && havePhonemic3 && (!havePhonemicTotals) &&
			haveSemantic1 && haveSemantic2 && haveSemantic3 && (!haveSemanticTotals) && (totalsTable != null)) {
				for (i = 0; i <= neededTotalsIndices.length; i++) {
					for (group_row_index = 0; group_row_index <= 1; group_row_index++) {
						j = neededTotalsIndices[i];
						if (totalsTable.getDataFilePositionMapping(j) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											totalsTable.getRepeatableGroupName(),
											totalsTable.getColumnName(j));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(totalsTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index), 
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
										    totalsTable.getDataFilePositionMapping(j),
											totalsTable.getRepeatableGroupName(),
											totalsTable.getColumnName(j));
				
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(totalsTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index), 
									totalsTable.getDataFilePositionMapping(j), message));
						}
					} // for (group_row_index = 0; group_row_index <= 1; group_row_index++)
				} // for (i = 0; i <= neededTotalsIndices.length; i++)				
			}
		
		if (((havePhonemic1 && havePhonemic2 && havePhonemic3 && haveSemanticTotals && (!havePhonemicTotals)) ||
			(haveSemantic1 && haveSemantic2 && haveSemantic3 && (!haveSemanticTotals) && havePhonemicTotals)) 
				&& (totalsTable != null)) {
			for (i = 0; i <= neededTotalsIndices.length; i++) {
					j = neededTotalsIndices[i];
					if (totalsTable.getDataFilePositionMapping(j) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 1),
										totalsTable.getRepeatableGroupName(),
										totalsTable.getColumnName(j));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(totalsTable, OutputType.ERROR, getRawDataRow(subject_row_id, 1), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 1),
									    totalsTable.getDataFilePositionMapping(j),
										totalsTable.getRepeatableGroupName(),
										totalsTable.getColumnName(j));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(totalsTable, OutputType.ERROR, getRawDataRow(subject_row_id, 1), 
								totalsTable.getDataFilePositionMapping(j), message));
					}
			} // for (i = 0; i <= neededTotalsIndices.length; i++)				
		}
		
		if (testCatNam0Index >= 0) {
			data = bufDataVector.get(testCatNam0Index);
			repeatable_group_id = bufRepeatable_group_id.get(testCatNam0Index);
			group_row_index = bufGroup_row_index.get(testCatNam0Index);
			index = bufIndex.get(testCatNam0Index);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if (rgTable.getDataFilePositionMapping(index) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));

					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message)); 	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));

					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message)); 
				}
			}
			else if (!(data.equalsIgnoreCase("Phonemic")) || (data.equalsIgnoreCase("Semantic"))) {
				if (rgTable.getDataFilePositionMapping(index) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE, data, "Phonemic, Semantic");
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message)); 	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE, data, "Phonemic, Semantic");
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message)); 
				}
			}
		}
		
		if (testCatNam1Index >= 0) {
			data = bufDataVector.get(testCatNam1Index);
			repeatable_group_id = bufRepeatable_group_id.get(testCatNam1Index);
			group_row_index = bufGroup_row_index.get(testCatNam1Index);
			index = bufIndex.get(testCatNam1Index);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if (rgTable.getDataFilePositionMapping(index) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));

					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
						-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));

					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
				}
			}
			else if (!(data.equalsIgnoreCase("Phonemic")) || (data.equalsIgnoreCase("Semantic"))) {
				if (rgTable.getDataFilePositionMapping(index) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE, data, "Phonemic, Semantic");
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message)); 	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_PERMISSIBLE_VALUE, data, "Phonemic, Semantic");
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message)); 
				}
				
			}
		}
		
		if (phonemicRawTotalScoreIndex >= 0) {
			data = bufDataVector.get(phonemicRawTotalScoreIndex);
			repeatable_group_id = bufRepeatable_group_id.get(phonemicRawTotalScoreIndex);
			group_row_index = bufGroup_row_index.get(phonemicRawTotalScoreIndex);
			index = bufIndex.get(phonemicRawTotalScoreIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if ((numberPhonemicScoresMissing == 0) && (numberPhonemicScoresNotInteger == 0)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedPhonemicRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedPhonemicRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message)); 
					}
			    }
			}
		    else if ((numberPhonemicScoresMissing >= 1) || (numberPhonemicScoresNotInteger >= 1)) {
		    	if (rgTable.getDataFilePositionMapping(index) == null) {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
		    	}
		    	else {
			    	message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
		    	}
		    }
			else {
				try {
			        actualPhonemicRawTotalScore = Integer.valueOf(data).intValue();
				}
				catch (NumberFormatException e) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1,message));  	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index),message));  
					}
				}
			}
		}
	    
	    if (actualPhonemicRawTotalScore > -1) {
	    	if (actualPhonemicRawTotalScore != calculatedPhonemicRawTotalScore) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualPhonemicRawTotalScore), String.valueOf(calculatedPhonemicRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualPhonemicRawTotalScore), String.valueOf(calculatedPhonemicRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
	    if (phonemicCorrectWordsIndex >= 0) {
			data = bufDataVector.get(phonemicCorrectWordsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(phonemicCorrectWordsIndex);
			group_row_index = bufGroup_row_index.get(phonemicCorrectWordsIndex);
			index = bufIndex.get(phonemicCorrectWordsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if ((numberPhonemicScoresMissing == 0) && (numberPhonemicScoresNotInteger == 0)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedPhonemicRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedPhonemicRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message)); 
					}
			    }
			}
		    else if ((numberPhonemicScoresMissing >= 1) || (numberPhonemicScoresNotInteger >= 1)) {
		    	if (rgTable.getDataFilePositionMapping(index) == null) {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
		    	}
		    	else {
			    	message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
		    	}
		    }
			else {
				try {
			        phonemicCorrectWords = Integer.valueOf(data).intValue();
				}
				catch (NumberFormatException e) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1,message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index),message)); 
					}
				}
			}
		}
	    
	    if (phonemicCorrectWords > -1) {
	    	if (phonemicCorrectWords != calculatedPhonemicRawTotalScore) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(phonemicCorrectWords), String.valueOf(calculatedPhonemicRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(phonemicCorrectWords), String.valueOf(calculatedPhonemicRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }	
		
	    if (phonemicTotalCorrectWordsIndex >= 0) {
			data = bufDataVector.get(phonemicTotalCorrectWordsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(phonemicTotalCorrectWordsIndex);
			group_row_index = bufGroup_row_index.get(phonemicTotalCorrectWordsIndex);
			index = bufIndex.get(phonemicTotalCorrectWordsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if ((numberPhonemicScoresMissing == 0) && (numberPhonemicScoresNotInteger == 0)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedPhonemicRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedPhonemicRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message)); 
					}
			    }
			}
		    else if ((numberPhonemicScoresMissing >= 1) || (numberPhonemicScoresNotInteger >= 1)) {
		    	if (rgTable.getDataFilePositionMapping(index) == null) {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
		    	}
		    	else {
			    	message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
		    	}
		    }
			else {
				try {
			        phonemicTotalCorrectWords = Integer.valueOf(data).intValue();
				}
				catch (NumberFormatException e) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1,message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index),message)); 
					}
				}
			}
		}
	    
	    if (phonemicTotalCorrectWords > -1) {
	    	if (phonemicTotalCorrectWords != calculatedPhonemicRawTotalScore) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(phonemicTotalCorrectWords), String.valueOf(calculatedPhonemicRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(phonemicTotalCorrectWords), String.valueOf(calculatedPhonemicRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
	    int numberSemanticTrialsPresent = 0;
	    if (haveSemantic1) {
	    	numberSemanticTrialsPresent++;
	    }
	    if (haveSemantic2) {
	    	numberSemanticTrialsPresent++;
	    }
	    if (haveSemantic3) {
	    	numberSemanticTrialsPresent++;
	    }
	    if (!haveSemantic1) {
	    	if (numberWarnings < 1000) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	        	message = message + " data is only submitted for " +
								String.valueOf(numberSemanticTrialsPresent) +
								" of the Semantic test trials instead of the correct 3";
	        	if (rgTable.getDataFilePositionMapping(semanticTestIndices[0]) == null) {
	        		table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							-1, message));	
	        	}
	        	else {
		        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							rgTable.getDataFilePositionMapping(semanticTestIndices[0]), message));
	        	}
	        	numberWarnings++;
			}
			for (i = 0; i < semanticTestIndices.length; i++) {
				j = semanticTestIndices[i];
				if (semanticTable.getDataFilePositionMapping(j) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									semanticTable.getRepeatableGroupName(),
									semanticTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(semanticTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									semanticTable.getDataFilePositionMapping(j),
									semanticTable.getRepeatableGroupName(),
									semanticTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(semanticTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							semanticTable.getDataFilePositionMapping(j), message));	
				}
				numberSemanticScoresMissing++;
			} // for (i = 0; i < semanticTestIndices.length; i++)			
	    } // if (!haveSemantic1)
		else { // haveSemantic1
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
		    if ((numberSemanticTrialsPresent < 3) && (numberWarnings < 1000)) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW,
								guid,
								getRawDataRow(subject_row_id, 0));
	        	message = message + " data is only submitted for " +
								String.valueOf(numberSemanticTrialsPresent) +
								" of the Semantic test trials instead of the correct 3";
	        	if (rgTable.getDataFilePositionMapping(semanticTestIndices[0]) == null) {
	        		table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							-1, message));	
	        	}
	        	else {
		        	table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0),
							rgTable.getDataFilePositionMapping(semanticTestIndices[0]), message));
	        	}
	        	numberWarnings++;
			}
			for (j = 0; j < semanticTest1Index.length; j++) { 
		    	i = semanticTest1Index[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		if (j == 2) {
			    			numberSemanticScoresMissing++;
			    		}
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else if (j == 2) {
						try {
					       calculatedSemanticRawTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberSemanticScoresNotInteger++;
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						} // catch
					} // else if (j == 2)
		        } // if (i >= 0)
		    } // for (j = 0; j < semanticTest1Index.length; j++)
			
			if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		} // else haveSemantic1
		if (!haveSemantic2) {
			numberSemanticScoresMissing++;	
		}
		if ((!haveSemantic2) && (maxrgEntriesSize >= 2)) {
			for (i = 0; i < semanticTestIndices.length; i++) {
				j = semanticTestIndices[i];
				if (semanticTable.getDataFilePositionMapping(j) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 1),
									semanticTable.getRepeatableGroupName(),
									semanticTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(semanticTable, OutputType.ERROR, getRawDataRow(subject_row_id, 1), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 1),
									semanticTable.getDataFilePositionMapping(j),
									semanticTable.getRepeatableGroupName(),
									semanticTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(semanticTable, OutputType.ERROR, getRawDataRow(subject_row_id, 1), 
							semanticTable.getDataFilePositionMapping(j), message));
				}
			} // for (i = 0; i < semanticTestIndices.length; i++)			
	    } // if ((!haveSemantic2) && (maxrgEntriesSize >= 2))
		else if (haveSemantic2) {
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < semanticTest2Index.length; j++) { 
		    	i = semanticTest2Index[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		if (j == 2) {
			    			numberSemanticScoresMissing++;
			    		}
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else if (j == 2) {
						try {
							calculatedSemanticRawTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberSemanticScoresNotInteger++;
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						} // catch
					} // else if (j == 2)
		        } // if (i >= 0)
		    } // for (j = 0; j < semanticTest2Index.length; j++)
			
			if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		} // else if (haveSemantic2)
		if (!haveSemantic3) {
			numberSemanticScoresMissing++;
		}
		if ((!haveSemantic3) && (maxrgEntriesSize >= 3)) {
			for (i = 0; i < semanticTestIndices.length; i++) {
				j = semanticTestIndices[i];
				if (semanticTable.getDataFilePositionMapping(j) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 2),
									semanticTable.getRepeatableGroupName(),
									semanticTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(semanticTable, OutputType.ERROR, getRawDataRow(subject_row_id, 2), 
						-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 2),
									semanticTable.getDataFilePositionMapping(j),
									semanticTable.getRepeatableGroupName(),
									semanticTable.getColumnName(j));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(semanticTable, OutputType.ERROR, getRawDataRow(subject_row_id, 2), 
							semanticTable.getDataFilePositionMapping(j), message));
				}
			} // for (i = 0; i < semanticTestIndices.length; i++)			
	    } // if ((!haveSemantic3) && (maxrgEntriesSize >= 3))
		else if (haveSemantic3) {
			numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < semanticTest3Index.length; j++) { 
		    	i = semanticTest3Index[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		if (j == 2) {
			    			numberSemanticScoresMissing++;
			    		}
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else if (j == 2) {
						try {
							calculatedSemanticRawTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberSemanticScoresNotInteger++;
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						} // catch
					} // else if (j == 2)
		        } // if (i >= 0)
		    } // for (j = 0; j < semanticTest3Index.length; j++)
			
			if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)	
		} // else if (haveSemantic3)
		
		if (semanticRawTotalScoreIndex >= 0) {
			data = bufDataVector.get(semanticRawTotalScoreIndex);
			repeatable_group_id = bufRepeatable_group_id.get(semanticRawTotalScoreIndex);
			group_row_index = bufGroup_row_index.get(semanticRawTotalScoreIndex);
			index = bufIndex.get(semanticRawTotalScoreIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if ((numberSemanticScoresMissing == 0) && (numberSemanticScoresNotInteger == 0)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedSemanticRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedSemanticRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message)); 
					}
			    }
			}
		    else if ((numberSemanticScoresMissing >= 1) || (numberSemanticScoresNotInteger >= 1)) {
		    	if (rgTable.getDataFilePositionMapping(index) == null) {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
		    	}
		    	else {
			    	message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
		    	}
		    	
		    }
			else {
				try {
			        actualSemanticRawTotalScore = Integer.valueOf(data).intValue();
				}
				catch (NumberFormatException e) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1,message));  	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index),message));  
					}
				}
			}
		}
	    
	    if (actualSemanticRawTotalScore > -1) {
	    	if (actualSemanticRawTotalScore != calculatedSemanticRawTotalScore) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualSemanticRawTotalScore), String.valueOf(calculatedSemanticRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualSemanticRawTotalScore), String.valueOf(calculatedSemanticRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
	    if (semanticCorrectWordsIndex >= 0) {
			data = bufDataVector.get(semanticCorrectWordsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(semanticCorrectWordsIndex);
			group_row_index = bufGroup_row_index.get(semanticCorrectWordsIndex);
			index = bufIndex.get(semanticCorrectWordsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if ((numberSemanticScoresMissing == 0) && (numberSemanticScoresNotInteger == 0)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedSemanticRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedSemanticRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
			    }
			}
		    else if ((numberSemanticScoresMissing >= 1) || (numberSemanticScoresNotInteger >= 1)) {
		    	if (rgTable.getDataFilePositionMapping(index) == null) {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));
		    	}
		    	else {
			    	message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
		    	}
		    }
			else {
				try {
			        semanticCorrectWords = Integer.valueOf(data).intValue();
				}
				catch (NumberFormatException e) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1,message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index),message));
					}
				}
			}
		}
	    
	    if (semanticCorrectWords > -1) {
	    	if (semanticCorrectWords != calculatedSemanticRawTotalScore) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(semanticCorrectWords), String.valueOf(calculatedSemanticRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(semanticCorrectWords), String.valueOf(calculatedSemanticRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }	
		
	    if (semanticTotalCorrectWordsIndex >= 0) {
			data = bufDataVector.get(semanticTotalCorrectWordsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(semanticTotalCorrectWordsIndex);
			group_row_index = bufGroup_row_index.get(semanticTotalCorrectWordsIndex);
			index = bufIndex.get(semanticTotalCorrectWordsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if ((numberSemanticScoresMissing == 0) && (numberSemanticScoresNotInteger == 0)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedSemanticRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedSemanticRawTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message)); 
					}
			    }
			}
		    else if ((numberSemanticScoresMissing >= 1) || (numberSemanticScoresNotInteger >= 1)) {
		    	if (rgTable.getDataFilePositionMapping(index) == null) {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
		    	}
		    	else {
			    	message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
		    	}
		    }
			else {
				try {
			        semanticTotalCorrectWords = Integer.valueOf(data).intValue();
				}
				catch (NumberFormatException e) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							 -1,message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index),message)); 
					}
				}
			}
		}
	    
	    if (semanticTotalCorrectWords > -1) {
	    	if (semanticTotalCorrectWords != calculatedSemanticRawTotalScore) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(semanticTotalCorrectWords), String.valueOf(calculatedSemanticRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(semanticTotalCorrectWords), String.valueOf(calculatedSemanticRawTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	}
	
	private void validateNSI1(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	NSI1
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Neurobehavioral Symptom Inventory
		// rgTable.getSize() = 24
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 24
		// group_column_index = 0 group_column_name = nsidizscore data = 1
		// group_column_index = 1 group_column_name = nsibalncimprmntscore data = 0
		// group_column_index = 2 group_column_name = nsicoordntnimprmntscore data = 2
		// group_column_index = 3 group_column_name = nsihdchescore data = 0
		// group_column_index = 4 group_column_name = nsinausscore data = 0
		// group_column_index = 5 group_column_name = nsivisnimprmntscore data = 0
		// group_column_index = 6 group_column_name = nsisenstvlgtscore data = 4
		// group_column_index = 7 group_column_name = nsihearngimprmntscore data = 3
		// group_column_index = 8 group_column_name = nsisenstvnoisscore data = 4
		// group_column_index = 9 group_column_name = nsinumbnssimprmntscore data = 1
		// group_column_index = 10 group_column_name = nsitastimprmntscore data = 0
		// group_column_index = 11 group_column_name = nsiapptitimprmntscore data = 0
		// group_column_index = 12 group_column_name = nsiconctrtnimprmntscore data = 3
		// group_column_index = 13 group_column_name = nsimmryimprmntscore data = 2
		// group_column_index = 14 group_column_name = nsidecsnimprmntscore data = 2
		// group_column_index = 15 group_column_name = nsislwthnkngimprmntscore data = 3
		// group_column_index = 16 group_column_name = nsifatigimprmntscore data = 2
		// group_column_index = 17 group_column_name = nsislpimprmntscore data = 4
		// group_column_index = 18 group_column_name = nsianxtyimprmntscore data = 2
		// group_column_index = 19 group_column_name = nsideprsnimprmntscore data = 1
		// group_column_index = 20 group_column_name = nsiirrabltyimprmntscore data = 2
		// group_column_index = 21 group_column_name = nsifrustrtnimprmntscore data = 2
		// group_column_index = 22 group_column_name = nsitotalscore data = 38
		// group_column_index = 23 group_column_name = nsifrmcompltdate data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBI_INVRL663XV1
		// group_column_index = 1 group_column_name = subjectidnum data = 34P1022
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = visitdate data = null
		// group_column_index = 4 group_column_name = sitename data = W.G. 'Bill' Hefner VA Medical Center
		// group_column_index = 5 group_column_name = dayssincebaseline data = 0
		// group_column_index = 6 group_column_name = casecontrlind data = Case
		// group_column_index = 7 group_column_name = generalnotestxt data = null
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveNeuro = true;
	    RepeatableGroupTable neuroTable = null;
	    int neuroIndex[] = new int[22];
	    for (i = 0; i < 22; i++) {
	    	neuroIndex[i] = -1;
	    }
        int totalScoreIndex = -1;
	     // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		 // System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			 // System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			 // System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Neurobehavioral Symptom Inventory")) {
				    haveNeuro = false;
				    neuroTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			 // System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	 // System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		      // System.out.println("group_column_index = " + i +
		       // " group_column_name = " + columnNameVector.get(i) +
		      // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Neurobehavioral Symptom Inventory")) {
				if (columnNameVector.get(i).equalsIgnoreCase("nsidizscore")) {
					neuroIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsibalncimprmntscore")) {
					neuroIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsicoordntnimprmntscore")) {
					neuroIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsihdchescore")) {
					neuroIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsinausscore")) {
					neuroIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsivisnimprmntscore")) {
					neuroIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsisenstvlgtscore")) {
					neuroIndex[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsihearngimprmntscore")) {
					neuroIndex[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsisenstvnoisscore")) {
					neuroIndex[8] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsinumbnssimprmntscore")) {
					neuroIndex[9] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsitastimprmntscore")) {
					neuroIndex[10] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsiapptitimprmntscore")) {
					neuroIndex[11] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsiconctrtnimprmntscore")) {
					neuroIndex[12] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsimmryimprmntscore")) {
					neuroIndex[13] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsidecsnimprmntscore")) {
					neuroIndex[14] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsislwthnkngimprmntscore")) {
					neuroIndex[15] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsifatigimprmntscore")) {
					neuroIndex[16] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsislpimprmntscore")) {
					neuroIndex[17] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsianxtyimprmntscore")) {
					neuroIndex[18] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsideprsnimprmntscore")) {
					neuroIndex[19] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsiirrabltyimprmntscore")) {
					neuroIndex[20] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsifrustrtnimprmntscore")) {
					neuroIndex[21] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("nsitotalscore")) {
					totalScoreIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveNeuro) {
			for (i = 0; i <= 21; i++) {
				if (neuroTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									neuroTable.getRepeatableGroupName(),
									neuroTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(neuroTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									neuroTable.getDataFilePositionMapping(i),
									neuroTable.getRepeatableGroupName(),
									neuroTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(neuroTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							neuroTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 21; i++)			
	    } // if (!haveNeuro)
		else { // haveNeuro
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
			for (j = 0; j < neuroIndex.length; j++) { 
		    	i = neuroIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));  
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveNeuro
	}
	
	private void validatePSQI(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	PSQI
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Form Administration Group
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = contexttype data = After Injury
		// group_column_index = 1 group_column_name = contexttypeoth data = null
		// group_column_index = 2 group_column_name = datasource data = Participant/subject
		// group_column_index = 3 group_column_name = datasourceoth data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = PSQI
		// rgTable.getSize() = 31
		// rgEntries.size() = 1
		// columnNameVector.size() = 31
		// group_column_index = 0 group_column_name = psqibedpastmonthtime data = 22:00
		// group_column_index = 1 group_column_name = psqifallasleeppastmonthscl data = 1
		// Note that this is 0;1;2;3
		// The original time to fall asleep in minutes has been
		// irreversibly lost.
		// group_column_index = 2 group_column_name = psqiwakeuppastmonthtime data = 6:00
		// group_column_index = 3 group_column_name = psqiactsleeppastmonthscl data = 0
		// Note that this is 0;1;2;3
		// The original actual sleeping time in hours has been irreversibly 
		// lost.  This means that the psqiSleepEfficiencyScl calculation
		// which uses the actual sleeping time in hours cannot be
		// double checked.
		// group_column_index = 4 group_column_name = psqinosleepin30minpastmonthscl data = 2
		// group_column_index = 5 group_column_name = psqiwakeupnightpastmonthscl data = 1
		// group_column_index = 6 group_column_name = psqiwakeupbathroompastmonthscl data = 1
		// group_column_index = 7 group_column_name = psqicannotbreathepastmonthscl data = 0
		// group_column_index = 8 group_column_name = psqicoughsnoreloudpastmonthscl data = 0
		// group_column_index = 9 group_column_name = psqifeelcoldpastmonthscl data = 0
		// group_column_index = 10 group_column_name = psqifeelhotpastmonthscl data = 1
		// group_column_index = 11 group_column_name = psqihadbaddreamspastmonthscl data = 0
		// group_column_index = 12 group_column_name = psqipainpastmonthscl data = 1
		// group_column_index = 13 group_column_name = psqiotherrsnpastmonthscloth data = General restlessness, not attributed to anxiety or symptoms
		// group_column_index = 14 group_column_name = psqiotherrsnpastmonthscl data = 2
		// group_column_index = 15 group_column_name = psqisleepqualitypastmonthscl data = 0
		// group_column_index = 16 group_column_name = psqisleepmedpastmonthscl data = 0
		// group_column_index = 17 group_column_name = psqitroublestayawakepastmoscl data = 0
		// group_column_index = 18 group_column_name = psqiproblemethusiasmpastmoscl data = 1
		// group_column_index = 19 group_column_name = psqibedpartnerscl data = 3
		// group_column_index = 20 group_column_name = psqiprtnrrprtloudsnorepstmoscl data = 0
		// group_column_index = 21 group_column_name = psqiprtnrrprtpsebreathpstmoscl data = 0
		// group_column_index = 22 group_column_name = psqiprtnrrprttwitchpstmonthscl data = 0
		// group_column_index = 23 group_column_name = psqiprtnrrprtdisorientpstmoscl data = 0
		// group_column_index = 24 group_column_name = psqiptnrrprtothrestpstmoscloth data = Cant get comfortable
		// group_column_index = 25 group_column_name = psqiprtnrrprtothrestpastmoscl data = 1
		// group_column_index = 26 group_column_name = psqisleepdistbscl data = 1
		// group_column_index = 27 group_column_name = psqisleeplatencyscl data = 2
		// group_column_index = 28 group_column_name = psqidaydysfunctionsleepscl data = 1
		// group_column_index = 29 group_column_name = psqisleepefficiencyscl data = 0
		// group_column_index = 30 group_column_name = psqitotalscore data = 4
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBI_INVABC12XYZ
		// group_column_index = 1 group_column_name = subjectidnum data = TEAM 2008
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = visitdate data = 2016-12-13T00:00:00Z
		// group_column_index = 4 group_column_name = sitename data = University of Pittsburgh
		// group_column_index = 5 group_column_name = casecontrlind data = Case
		// group_column_index = 6 group_column_name = dayssincebaseline data = null
		// group_column_index = 7 group_column_name = generalnotestxt data = visit2
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    int visitdateIndex = -1;
	    String visitDate = null;
	    boolean Q5jNeeded = false;
	    boolean havePSQI = true;
	    RepeatableGroupTable PSQITable = null;
	    int neededIndex[] = null;
	    String psqiData;
	    int numberScoresMissing = 0;
	    int numberScoresNotInteger = 0;
	    Vector<Integer>missingIndices = new Vector<Integer>();
	    Vector<Integer>notIntegerIndices = new Vector<Integer>();
	    Vector<String>notIntegerData = new Vector<String>();
	    int psqiBedPastMonthTimeIndex = -1;
	    String psqiBedPastMonthTime = null;
	    int psqiWakeUpPastMonthTimeIndex = 1;
	    String psqiWakeUpPastMonthTime = null;
	    int psqiActSleepPastMonthSclIndex = -1;
	    int psqiActSleepPastMonthScl = -1; 
	    int psqiSleepMedPastMonthSclIndex = -1;
	    int psqiSleepMedPastMonthScl = -1;
	    int psqiSleepQualityPastMonthSclIndex = -1;
	    int psqiSleepQualityPastMonthScl = -1;
	    int psqiTroubleStayAwakePastMoSclIndex = -1;
	    int psqiTroubleStayAwakePastMoScl = -1;
	    int psqiProblemEthusiasmPastMoSclIndex = -1;
	    int psqiProblemEthusiasmPastMoScl = -1;
	    int psqiDayDysfunctionSleepSclIndex = -1;
	    int psqiDayDysfunctionSleepScl = -1;
	    String psqiDayDysfunctionSleepSclString = null;
	    int calculatedpsqiDayDysfunctionSleepScl = -1;
	    int psqiWakeupNightPastMonthSclIndex = -1;
	    int psqiWakeupNightPastMonthScl = -1;
	    int psqiWakeupBathroomPastMonthSclIndex = -1;
	    int psqiWakeupBathroomPastMonthScl = -1;
	    int psqiCannotBreathePastMonthSclIndex = -1;
	    int psqiCannotBreathePastMonthScl = -1;
	    int psqiCoughSnoreLoudPastMonthSclIndex = -1;
	    int psqiCoughSnoreLoudPastMonthScl = -1;
	    int psqiFeelColdPastMonthSclIndex = -1;
	    int psqiFeelColdPastMonthScl = -1;
	    int psqiFeelHotPastMonthSclIndex = -1;
	    int psqiFeelHotPastMonthScl = -1;
	    int psqiHadBadDreamsPastMonthSclIndex = -1;
	    int psqiHadBadDreamsPastMonthScl = -1;
	    int psqiPainPastMonthSclIndex = -1;
	    int psqiPainPastMonthScl = -1;
	    int psqiOtherRsnPastMonthSclIndex = -1;
	    int psqiOtherRsnPastMonthScl = -1;
	    int psqiOtherRsnPastMonthSclOTHIndex = -1;
	    String psqiOtherRsnPastMonthSclOTH = null;
	    int psqiBedPartnerSclIndex = -1;
	    int psqiBedPartnerScl = -1;
	    int psqiPrtnrRprtLoudSnorePstMoSclIndex = -1;
	    int psqiPrtnrRprtLoudSnorePstMoScl = -1;
	    int psqiPrtnrRprtPseBreathPstMoSclIndex = -1;
	    int psqiPrtnrRprtPseBreathPstMoScl = -1;
	    int psqiPrtnrRprtTwitchPstMonthSclIndex = -1;
	    int psqiPrtnrRprtTwitchPstMonthScl = -1;
	    int psqiPrtnrRprtDisorientPstMoSclIndex = -1;
	    int psqiPrtnrRprtDisorientPstMoScl = -1;
	    int psqiPtnrRprtOthRestPstMoSclOTHIndex = -1;
	    String psqiPtnrRprtOthRestPstMoSclOTH = null;
	    int psqiPrtnrRprtOthRestPastMoSclIndex = -1;
	    int psqiPrtnrRprtOthRestPastMoScl = -1;
	    int psqiSleepDistbSclIndex = -1;
	    String psqiSleepDistbSclString = null;
	    int psqiSleepDistbScl = -1;
	    int calculatedpsqiSleepDistbScl = -1;
	    int sleepDistbSclIndex = -1;
	    int psqiSleepEfficiencySclIndex = -1;
	    int psqiSleepEfficiencyScl = -1;
	    int psqiFallAsleepPastMonthSclIndex = -1;
	    int psqiFallAsleepPastMonthScl  = -1;
	    int psqiNoSleepIn30minPastMonthSclIndex = -1;
	    int psqiNoSleepIn30minPastMonthScl = -1;
	    int psqiSleepLatencySclIndex = -1;
	    String psqiSleepLatencySclString = null;
	    int psqiSleepLatencyScl = -1;
	    int calculatedpsqiSleepLatencyScl = -1;
	    int psqiTotalScore = -1;
	    int calculatedTotalScore = 0;
	    String psqiTotalScoreString = null;
	    int totalScoreIndex = -1;
	    int psqiIndex[] = new int[31];
	    for (i = 0; i < 31; i++) {
	    	psqiIndex[i] = -1;
	    }
	    
	     // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		 // System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			 // System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			 // System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("PSQI")) {
				    havePSQI = false;
				    PSQITable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			 // System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		      // System.out.println("group_column_index = " + i +
		      //  " group_column_name = " + columnNameVector.get(i) +
		      // " data = " + dataVector.get(i)) ;	
		    // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("visitdate")) {
					visitdateIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("PSQI")) {
			    if (columnNameVector.get(i).equalsIgnoreCase("psqiBedPastMonthTime")) {
			    	psqiBedPastMonthTimeIndex = bufSizeIndex;
			    	psqiIndex[0] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiFallAsleepPastMonthScl")) {
			    	psqiFallAsleepPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[1] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiWakeUpPastMonthTime")) {
			    	psqiWakeUpPastMonthTimeIndex = bufSizeIndex;
			    	psqiIndex[2] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiActSleepPastMonthScl")) {
			    	psqiActSleepPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[3] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiNoSleepIn30minPastMonthScl")) {
			    	psqiNoSleepIn30minPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[4] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiWakeupNightPastMonthScl")) {
			    	psqiWakeupNightPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[5] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiWakeupBathroomPastMonthScl")) {
			    	psqiWakeupBathroomPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[6] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiCannotBreathePastMonthScl")) {
			    	psqiCannotBreathePastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[7] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiCoughSnoreLoudPastMonthScl")) {
			    	psqiCoughSnoreLoudPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[8] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiFeelColdPastMonthScl")) {
			    	psqiFeelColdPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[9] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiFeelHotPastMonthScl")) {
			    	psqiFeelHotPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[10] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiHadBadDreamsPastMonthScl")) {
			    	psqiHadBadDreamsPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[11] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiPainPastMonthScl")) {
			    	psqiPainPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[12] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiOtherRsnPastMonthScl")) {
			    	psqiOtherRsnPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[13] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiOtherRsnPastMonthSclOTH")) {
			    	psqiOtherRsnPastMonthSclOTHIndex = bufSizeIndex;
			    	psqiIndex[14] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiSleepQualityPastMonthScl")) {
			    	psqiSleepQualityPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[15] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiSleepMedPastMonthScl")) {
			    	psqiSleepMedPastMonthSclIndex = bufSizeIndex;
			    	psqiIndex[16] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiTroubleStayAwakePastMoScl")) {
			    	psqiTroubleStayAwakePastMoSclIndex = bufSizeIndex;
			    	psqiIndex[17] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiProblemEthusiasmPastMoScl")) {
			    	psqiProblemEthusiasmPastMoSclIndex = bufSizeIndex;
			    	psqiIndex[18] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiBedPartnerScl")) {
			    	psqiBedPartnerSclIndex = bufSizeIndex;
			    	psqiIndex[19] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiPrtnrRprtLoudSnorePstMoScl")) {
			    	psqiPrtnrRprtLoudSnorePstMoSclIndex = bufSizeIndex;
			    	psqiIndex[20] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiPrtnrRprtPseBreathPstMoScl")) {
			    	psqiPrtnrRprtPseBreathPstMoSclIndex = bufSizeIndex;
			    	psqiIndex[21] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiPrtnrRprtTwitchPstMonthScl")) {
			    	psqiPrtnrRprtTwitchPstMonthSclIndex = bufSizeIndex;
			    	psqiIndex[22] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiPrtnrRprtDisorientPstMoScl")) {
			    	psqiPrtnrRprtDisorientPstMoSclIndex = bufSizeIndex;
			    	psqiIndex[23] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiPtnrRprtOthRestPstMoSclOTH")) {
			    	psqiPtnrRprtOthRestPstMoSclOTHIndex = bufSizeIndex;
			    	psqiIndex[24] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiPrtnrRprtOthRestPastMoScl")) {
			    	psqiPrtnrRprtOthRestPastMoSclIndex = bufSizeIndex;
			    	psqiIndex[25] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiDayDysfunctionSleepScl")) {
			    	psqiDayDysfunctionSleepSclString = dataVector.get(i);
			    	psqiDayDysfunctionSleepSclIndex = bufSizeIndex;
			    	psqiIndex[26] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiSleepDistbScl")) {
			    	psqiSleepDistbSclString = dataVector.get(i);
			    	psqiSleepDistbSclIndex = bufSizeIndex;
			    	psqiIndex[27] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiSleepEfficiencyScl")) {
			    	psqiSleepEfficiencySclIndex = bufSizeIndex;
			    	psqiIndex[28] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiSleepLatencyScl")) {
			    	psqiSleepLatencySclString = dataVector.get(i);
			    	psqiSleepLatencySclIndex = bufSizeIndex;
			    	psqiIndex[29] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("psqiTotalScore")) {
			    	psqiTotalScoreString = dataVector.get(i);
			    	totalScoreIndex = bufSizeIndex;
			    	psqiIndex[30] = bufSizeIndex;
			    }
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));		
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		if (visitdateIndex > -1) {
		    visitDate = bufDataVector.get(visitdateIndex);
		    if (visitDate != null) {
		        int comparison = compareDates(visitDate, "2005-05-20");
		        Q5jNeeded = (comparison == -1);
		    }
		    else {
		    	Q5jNeeded = false;
		    }
		} // if (visitdateIndex > -1)
		
		if (Q5jNeeded) {
			neededIndex = new int[] {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18};
		}
		else {
			neededIndex = new int[] {0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18};
		}
		
		if (!havePSQI) {
			for (j = 0; j < neededIndex.length; j++) {
				i = neededIndex[j];
				if (PSQITable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									PSQITable.getRepeatableGroupName(),
									PSQITable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(PSQITable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									PSQITable.getDataFilePositionMapping(i),
									PSQITable.getRepeatableGroupName(),
									PSQITable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(PSQITable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							PSQITable.getDataFilePositionMapping(i), message));
				}
			} // for (j = 0; i < neededIndex.length; j++)			
	    } // if (!havePSQI)
		else { // havePSQI
			repeatable_group_id = bufRepeatable_group_id.get(psqiIndex[0]);
			group_row_index = bufGroup_row_index.get(psqiIndex[0]);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					repeatable_group_id, null);
			for (j = 0; j < psqiIndex.length; j++) {
				i = psqiIndex[j];
				psqiData = bufDataVector.get(i);
				if ((psqiData == null) || (psqiData.isEmpty()) || (psqiData.trim() == null) ||
						(psqiData.trim().isEmpty())) {
					if (((i == psqiOtherRsnPastMonthSclOTHIndex) ||
					    (i == psqiOtherRsnPastMonthSclIndex)) && Q5jNeeded) {
						numberScoresMissing++;
					    missingIndices.add(bufIndex.get(i));
					}
					else if ((i == psqiBedPastMonthTimeIndex) ||
					    (i == psqiFallAsleepPastMonthSclIndex) ||
					    (i == psqiWakeUpPastMonthTimeIndex) ||
					    (i == psqiActSleepPastMonthSclIndex) ||
					    (i == psqiNoSleepIn30minPastMonthSclIndex) ||
					    (i == psqiWakeupNightPastMonthSclIndex)  ||
					    (i == psqiWakeupBathroomPastMonthSclIndex) ||
					    (i == psqiCannotBreathePastMonthSclIndex) ||
					    (i == psqiCoughSnoreLoudPastMonthSclIndex) ||
					    (i == psqiFeelColdPastMonthSclIndex) ||
					    (i == psqiFeelHotPastMonthSclIndex) ||
					    (i == psqiHadBadDreamsPastMonthSclIndex) ||
					    (i == psqiPainPastMonthSclIndex) ||
					    (i == psqiSleepQualityPastMonthSclIndex) ||
					    (i == psqiSleepMedPastMonthSclIndex) ||
					    (i == psqiTroubleStayAwakePastMoSclIndex) ||
					    (i == psqiProblemEthusiasmPastMoSclIndex) ||
					    (i == psqiSleepEfficiencySclIndex)) { 
					    numberScoresMissing++;
					    missingIndices.add(bufIndex.get(i));
					}	
				}
				else {
					try {
						if (i == psqiOtherRsnPastMonthSclIndex) {
							psqiOtherRsnPastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiFallAsleepPastMonthSclIndex) {
						    psqiFallAsleepPastMonthScl = Integer.valueOf(psqiData).intValue();	
						}
						else if (i == psqiActSleepPastMonthSclIndex) {
							psqiActSleepPastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiNoSleepIn30minPastMonthSclIndex) {
						    psqiNoSleepIn30minPastMonthScl = Integer.valueOf(psqiData).intValue();	
						}
						else if (i == psqiWakeupNightPastMonthSclIndex) {
							psqiWakeupNightPastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiWakeupBathroomPastMonthSclIndex) {
							psqiWakeupBathroomPastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiCannotBreathePastMonthSclIndex) {
							psqiCannotBreathePastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiCoughSnoreLoudPastMonthSclIndex) {
							psqiCoughSnoreLoudPastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiFeelColdPastMonthSclIndex) {
							psqiFeelColdPastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiFeelHotPastMonthSclIndex) {
							psqiFeelHotPastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiHadBadDreamsPastMonthSclIndex) {
							psqiHadBadDreamsPastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiPainPastMonthSclIndex) {
							psqiPainPastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiSleepQualityPastMonthSclIndex) {
							psqiSleepQualityPastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiSleepMedPastMonthSclIndex) {
							psqiSleepMedPastMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiTroubleStayAwakePastMoSclIndex) {
							psqiTroubleStayAwakePastMoScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiProblemEthusiasmPastMoSclIndex) {
							psqiProblemEthusiasmPastMoScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiBedPartnerSclIndex) {
							psqiBedPartnerScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiPrtnrRprtLoudSnorePstMoSclIndex) {
							psqiPrtnrRprtLoudSnorePstMoScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiPrtnrRprtPseBreathPstMoSclIndex) {
							psqiPrtnrRprtPseBreathPstMoScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiPrtnrRprtTwitchPstMonthSclIndex) {
							psqiPrtnrRprtTwitchPstMonthScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiPrtnrRprtDisorientPstMoSclIndex) {
							psqiPrtnrRprtDisorientPstMoScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiPrtnrRprtOthRestPastMoSclIndex) {
							psqiPrtnrRprtOthRestPastMoScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiSleepEfficiencySclIndex) {
							psqiSleepEfficiencyScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiDayDysfunctionSleepSclIndex) {
							psqiDayDysfunctionSleepScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiSleepDistbSclIndex) {
							psqiSleepDistbScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == psqiSleepLatencySclIndex) {
							psqiSleepLatencyScl = Integer.valueOf(psqiData).intValue();
						}
						else if (i == totalScoreIndex) {
							psqiTotalScore = Integer.valueOf(psqiData).intValue();
						}
					}
					catch (NumberFormatException e) {
					    numberScoresNotInteger++;
						notIntegerIndices.add(bufIndex.get(i));
						notIntegerData.add(psqiData);
					}
				}
			} // for (j = 0; j < psqiIndex.length; j++)
			
			if (numberScoresMissing >= 1) {
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    index = bufIndex.get(psqiDayDysfunctionSleepSclIndex);
		    if ((psqiTroubleStayAwakePastMoScl > 0) && (psqiProblemEthusiasmPastMoScl > 0)) {
			    int q89Sum = psqiTroubleStayAwakePastMoScl + psqiProblemEthusiasmPastMoScl;
			    if (q89Sum == 0) {
			    	calculatedpsqiDayDysfunctionSleepScl = 0;	
			    }
			    else if ((q89Sum >= 1) && (q89Sum <= 2)) {
			    	calculatedpsqiDayDysfunctionSleepScl = 1;	
			    }
			    else if ((q89Sum >= 3) && (q89Sum <= 4)) {
			    	calculatedpsqiDayDysfunctionSleepScl = 2;	
			    }
			    else if ((q89Sum >= 5) && (q89Sum <= 6)) {
			    	calculatedpsqiDayDysfunctionSleepScl = 3;	
			    }
			    
			    if (psqiDayDysfunctionSleepScl > -1) {
			    	if (psqiDayDysfunctionSleepScl != calculatedpsqiDayDysfunctionSleepScl) {
			    		if (rgTable.getDataFilePositionMapping(index) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													psqiDayDysfunctionSleepSclString, 
													String.valueOf(calculatedpsqiDayDysfunctionSleepScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													psqiDayDysfunctionSleepSclString, 
													String.valueOf(calculatedpsqiDayDysfunctionSleepScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
			    		}
			    	}
			    } // if (psqiDayDysfunctionSleepScl > -1)
			    else {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
				    	if ((psqiDayDysfunctionSleepSclString == null) || (psqiDayDysfunctionSleepSclString.isEmpty()) 
				    			|| (psqiDayDysfunctionSleepSclString.trim() == null) ||
								(psqiDayDysfunctionSleepSclString.trim().isEmpty())) {
				    		message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													"blank", 
													String.valueOf(calculatedpsqiDayDysfunctionSleepScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));
				    	}
				    	else {
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													psqiDayDysfunctionSleepSclString, 
													String.valueOf(calculatedpsqiDayDysfunctionSleepScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));
				    	}	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
				    	if ((psqiDayDysfunctionSleepSclString == null) || (psqiDayDysfunctionSleepSclString.isEmpty()) 
				    			|| (psqiDayDysfunctionSleepSclString.trim() == null) ||
								(psqiDayDysfunctionSleepSclString.trim().isEmpty())) {
				    		message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													"blank", 
													String.valueOf(calculatedpsqiDayDysfunctionSleepScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
				    	}
				    	else {
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													psqiDayDysfunctionSleepSclString, 
													String.valueOf(calculatedpsqiDayDysfunctionSleepScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
				    	}
			    	}
			    }
		    } // if ((psqiTroubleStayAwakePastMoScl > 0) && (psqiProblemEthusiasmPastMoScl > 0))
		    else if (psqiDayDysfunctionSleepScl > -1) {
		    	if (rgTable.getDataFilePositionMapping(index) == null) {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											psqiDayDysfunctionSleepSclString);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
		    	}
		    	else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											psqiDayDysfunctionSleepSclString);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
		    	}
		    } // else if (psqiDayDysfunctionSleepScl > -1)
		    
		    index = bufIndex.get(psqiSleepDistbSclIndex);
		    if (psqiOtherRsnPastMonthSclOTH == null) {
		    	psqiOtherRsnPastMonthScl = 0;
		    }
		    
		    if ((psqiWakeupNightPastMonthScl > -1) && (psqiWakeupBathroomPastMonthScl > -1) &&
		    		(psqiCannotBreathePastMonthScl > -1) && (psqiCoughSnoreLoudPastMonthScl > -1) &&
		    		(psqiFeelColdPastMonthScl > -1) && (psqiFeelHotPastMonthScl > -1) && 
		    		(psqiHadBadDreamsPastMonthScl > -1) && (psqiPainPastMonthScl > -1) &&
		    		(psqiOtherRsnPastMonthScl > -1)) {
			    int q5bjSum = psqiWakeupNightPastMonthScl +
			    		psqiWakeupBathroomPastMonthScl +
			    		psqiCannotBreathePastMonthScl +
			    		psqiCoughSnoreLoudPastMonthScl +
			    		psqiFeelColdPastMonthScl +
			    		psqiFeelHotPastMonthScl +
			    		psqiHadBadDreamsPastMonthScl +
			    		psqiPainPastMonthScl +
			    		psqiOtherRsnPastMonthScl;
			    
			    if (q5bjSum == 0) {
			    	calculatedpsqiSleepDistbScl = 0;	
			    }
			    else if ((q5bjSum >= 1) && (q5bjSum <= 9)) {
			    	calculatedpsqiSleepDistbScl = 1;	
			    }
			    else if ((q5bjSum >= 10) && (q5bjSum <= 18)) {
			    	calculatedpsqiSleepDistbScl = 2;	
			    }
			    else if (q5bjSum >= 19) {
			    	calculatedpsqiSleepDistbScl = 3;	
			    }
			    
			    if (psqiSleepDistbScl > -1) {
			    	if (psqiSleepDistbScl != calculatedpsqiSleepDistbScl) {
			    		if (rgTable.getDataFilePositionMapping(index) == null) {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
										    rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													psqiSleepDistbSclString, 
													String.valueOf(calculatedpsqiSleepDistbScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
			    		}
			    		else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
										    rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													psqiSleepDistbSclString, 
													String.valueOf(calculatedpsqiSleepDistbScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
			    		}
			    	}
			    } // if (psqiSleepDistbScl > -1)
			    else {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
				    	if ((psqiSleepDistbSclString == null) || (psqiSleepDistbSclString.isEmpty()) 
				    			|| (psqiSleepDistbSclString.trim() == null) ||
								(psqiSleepDistbSclString.trim().isEmpty())) {
				    		message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													"blank", 
													String.valueOf(calculatedpsqiSleepDistbScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));
				    	}
				    	else {
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													psqiSleepDistbSclString, 
													String.valueOf(calculatedpsqiSleepDistbScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));
				    	}	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
				    	if ((psqiSleepDistbSclString == null) || (psqiSleepDistbSclString.isEmpty()) 
				    			|| (psqiSleepDistbSclString.trim() == null) ||
								(psqiSleepDistbSclString.trim().isEmpty())) {
				    		message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													"blank", 
													String.valueOf(calculatedpsqiSleepDistbScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
				    	}
				    	else {
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
													psqiSleepDistbSclString, 
													String.valueOf(calculatedpsqiSleepDistbScl));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
				    	}
			    	}
			    }
			    
		    } // if ((psqiWakeupNightPastMonthScl > -1) && (psqiWakeupBathroomPastMonthScl > -1) &&
		    else if (psqiSleepDistbScl > -1) {
		    	if (rgTable.getDataFilePositionMapping(index) == null) {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											psqiSleepDistbSclString);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));		
		    	}
		    	else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											psqiSleepDistbSclString);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));	
		    	}
		    } // else if (psqiSleepDistbScl > -1)
		    
		    index = bufIndex.get(psqiSleepLatencySclIndex);
		    if ((psqiFallAsleepPastMonthScl > -1) && (psqiNoSleepIn30minPastMonthScl > -1)) {
		    int q25a = psqiFallAsleepPastMonthScl + psqiNoSleepIn30minPastMonthScl;
		    if (q25a == 0) {
		    	calculatedpsqiSleepLatencyScl = 0;	
		    }
		    else if ((q25a >= 1) && (q25a <= 2)) {
		    	calculatedpsqiSleepLatencyScl = 1;		
		    }
		    else if ((q25a >= 3) && (q25a <= 4)) {
		    	calculatedpsqiSleepLatencyScl = 2;		
		    }
		    else if ((q25a >= 5) && (q25a <= 6)) {
		    	calculatedpsqiSleepLatencyScl = 3;		
		    }
		    
		    if (psqiSleepLatencyScl > -1) {
		    	if (psqiSleepLatencyScl != calculatedpsqiSleepLatencyScl) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
												String.valueOf(psqiSleepLatencyScl), 
												String.valueOf(calculatedpsqiSleepLatencyScl));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
									    rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
												String.valueOf(psqiSleepLatencyScl), 
												String.valueOf(calculatedpsqiSleepLatencyScl));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } // if (psqiSleepLatencyScl > -1)
		    else {
		    	if (rgTable.getDataFilePositionMapping(index) == null) {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
			    	if ((psqiSleepLatencySclString == null) || (psqiSleepLatencySclString.isEmpty()) 
			    			|| (psqiSleepLatencySclString.trim() == null) ||
							(psqiSleepLatencySclString.trim().isEmpty())) {
			    		message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
												"blank", 
												String.valueOf(calculatedpsqiSleepLatencyScl));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));
			    	}
			    	else {
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
												psqiSleepLatencySclString, 
												String.valueOf(calculatedpsqiSleepLatencyScl));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));
			    	}	
		    	}
		    	else {
			    	message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
			    	if ((psqiSleepLatencySclString == null) || (psqiSleepLatencySclString.isEmpty()) 
			    			|| (psqiSleepLatencySclString.trim() == null) ||
							(psqiSleepLatencySclString.trim().isEmpty())) {
			    		message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
												"blank", 
												String.valueOf(calculatedpsqiSleepLatencyScl));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    	else {
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_CALCULATION,
												psqiSleepLatencySclString, 
												String.valueOf(calculatedpsqiSleepLatencyScl));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
		    	}
		    }
	    } // if ((psqiFallAsleepPastMonthScl > -1) && (psqiNoSleepIn30minPastMonthScl > -1))
	    else if (psqiSleepLatencyScl > -1) {
	    	if (rgTable.getDataFilePositionMapping(index) == null) {
	    		message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, group_row_index),
								rgTable.getRepeatableGroupName(),
								rgTable.getColumnName(index));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
										psqiSleepLatencySclString);
				table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
						-1, message));		
	    	}
		    else {
	    		message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index),
								rgTable.getRepeatableGroupName(),
								rgTable.getColumnName(index));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
										psqiSleepLatencySclString);
				table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
						rgTable.getDataFilePositionMapping(index), message));	
	    	}
	    } // else if (psqiSleepLatencyScl > -1)
		    
		index = bufIndex.get(totalScoreIndex);
		if ((psqiActSleepPastMonthScl > -1) && (calculatedpsqiDayDysfunctionSleepScl > -1) &&
				(calculatedpsqiSleepDistbScl > -1) && (psqiSleepEfficiencyScl > -1) &&
				(calculatedpsqiSleepLatencyScl > -1) && (psqiSleepMedPastMonthScl > -1) &&
				(psqiSleepQualityPastMonthScl > -1)) {
			calculatedTotalScore = psqiActSleepPastMonthScl + 
		    		calculatedpsqiDayDysfunctionSleepScl + 
		    		calculatedpsqiSleepDistbScl +
		    		psqiSleepEfficiencyScl +
		    		calculatedpsqiSleepLatencyScl +
		    		psqiSleepMedPastMonthScl + psqiSleepQualityPastMonthScl;
		    
		    if (psqiTotalScore > -1) {
		    	if (psqiTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												psqiTotalScoreString, String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												psqiTotalScoreString, String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    } // if (psqiTotalScore > -1)
		    else {
		    	if (rgTable.getDataFilePositionMapping(index) == null) {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
			    	if ((psqiTotalScoreString == null) || (psqiTotalScoreString.isEmpty()) 
			    			|| (psqiTotalScoreString.trim() == null) ||
							(psqiTotalScoreString.trim().isEmpty())) {
			    		message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank", 
												String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));
			    	}
			    	else {
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												psqiTotalScoreString, 
												String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));
			    	}	
		    	}
		    	else {
			    	message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
			    	if ((psqiTotalScoreString == null) || (psqiTotalScoreString.isEmpty()) 
			    			|| (psqiTotalScoreString.trim() == null) ||
							(psqiTotalScoreString.trim().isEmpty())) {
			    		message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank", 
												String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    	else {
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												psqiTotalScoreString, 
												String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
		    	}
		    }
		} // if ((psqiActSleepPastMonthScl > -1) && (calculatedpsqiDayDysfunctionSleepScl > -1) &&
		else if (psqiTotalScore > -1) {
			if (rgTable.getDataFilePositionMapping(index) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, group_row_index),
								rgTable.getRepeatableGroupName(),
								rgTable.getColumnName(index));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
										psqiTotalScoreString);
				table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
						-1, message));		
			}
			else {
	    		message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index),
								rgTable.getRepeatableGroupName(),
								rgTable.getColumnName(index));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
										psqiTotalScoreString);
				table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
						rgTable.getDataFilePositionMapping(index), message));	
			}
	    } // else if (psqiTotalScore > -1)
		    
	  } // else havePSQI	
		
	}

	private int compareDates(String actualDate, String referenceDate) {
		// = -1 if actualDate < referenceDate
		// = 0 if actualDate = referenceDate
		// = 1 if actualDate > referenceDate
		// visitdate is of form 2016-05-23T00:00:00Z
		int actualYear;
		int referenceYear;
		int actualMonth;
		int referenceMonth;
		int actualDay;
		int referenceDay;
		actualYear = Integer.valueOf(actualDate.substring(0,4)).intValue();
		referenceYear = Integer.valueOf(referenceDate.substring(0,4)).intValue();
		if (actualYear < referenceYear) {
			return -1;
		}
		else if (actualYear > referenceYear) {
			return 1;
		}
		else {
			actualMonth = Integer.valueOf(actualDate.substring(5,7)).intValue();
			referenceMonth = Integer.valueOf(referenceDate.substring(5,7)).intValue();
			if (actualMonth < referenceMonth) {
				return -1;
			}
			else if (actualMonth > referenceMonth) {
				return 1;
			}
			else {
				actualDay = Integer.valueOf(actualDate.substring(8,10)).intValue();
				referenceDay = Integer.valueOf(referenceDate.substring(8,10)).intValue();
				if (actualDay < referenceDay) {
					return -1;
				}
				else if (actualDay > referenceDay) {
					return 1;
				}
				else {
					return 0;
				}
			}
		}
	}
	
	private void validatePCLC_Standard(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>> dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	PCLC_Standard
		// table.getColumnCount = 2
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Questions
		// rgTable.getSize() = 18
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 18
		// group_column_index = 0 group_column_name = pclsmemoriesind data = 3
		// group_column_index = 1 group_column_name = pclsdreamsind data = 2
		// group_column_index = 2 group_column_name = pclshappenagainind data = 2
		// group_column_index = 3 group_column_name = pclsveryupsetind data = 5
		// group_column_index = 4 group_column_name = pclsphysicalreactionsind data = 3
		// group_column_index = 5 group_column_name = pclsavoidhavingfeelingind data = 2
		// group_column_index = 6 group_column_name = pclsavoidsituationind data = 1
		// group_column_index = 7 group_column_name = pclsrememberimportantind data = 5
		// group_column_index = 8 group_column_name = pclslossinterestind data = 5
		// group_column_index = 9 group_column_name = pclsfeeldistantind data = 5
		// group_column_index = 10 group_column_name = pclsemotionallynumbind data = 5
		// group_column_index = 11 group_column_name = pclsshortfutureind data = 5
		// group_column_index = 12 group_column_name = pclsfallstayasleepind data = 5
		// group_column_index = 13 group_column_name = pclsangryoutburstind data = 5
		// group_column_index = 14 group_column_name = pclsdifficultyconcentratingind data = 5
		// group_column_index = 15 group_column_name = pclssuperalertind data = 4
		// group_column_index = 16 group_column_name = pclsjumpyind data = 4
		// group_column_index = 17 group_column_name = pclctotlscore data = 66
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBIZT566RVY
		// group_column_index = 1 group_column_name = subjectidnum data = null
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = visitdate data = 2012-03-22T00:00:00Z
		// group_column_index = 4 group_column_name = sitename data = NICoE
		// group_column_index = 5 group_column_name = dayssincebaseline data = null
		// group_column_index = 6 group_column_name = casecontrlind data = Case
		// group_column_index = 7 group_column_name = generalnotestxt data = null
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    boolean haveQuestions = true;
	    RepeatableGroupTable questionsTable = null;
	    int questionsIndex[] = new int[17];
	    for (i = 0; i < 17; i++) {
	    	questionsIndex[i] = -1;
	    }
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    
        int totalScoreIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Questions")) {
				    haveQuestions = false;
				    questionsTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		       // System.out.println("group_column_index = " + i +
		       //  " group_column_name = " + columnNameVector.get(i) +
		       // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Questions")) {
				if (columnNameVector.get(i).equalsIgnoreCase("pclsmemoriesind")) {
				    questionsIndex[0] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsdreamsind")) {
				    questionsIndex[1] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclshappenagainind")) {
				    questionsIndex[2] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsveryupsetind")) {
				    questionsIndex[3] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsphysicalreactionsind")) {
				    questionsIndex[4] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsavoidhavingfeelingind")) {
				    questionsIndex[5] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsavoidsituationind")) {
				    questionsIndex[6] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsrememberimportantind")) {
				    questionsIndex[7] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclslossinterestind")) {
				    questionsIndex[8] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsfeeldistantind")) {
				    questionsIndex[9] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsemotionallynumbind")) {
				    questionsIndex[10] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsshortfutureind")) {
				    questionsIndex[11] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsfallstayasleepind")) {
				    questionsIndex[12] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsangryoutburstind")) {
				    questionsIndex[13] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsdifficultyconcentratingind")) {
				    questionsIndex[14] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclssuperalertind")) {
				    questionsIndex[15] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclsjumpyind")) {
				    questionsIndex[16] = bufSizeIndex;	
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("pclctotlscore")) {
				    totalScoreIndex = bufSizeIndex;	
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveQuestions) {
			for (i = 0; i <= 16; i++) {
				if (questionsTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									questionsTable.getRepeatableGroupName(),
									questionsTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(questionsTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));		
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									questionsTable.getDataFilePositionMapping(i),
									questionsTable.getRepeatableGroupName(),
									questionsTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(questionsTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							questionsTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 16; i++)			
	    } // if (!haveQuestions)
		else { // haveQuestions
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
			for (j = 0; j < questionsIndex.length; j++) { 
		    	i = questionsIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));  
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveQuestions
	}
	
	private void validatePHQ9(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	PHQ9
		// table.getColumnCount = 2
		// repeatable_group_id = 0
	    // rgTable.getRepeatableGroupName() = Patient Health Questionnaire (PHQ-9)
		// rgTable.getSize() = 11
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 11
		// group_column_index = 0 group_column_name = phq9intrstpleasractscore data = 2
		// group_column_index = 1 group_column_name = phq9dwndeprssnhopelssscore data = 0
		// group_column_index = 2 group_column_name = phq9sleepimpairscore data = 3
		// group_column_index = 3 group_column_name = phq9tirdlittleenrgyscore data = 3
		// group_column_index = 4 group_column_name = phq9abnrmldietscore data = 2
		// group_column_index = 5 group_column_name = phq9flngfailrscore data = 0
		// group_column_index = 6 group_column_name = phq9concntrtnimprmntscore data = 2
		// group_column_index = 7 group_column_name = phq9movmntspchimprmntscore data = 2
		// group_column_index = 8 group_column_name = phq9bttrddthghtscore data = 0
		// group_column_index = 9 group_column_name = phq9totalscore data = 14
		// group_column_index = 10 group_column_name = phq9diffcltyperfactscre data = Very difficult
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBIWF313YTE
		// group_column_index = 1 group_column_name = subjectidnum data = 125
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = visitdate data = 2017-01-30T00:00:00Z
		// group_column_index = 4 group_column_name = sitename data = University of Arizona
		// group_column_index = 5 group_column_name = dayssincebaseline data = 47
		// group_column_index = 6 group_column_name = casecontrlind data = Case
		// group_column_index = 7 group_column_name = generalnotestxt data = age not submitted
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean havePatient = true;
	    RepeatableGroupTable patientTable = null;
	    int patientIndex[] = new int[9];
	    for (i = 0; i < 9; i++) {
	    	patientIndex[i] = -1;
	    }
	    
        int totalScoreIndex = -1;
	     // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		 // System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			 // System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			 // System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Patient Health Questionnaire (PHQ-9)")) {
				    havePatient = false;
				    patientTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			 // System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	 // System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		      // System.out.println("group_column_index = " + i +
		      //  " group_column_name = " + columnNameVector.get(i) +
		      // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Patient Health Questionnaire (PHQ-9)")) {
				if (columnNameVector.get(i).equalsIgnoreCase("phq9intrstpleasractscore")) {
					patientIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("phq9dwndeprssnhopelssscore")) {
					patientIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("phq9sleepimpairscore")) {
					patientIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("phq9tirdlittleenrgyscore")) {
					patientIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("phq9abnrmldietscore")) {
					patientIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("phq9flngfailrscore")) {
					patientIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("phq9concntrtnimprmntscore")) {
					patientIndex[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("phq9movmntspchimprmntscore")) {
					patientIndex[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("phq9bttrddthghtscore")) {
					patientIndex[8] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("phq9totalscore")) {
					totalScoreIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!havePatient) {
			for (i = 0; i <= 8; i++) {
				if (patientTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									patientTable.getRepeatableGroupName(),
									patientTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(patientTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									patientTable.getDataFilePositionMapping(i),
									patientTable.getRepeatableGroupName(),
									patientTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(patientTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							patientTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 8; i++)			
	    } // if (!havePatient)
		else { // havePatient
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
			for (j = 0; j < patientIndex.length; j++) { 
		    	i = patientIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       
					       calculatedTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
			
			
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));		
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else havePatient
	}
	
	private void validateGPT(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	GPT
		// table.getColumnCount = 5
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Dominant Hand
		// rgTable.getSize() = 5
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 5
		// group_column_index = 0 group_column_name = handpreftyp data = Right hand
		// group_column_index = 1 group_column_name = gpthandtimdur data = 67
		// group_column_index = 2 group_column_name = gpttimetscore data = 0.37
		// group_column_index = 3 group_column_name = gpthandpegdropnum data = 0
		// group_column_index = 4 group_column_name = gpthandpegcorrectnum data = 25
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Hand Preference Type
		// rgTable.getSize() = 1
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 1
		// group_column_index = 0 group_column_name = handpreftyp data = Right hand
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBILK147PLC
		// group_column_index = 1 group_column_name = subjectidnum data = null
		// group_column_index = 2 group_column_name = ageyrs data = 24.81040383
		// group_column_index = 3 group_column_name = visitdate data = null
		// group_column_index = 4 group_column_name = sitename data = NO SITE
		// group_column_index = 5 group_column_name = dayssincebaseline data = null
		// group_column_index = 6 group_column_name = casecontrlind data = null
		// group_column_index = 7 group_column_name = generalnotestxt data = Visit 1
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = Non-Dominant Hand
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = gpthandtimdur data = 57
		// group_column_index = 1 group_column_name = gpttimetscore data = 0.58
		// group_column_index = 2 group_column_name = gpthandpegdropnum data = 0
		// group_column_index = 3 group_column_name = gpthandpegcorrectnum data = 25
		
		Vector<Vector<String>> columnNameVector2;
        Vector<Vector<String>> dataVector2;
        Vector<String> columnNameVector;
        Vector<String> dataVector;
        int i;
        String message;
        Vector<String> bufColumnNameVector = new Vector<String>();
        Vector<String> bufDataVector = new Vector<String>();
        Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
        Vector<Integer> bufGroup_row_index = new Vector<Integer>();
        Vector<Integer> bufIndex = new Vector<Integer>();
        Vector<String> bufRepeatableGroupName = new Vector<String>();
        String repeatableGroupName;
        String guid = null;
        int group_row_index = -1;
        int repeatable_group_id;
        RepeatableGroupTable rgTable = null;
        ArrayList<Integer> rgEntries = null;
        int index = -1;
        String data;
        boolean haveMain = true;
        RepeatableGroupTable mainTable = null;
        int bufSizeIndex = -1;
        int guidIndex =-1;
        int ageyrsIndex = -1;
        boolean haveHandPreferenceType = true;
        RepeatableGroupTable handPreferenceTable = null;
        int handpreftypIndex2 = -1;
        String handpreftyp2 = null;
        boolean haveDominantHand = true;
        RepeatableGroupTable dominantHandTable = null;
        int handpreftypIndex1 = -1;
        boolean validhandpreftyp1 = false;
        String handpreftyp1 = null;
        int handPegDropNumIndex = -1;
        int handPegCorrectNumIndex = -1;
        boolean haveNonDominantHand = true;
        RepeatableGroupTable nonDominantHandTable = null;
        int handPegDropNumIndex2 = -1;
        int handPegCorrectNumIndex2 = -1;
        
        // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Hand Preference Type")) {
					haveHandPreferenceType = false;
					handPreferenceTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Dominant Hand")) {
					haveDominantHand = false;
					dominantHandTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Non-Dominant Hand")) {
					haveNonDominantHand = false;
					nonDominantHandTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		   // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		   // for (i = 0; i < columnNameVector.size(); i++) {
		      // System.out.println("group_column_index = " + i +
		      //  " group_column_name = " + columnNameVector.get(i) +
		      // " data = " + dataVector.get(i)) ;	
		   // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Hand Preference Type")) {
				if (columnNameVector.get(i).equalsIgnoreCase("handpreftyp")) {	
					handpreftypIndex2 = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Dominant Hand")) {
				if (columnNameVector.get(i).equalsIgnoreCase("handpreftyp")) {	
					handpreftypIndex1 = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gpthandpegdropnum")) {
					handPegDropNumIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("gpthandpegcorrectnum")) {
					handPegCorrectNumIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Non-Dominant Hand")) {
				 if (columnNameVector.get(i).equalsIgnoreCase("gpthandpegdropnum")) {
						handPegDropNumIndex2 = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("gpthandpegcorrectnum")) {
						handPegCorrectNumIndex2 = bufSizeIndex;
					}	
			}
		}
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				}
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 16) || (age > 89)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "16 to 89 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "16 to 89 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		
		if (!haveDominantHand) {
			// handpreftyp is 0
			if (dominantHandTable.getDataFilePositionMapping(0) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								dominantHandTable.getRepeatableGroupName(),
								dominantHandTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(dominantHandTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));		
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								dominantHandTable.getDataFilePositionMapping(0),
								dominantHandTable.getRepeatableGroupName(),
								dominantHandTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(dominantHandTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						dominantHandTable.getDataFilePositionMapping(0), message));	
			}
			//  gpthandpegdropnum is 3
			//  gpthandpegcorrectnum is 4
			for (i = 3; i <= 4; i++) {
				if (dominantHandTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									dominantHandTable.getRepeatableGroupName(),
									dominantHandTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(dominantHandTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						     -1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									dominantHandTable.getDataFilePositionMapping(i),
									dominantHandTable.getRepeatableGroupName(),
									dominantHandTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(dominantHandTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							dominantHandTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 3; i <= 4; i++)			
	    } // if (!haveDominantHand)
		else {// haveDominantHand
			if (handpreftypIndex1 >= 0) {
				data = bufDataVector.get(handpreftypIndex1);
				repeatable_group_id = bufRepeatable_group_id.get(handpreftypIndex1);
				group_row_index = bufGroup_row_index.get(handpreftypIndex1);
				index = bufIndex.get(handpreftypIndex1);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}	
				else {
					validhandpreftyp1 = true;
					handpreftyp1 = data;
				}
			  } // if (handpreftypIndex1 >= 0)
			
			int numberTotalScoresMissing = 0;
			int numberTotalScoresNotInteger = 0;
			int rInteger;
			int calculatedTotalScore = 0;
			if (handPegDropNumIndex >= 0) {
				data = bufDataVector.get(handPegDropNumIndex);
				repeatable_group_id = bufRepeatable_group_id.get(handPegDropNumIndex);
				group_row_index = bufGroup_row_index.get(handPegDropNumIndex);
				index = bufIndex.get(handPegDropNumIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					numberTotalScoresMissing++;
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}	
				else {
					try {
				        rInteger = Integer.valueOf(data).intValue();
				        calculatedTotalScore += rInteger;
					}
					catch (NumberFormatException e) {
						numberTotalScoresNotInteger++;
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			  } // if (handPegDropNumIndex >= 0)
			
			if (handPegCorrectNumIndex >= 0) {
				data = bufDataVector.get(handPegCorrectNumIndex);
				repeatable_group_id = bufRepeatable_group_id.get(handPegCorrectNumIndex);
				group_row_index = bufGroup_row_index.get(handPegCorrectNumIndex);
				index = bufIndex.get(handPegCorrectNumIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					numberTotalScoresMissing++;
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}	
				else {
					try {
				        rInteger = Integer.valueOf(data).intValue();
				        calculatedTotalScore += rInteger;
				        if ((numberTotalScoresMissing == 0) && (numberTotalScoresNotInteger == 0) &&
								(calculatedTotalScore != 25)) {
				        	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW,
											guid,
											getRawDataRow(subject_row_id, group_row_index));
				        	message = message + "the Dominant Hand GPTHandPegCorrectNum + GPTHandPegDropNum = " +
											String.valueOf(calculatedTotalScore) +
											" instead of the correct 25";
				        	if (rgTable.getDataFilePositionMapping(index) == null) {
				        		table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										-1, message));	
				        	}
				        	else {
					        	table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message));
				        	}
				        }
					}
					catch (NumberFormatException e) {
						numberTotalScoresNotInteger++;
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			  } // if (handPegCorrectNumIndex >= 0)
		
	    } // else haveDominantHand
		
		if (!haveNonDominantHand) {
			//  gpthandpegdropnum is 2
			//  gpthandpegcorrectnum is 3
			for (i = 2; i <= 3; i++) {
				if (nonDominantHandTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									nonDominantHandTable.getRepeatableGroupName(),
									nonDominantHandTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(nonDominantHandTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									nonDominantHandTable.getDataFilePositionMapping(i),
									nonDominantHandTable.getRepeatableGroupName(),
									nonDominantHandTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(nonDominantHandTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							nonDominantHandTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 2; i <= 3; i++)			
	    } // if (!haveNonDominantHand)
		else {// haveNonDominantHand
			
			
			int numberTotalScoresMissing = 0;
			int numberTotalScoresNotInteger = 0;
			int rInteger;
			int calculatedTotalScore = 0;
			if (handPegDropNumIndex2 >= 0) {
				data = bufDataVector.get(handPegDropNumIndex2);
				repeatable_group_id = bufRepeatable_group_id.get(handPegDropNumIndex2);
				group_row_index = bufGroup_row_index.get(handPegDropNumIndex2);
				index = bufIndex.get(handPegDropNumIndex2);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					numberTotalScoresMissing++;
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}	
				else {
					try {
				        rInteger = Integer.valueOf(data).intValue();
				        calculatedTotalScore += rInteger;
					}
					catch (NumberFormatException e) {
						numberTotalScoresNotInteger++;
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			  } // if (handPegDropNumIndex2 >= 0)
			
			if (handPegCorrectNumIndex2 >= 0) {
				data = bufDataVector.get(handPegCorrectNumIndex2);
				repeatable_group_id = bufRepeatable_group_id.get(handPegCorrectNumIndex2);
				group_row_index = bufGroup_row_index.get(handPegCorrectNumIndex2);
				index = bufIndex.get(handPegCorrectNumIndex2);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					numberTotalScoresMissing++;
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}	
				else {
					try {
				        rInteger = Integer.valueOf(data).intValue();
				        calculatedTotalScore += rInteger;
				        if ((numberTotalScoresMissing == 0) && (numberTotalScoresNotInteger == 0) &&
								(calculatedTotalScore != 25)) {
				        	message =
									String.format(ApplicationsConstants.LOC_GUID_ROW,
											guid,
											getRawDataRow(subject_row_id, group_row_index));
				        	message = message + "the Non-Dominant Hand GPTHandPegCorrectNum + GPTHandPegDropNum = " +
											String.valueOf(calculatedTotalScore) +
											" instead of the correct 25";
				        	if (rgTable.getDataFilePositionMapping(index) == null) {
				        		table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										-1, message));	
				        	}
				        	else {
					        	table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message));
				        	}
				        }
					}
					catch (NumberFormatException e) {
						numberTotalScoresNotInteger++;
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			  } // if (handPegCorrectNumIndex2 >= 0)
		
	    } // else haveNonDominantHand
		
		
		if (!haveHandPreferenceType) {
			if (handPreferenceTable.getDataFilePositionMapping(0) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								handPreferenceTable.getRepeatableGroupName(),
								handPreferenceTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(handPreferenceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								handPreferenceTable.getDataFilePositionMapping(0),
								handPreferenceTable.getRepeatableGroupName(),
								handPreferenceTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(handPreferenceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						handPreferenceTable.getDataFilePositionMapping(0), message));
			}
	    } // if (!haveHandPreferenceType)
		else {// haveHandPreferenceType
			if (handpreftypIndex2 >= 0) {
				data = bufDataVector.get(handpreftypIndex2);
				repeatable_group_id = bufRepeatable_group_id.get(handpreftypIndex2);
				group_row_index = bufGroup_row_index.get(handpreftypIndex2);
				index = bufIndex.get(handpreftypIndex2);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							    -1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}	
				else {
					handpreftyp2 = data;
					if (validhandpreftyp1 && (!handpreftyp2.equalsIgnoreCase(handpreftyp1))) {
						if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
								message =
										message
												+ String.format(ApplicationsConstants.WARNING_TWO_VALUES_DIFFERENT,
														handpreftyp2, "Dominant Hand.HandPrefTyp", handpreftyp1);
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message));	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
								message =
										message
												+ String.format(ApplicationsConstants.WARNING_TWO_VALUES_DIFFERENT,
														handpreftyp2, "Dominant Hand.HandPrefTyp", handpreftyp1);
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message));
							}
						numberWarnings++;
						}
					}
				}
			  } // if (handpreftypIndex2 >= 0) {
	    } // else haveHandPreferenceType
	}
	
	private void validateInsomnia(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	InsomniaSeverityIndex_FIT
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = ISI
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = isidiffalaslpmeasr data = 2
		// group_column_index = 1 group_column_name = isidifstayaslpmeasr data = 2
		// group_column_index = 2 group_column_name = isiwakermeasr data = 1
		// group_column_index = 3 group_column_name = isicurslppatsatmeasr data = 3
		// group_column_index = 4 group_column_name = isinoticmeasr data = 0
		// group_column_index = 5 group_column_name = isiwordistmeasr data = 1
		// group_column_index = 6 group_column_name = isiintmeasr data = 0
		// group_column_index = 7 group_column_name = isitotalscore data = 9
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBI_INVVX194KLL
		// group_column_index = 1 group_column_name = subjectidnum data = VAT06
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = visitdate data = 2018-03-01T00:00:00Z
		// group_column_index = 4 group_column_name = sitename data = null
		// group_column_index = 5 group_column_name = dayssincebaseline data = 0
		// group_column_index = 6 group_column_name = casecontrlind data = Control
		// group_column_index = 7 group_column_name = generalnotestxt data = Age not submitted
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Form Administration Group
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = contexttype data = At time of assessment
		// group_column_index = 1 group_column_name = contexttypeoth data = null
		// group_column_index = 2 group_column_name = datasource data = Participant/subject
		// group_column_index = 3 group_column_name = datasourceoth data = null
		Vector<Vector<String>> columnNameVector2;
        Vector<Vector<String>> dataVector2;
        Vector<String> columnNameVector;
        Vector<String> dataVector;
        int i, j, k;
        String message;
        Vector<String> bufColumnNameVector = new Vector<String>();
        Vector<String> bufDataVector = new Vector<String>();
        Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
        Vector<Integer> bufGroup_row_index = new Vector<Integer>();
        Vector<Integer> bufIndex = new Vector<Integer>();
        Vector<String> bufRepeatableGroupName = new Vector<String>();
        String repeatableGroupName;
        String guid = null;
        int group_row_index = -1;
        int repeatable_group_id;
        RepeatableGroupTable rgTable = null;
        ArrayList<Integer> rgEntries = null;
        int index = -1;
        String data;
        boolean haveMain = true;
        RepeatableGroupTable mainTable = null;
        int bufSizeIndex = -1;
        int guidIndex =-1;
        int ageyrsIndex = -1;
        boolean haveISI = true;
        RepeatableGroupTable ISITable = null;
        int ISIIndex[] = new int[7];
        for (i = 0; i < 7; i++) {
        	ISIIndex[i] = -1;
        }
        int totalScoreIndex = -1;
        
        // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("ISI")) {
					haveISI = false;
					ISITable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		  // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		  // for (i = 0; i < columnNameVector.size(); i++) {
		     // System.out.println("group_column_index = " + i +
		     //  " group_column_name = " + columnNameVector.get(i) +
		     //  " data = " + dataVector.get(i)) ;	
		  // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("ISI")) {
				if (columnNameVector.get(i).equalsIgnoreCase("isidiffalaslpmeasr")) {
					ISIIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("isidifstayaslpmeasr")) {
					ISIIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("isiwakermeasr")) {
					ISIIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("isicurslppatsatmeasr")) {
					ISIIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("isinoticmeasr")) {
					ISIIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("isiwordistmeasr")) {
					ISIIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("isiintmeasr")) {
					ISIIndex[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("isitotalscore")) {
					totalScoreIndex = bufSizeIndex;
				}	
			}
		}
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				}
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 18) || (age > 89)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 to 89 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 to 89 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
	    
	    if (!haveISI) {
			for (i = 0; i <= 6; i++) {
				if (ISITable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									ISITable.getRepeatableGroupName(),
									ISITable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(ISITable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									ISITable.getDataFilePositionMapping(i),
									ISITable.getRepeatableGroupName(),
									ISITable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(ISITable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							ISITable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 6; i++)			
	    } // if (!haveISI)
		else { // haveISI
			int calculatedTotalScore = 0;
			int actualTotalScore = -1;
			int numberScoresMissing = 0;
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    int numberScoresNotInteger = 0;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
			for (j = 0; j < ISIIndex.length; j++) { 
		    	i = ISIIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					        calculatedTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank", String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank", String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		} // else haveISI
		
		
	}
	
	private void validateDRS(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	DRS_TBI_FITBIR
		// table.getColumnCount = 6
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Arousability awareness and responsivity
		// rgTable.getSize() = 3
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 3
		// group_column_index = 0 group_column_name = drseyeopnngscale data = 0
		// group_column_index = 1 group_column_name = drscommnctnabltyscale data = 4
		// group_column_index = 2 group_column_name = drsmotrrespnsdisbltyscale data = 1
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Dependence on Others
		// rgTable.getSize() = 1
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 1
		// group_column_index = 0 group_column_name = drsfunctnlvlscale data = 5
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBI_INVNP266HMV
		// group_column_index = 1 group_column_name = subjectidnum data = null
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = visitdate data = null
		// group_column_index = 4 group_column_name = sitename data = TBIMS NDSC
		// group_column_index = 5 group_column_name = dayssincebaseline data = 26
		// group_column_index = 6 group_column_name = casecontrlind data = null
		// group_column_index = 7 group_column_name = generalnotestxt data = age not submitted
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = DRS
		// rgTable.getSize() = 1
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 1
		// group_column_index = 0 group_column_name = drstotalscore data = 22
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = Cognitive ability for self-care activities
		// rgTable.getSize() = 3
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 3
		// group_column_index = 0 group_column_name = drsfdngdisbltyscale data = 3
		// group_column_index = 1 group_column_name = drstoiltngdisbltyscale data = 3
		// group_column_index = 2 group_column_name = drsgrmngdisbltyscale data = 3
		// repeatable_group_id = 5
		// rgTable.getRepeatableGroupName() = Psychosocial Adaptibility
		// rgTable.getSize() = 1
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 1
		// group_column_index = 0 group_column_name = drsemplybltypatscale data = 3
		
		Vector<Vector<String>> columnNameVector2;
        Vector<Vector<String>> dataVector2;
        Vector<String> columnNameVector;
        Vector<String> dataVector;
        int i, j, k;
        String message;
        Vector<String> bufColumnNameVector = new Vector<String>();
        Vector<String> bufDataVector = new Vector<String>();
        Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
        Vector<Integer> bufGroup_row_index = new Vector<Integer>();
        Vector<Integer> bufIndex = new Vector<Integer>();
        Vector<String> bufRepeatableGroupName = new Vector<String>();
        String repeatableGroupName;
        String guid = null;
        int group_row_index = -1;
        int repeatable_group_id;
        RepeatableGroupTable rgTable = null;
        ArrayList<Integer> rgEntries = null;
        int index = -1;
        String data;
        boolean haveMain = true;
        RepeatableGroupTable mainTable = null;
        int bufSizeIndex = -1;
        int guidIndex =-1;
        int ageyrsIndex = -1;
        boolean haveArousability = true;
        RepeatableGroupTable arousabilityTable = null;
        int arousabilityIndex[] = new int[3];
        for (i = 0; i < 3; i++) {
        	arousabilityIndex[i] = -1;
        }
        boolean haveDependence = true;
        RepeatableGroupTable dependenceTable = null;
        int functIndex = -1;
        boolean haveCognitive = true;
        RepeatableGroupTable cognitiveTable = null;
        int cognitiveIndex[] = new int[3];
        for (i = 0; i < 3; i++) {
        	cognitiveIndex[i] = -1;
        }
        boolean havePsychosocial = true;
        RepeatableGroupTable psychosocialTable = null;
        int emplybltyIndex = -1;
        boolean haveDRS = true;
        RepeatableGroupTable DRSTable = null;
        int totalScoreIndex = -1;
        
        
        // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Arousability awareness and responsivity")) {
					haveArousability = false;
					arousabilityTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Dependence on Others")) {
					haveDependence = false;
					dependenceTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Psychosocial Adaptibility")) {
					havePsychosocial = false;
					psychosocialTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("DRS")) {
				    haveDRS = false;
				    DRSTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Cognitive ability for self-care activities")) {
				    haveCognitive = false;
				    cognitiveTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		 // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		 // for (i = 0; i < columnNameVector.size(); i++) {
		    // System.out.println("group_column_index = " + i +
		    	// " group_column_name = " + columnNameVector.get(i) +
		    	// " data = " + dataVector.get(i)) ;	
		 // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Arousability awareness and responsivity")) {
				if (columnNameVector.get(i).equalsIgnoreCase("drseyeopnngscale")) {
					arousabilityIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drscommnctnabltyscale")) {
					arousabilityIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("drsmotrrespnsdisbltyscale")) {
					arousabilityIndex[2] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Cognitive ability for self-care activities")) {
				if (columnNameVector.get(i).equalsIgnoreCase("DRSFdngDisbltyScale")) {
					cognitiveIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("DRSToiltngDisbltyScale")) {
					cognitiveIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("DRSGrmngDisbltyScale")) {
					cognitiveIndex[2] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Dependence on Others")) {
				if (columnNameVector.get(i).equalsIgnoreCase("drsfunctnlvlscale")) {
					functIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Psychosocial Adaptibility")) {
				if (columnNameVector.get(i).equalsIgnoreCase("drsemplybltypatscale")) {
					emplybltyIndex = bufSizeIndex;	
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("DRS")) {
				if (columnNameVector.get(i).equalsIgnoreCase("drstotalscore")) {
					totalScoreIndex = bufSizeIndex;
				}
			}
		}
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 18) || (age > 89)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 to 89 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 to 89 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberTotalScoresMissing = 0;
	    Vector<Integer>missingIndices = new Vector<Integer>();
	    int missing_repeatable_group_id = -1;
	    int missing_group_row_index = -1;
	    int numberScoresNotInteger = 0;
	    int numberTotalScoresNotInteger = 0;
	    Vector<Integer>notIntegerIndices = new Vector<Integer>();
	    int notInteger_repeatable_group_id = -1;
	    int notInteger_group_row_index = -1;
	    Vector<String>notIntegerData = new Vector<String>();
	    int rInteger;
		
		if (!haveArousability) {
			numberTotalScoresMissing = 3;
			for (i = 0; i <= 2; i++) {
				if (arousabilityTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									arousabilityTable.getRepeatableGroupName(),
									arousabilityTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(arousabilityTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									arousabilityTable.getDataFilePositionMapping(i),
									arousabilityTable.getRepeatableGroupName(),
									arousabilityTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(arousabilityTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							arousabilityTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 2; i++)			
	    } // if (!haveArousability)
		else { // haveArousability
			for (j = 0; j < arousabilityIndex.length; j++) { 
		    	i = arousabilityIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberTotalScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					        calculatedTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberTotalScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
								   		rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		} // else haveArousability
		
		if (!haveDependence) {
			numberTotalScoresMissing += 1;
			if (dependenceTable.getDataFilePositionMapping(0) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								dependenceTable.getRepeatableGroupName(),
								dependenceTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(dependenceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								dependenceTable.getDataFilePositionMapping(0),
								dependenceTable.getRepeatableGroupName(),
								dependenceTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(dependenceTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						dependenceTable.getDataFilePositionMapping(0), message));
			}
	    } // if (!haveDependence)
		else {// haveDependence
			if (functIndex >= 0) {
				data = bufDataVector.get(functIndex);
				repeatable_group_id = bufRepeatable_group_id.get(functIndex);
				group_row_index = bufGroup_row_index.get(functIndex);
				index = bufIndex.get(functIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					numberTotalScoresMissing++;
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}	
				else {
					try {
				        rInteger = Double.valueOf(data).intValue();
				        calculatedTotalScore += rInteger;
					}
					catch (NumberFormatException e) {
						numberTotalScoresNotInteger++;
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));   	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));   
						}
					}
				}
			  } // if (functIndex >= 0) {
	    } // else haveDependence
		
		if (!haveCognitive) {
			numberTotalScoresMissing += 3;
			for (i = 0; i <= 2; i++) {
				if (cognitiveTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									cognitiveTable.getRepeatableGroupName(),
									cognitiveTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(cognitiveTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						      -1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									cognitiveTable.getDataFilePositionMapping(i),
									cognitiveTable.getRepeatableGroupName(),
									cognitiveTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(cognitiveTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						      cognitiveTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 2; i++)			
	    } // if (!haveCognitive)
		else { // haveCognitive
			numberScoresMissing = 0;
			missingIndices.clear();
			missing_repeatable_group_id = -1;
			missing_group_row_index = -1;
			numberScoresNotInteger = 0;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < cognitiveIndex.length; j++) { 
		    	i = cognitiveIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		numberTotalScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					        calculatedTotalScore += Double.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberTotalScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		} // else haveArousability
		
		if (!havePsychosocial) {
			numberTotalScoresMissing += 1;
			if (psychosocialTable.getDataFilePositionMapping(0) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								psychosocialTable.getRepeatableGroupName(),
								psychosocialTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(psychosocialTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));		
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								psychosocialTable.getDataFilePositionMapping(0),
								psychosocialTable.getRepeatableGroupName(),
								psychosocialTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(psychosocialTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						psychosocialTable.getDataFilePositionMapping(0), message));	
			}
	    } // if (!havePsychosocial)
		else {// havePsychosocial
			if (emplybltyIndex >= 0) {
				data = bufDataVector.get(emplybltyIndex);
				repeatable_group_id = bufRepeatable_group_id.get(emplybltyIndex);
				group_row_index = bufGroup_row_index.get(emplybltyIndex);
				index = bufIndex.get(emplybltyIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					numberTotalScoresMissing++;
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}	
				else {
					try {
						
				        rInteger = Double.valueOf(data).intValue();
				        calculatedTotalScore += rInteger;
					}
					catch (NumberFormatException e) {
						numberTotalScoresNotInteger++;
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			  } // if (emplybltyIndex >= 0) {
	    } // else havePsychosocial
		
		if (!haveDRS) {
			if ((numberTotalScoresMissing == 0) && (numberTotalScoresNotInteger == 0)) {
				if (numberWarnings < 1000) {
					if (DRSTable.getDataFilePositionMapping(0) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										DRSTable.getRepeatableGroupName(),
										DRSTable.getColumnName(0));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(DRSTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));		
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										DRSTable.getDataFilePositionMapping(0),
										DRSTable.getRepeatableGroupName(),
										DRSTable.getColumnName(0));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												"blank",String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(DRSTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								DRSTable.getDataFilePositionMapping(0), message));	
					}
					numberWarnings++;
				} // if (numberWarnings < 1000)
			} // if ((numberTotalScoresMissing == 0) && (numberTotalScoresNotInteger == 0))
	    } // if (!haveDRS)
		else { // haveDRS
			if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberTotalScoresMissing == 0) && (numberTotalScoresNotInteger == 0)) {
						if (numberWarnings < 1000) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
		
								message =
										message
												+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
														"blank",String.valueOf(calculatedTotalScore));
								table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
					    }
						numberWarnings++;
					} // if (numberWarnings < 1000)
				}
			    else if ((numberTotalScoresMissing >= 1) || (numberTotalScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveDRS
	}
	
	private void validateImPACT(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// table.getColumnCount = 8
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Form Administration Group
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = contexttype data = Before Injury
		// group_column_index = 1 group_column_name = contexttypeoth data = null
		// group_column_index = 2 group_column_name = datasource data = Participant/subject
		// group_column_index = 3 group_column_name = datasourceoth data = null
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = ImPACT Sport Concussion and Health History
		// rgTable.getSize() = 23
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 23
		// group_column_index = 0 group_column_name = impactcurrentsporttype data = null
		// group_column_index = 1 group_column_name = impactprimposeventclasstext data = null
		// group_column_index = 2 group_column_name = impactcurrentpartlvltyp data = null
		// group_column_index = 3 group_column_name = impactyrsexplevelct data = null
		// group_column_index = 4 group_column_name = concussiondxnumber data = 0
		// group_column_index = 5 group_column_name = impactconcussresultlocct data = null
		// group_column_index = 6 group_column_name = impactconcussresultconfct data = null
		// group_column_index = 7 group_column_name = impactconcussresmemlossaftct data = null
		// group_column_index = 8 group_column_name = impactconcussresmemlossbefct data = null
		// group_column_index = 9 group_column_name = impactgamesmissedct data = null
		// group_column_index = 10 group_column_name = impact5mostrecentconcusstxt data = null
		// group_column_index = 11 group_column_name = impacttreatheadphysicianind data = No
		// group_column_index = 12 group_column_name = impacttreatmigphysicianind data = No
		// group_column_index = 13 group_column_name = impacttreatepilepseizind data = No
		// group_column_index = 14 group_column_name = impacthxbrainsurgind data = No
		// group_column_index = 15 group_column_name = meningitisind data = No
		// group_column_index = 16 group_column_name = impacttreatsubalcoholabusind data = No
		// group_column_index = 17 group_column_name = impacttreatpsychiatriccondind data = No
		// group_column_index = 18 group_column_name = attentiondeficitadhdind data = No
		// group_column_index = 19 group_column_name = impactdxdyslexiaind data = No
		// group_column_index = 20 group_column_name = impactdxautismind data = No
		// group_column_index = 21 group_column_name = impactstrenexerlst3hrind data = No
		// group_column_index = 22 group_column_name = concussiondxdate data = null
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = ImPACT Demographics
		// rgTable.getSize() = 15
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 15
		// group_column_index = 0 group_column_name = birthdate data = null
		// group_column_index = 1 group_column_name = gendertyp data = null
		// group_column_index = 2 group_column_name = handpreftyp data = Right hand
		// group_column_index = 3 group_column_name = ageval data = 18
		// group_column_index = 4 group_column_name = hgtmeasr data = null
		// group_column_index = 5 group_column_name = hgtuom data = null
		// group_column_index = 6 group_column_name = wgtmeasr data = null
		// group_column_index = 7 group_column_name = wgtuom data = null
		// group_column_index = 8 group_column_name = impactnativecountregionname data = United States
		// group_column_index = 9 group_column_name = impactnativelanguagetyp data = English
		// group_column_index = 10 group_column_name = impactsecondlanguagetyp data = null
		// group_column_index = 11 group_column_name = impactsecondlanguageyrdur data = null
		// group_column_index = 12 group_column_name = raceusacat data = null
		// group_column_index = 13 group_column_name = ethnusacat data = null
		// group_column_index = 14 group_column_name = eduyrct data = null
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = Post-Concussion Symptom Scale (PCSS)
		// rgTable.getSize() = 23
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 23
		// group_column_index = 0 group_column_name = impactpcssheadachescore data = 0
		// group_column_index = 1 group_column_name = impactpcssnauseascore data = 0
		// group_column_index = 2 group_column_name = impactpcssvomitingscore data = 1
		// group_column_index = 3 group_column_name = impactpcssbalanceproblemscore data = 0
		// group_column_index = 4 group_column_name = impactpcssdizzinessscore data = 0
		// group_column_index = 5 group_column_name = impactpcssfatiguescore data = 0
		// group_column_index = 6 group_column_name = impactpcsstroubfallasleepscore data = 0
		// group_column_index = 7 group_column_name = impactpcssslpmorethnusualscore data = 0
		// group_column_index = 8 group_column_name = impactpcssslplessthnusualscore data = 0
		// group_column_index = 9 group_column_name = impactpcssdrowsinessscore data = 0
		// group_column_index = 10 group_column_name = impactpcsssensitivelightscore data = 0
		// group_column_index = 11 group_column_name = impactpcsssensitivenoisescore data = 0
		// group_column_index = 12 group_column_name = impactpcssirritabilityscore data = 0
		// group_column_index = 13 group_column_name = impactpcsssadnessscore data = 0
		// group_column_index = 14 group_column_name = impactpcssnervousnessscore data = 0
		// group_column_index = 15 group_column_name = impactpcssfeelemotionalscore data = 0
		// group_column_index = 16 group_column_name = impactpcssnumbtinglescore data = 0
		// group_column_index = 17 group_column_name = impactpcssfeelslowdownscore data = 0
		// group_column_index = 18 group_column_name = impactpcssfeelmentfogscore data = 0
		// group_column_index = 19 group_column_name = impactpcssdiffconcentratescore data = 0
		// group_column_index = 20 group_column_name = impactpcssdiffremeberscore data = 0
		// group_column_index = 21 group_column_name = impactpcssvisualprobscore data = 0
		// group_column_index = 22 group_column_name = impacttotalsymptomscore data = 1
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = ImPACT Test
		// rgTable.getSize() = 53
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 53
		// group_column_index = 0 group_column_name = impactverbmemorycompscore data = 93
		// group_column_index = 1 group_column_name = impactverbmemcomppercval data = 80
		// group_column_index = 2 group_column_name = impactverbmemrciexceedind data = null
		// group_column_index = 3 group_column_name = impactvismemorycompscore data = 61
		// group_column_index = 4 group_column_name = impactvismemcomppercval data = 14
		// group_column_index = 5 group_column_name = impactvismemrciexceedind data = null
		// group_column_index = 6 group_column_name = impactvismotspeedcompscore data = 38.08
		// group_column_index = 7 group_column_name = impactvismotspeedcomppercval data = 44
		// group_column_index = 8 group_column_name = impactvismotspeedrciexceedind data = null
		// group_column_index = 9 group_column_name = impactreacttimecompscore data = 0.54
		// group_column_index = 10 group_column_name = impactreacttimecomppercval data = 69
		// group_column_index = 11 group_column_name = impactreacttimerciexceedind data = null
		// group_column_index = 12 group_column_name = impactimplsecntrlcompscore data = 7
		// group_column_index = 13 group_column_name = impactimplsecntrlcomppercval data = null
		// group_column_index = 14 group_column_name = impactimplsecntrlrciexceedind data = null
		// group_column_index = 15 group_column_name = impacttotalsymptomrciexceedind data = null
		// group_column_index = 16 group_column_name = impactcogefficiencyindexscore data = 0.54
		// group_column_index = 17 group_column_name = impacthourssleptlstnghtdur data = null
		// group_column_index = 18 group_column_name = medctnpriorconcomname data = null
		// group_column_index = 19 group_column_name = impactwordmemimmedhitct data = 11
		// group_column_index = 20 group_column_name = impactwordmemimmedcorrdisct data = 10
		// group_column_index = 21 group_column_name = impactwordmemlearncorrpercval data = 88
		// group_column_index = 22 group_column_name = impactwordmemdelayhitct data = 10
		// group_column_index = 23 group_column_name = impactwordmemdelaycorrdisct data = 7
		// group_column_index = 24 group_column_name = impactwordmemdelaycorrpercval data = 71
		// group_column_index = 25 group_column_name = impactwordmemtotcorrpercval data = 79.5
		// group_column_index = 26 group_column_name = impactdesignmemimmedhitct data = 11
		// group_column_index = 27 group_column_name = impactdesignmemimmedcorrdisct data = 10
		// group_column_index = 28 group_column_name = impactdesignmemlrncorrpercval data = 88
		// group_column_index = 29 group_column_name = impactdesignmemdelayhitct data = 10
		// group_column_index = 30 group_column_name = impactdesignmemdelaycorrdisct data = 8
		// group_column_index = 31 group_column_name = impactdesignmemdelcorrpercval data = 75
		// group_column_index = 32 group_column_name = impactdesignmemtotcorrpercval data = 81.5
		// group_column_index = 33 group_column_name = impactxomemtotcorrectct data = 5
		// group_column_index = 34 group_column_name = impactxointertotcorrct data = 115
		// group_column_index = 35 group_column_name = impactxointeravgcorrrtdur data = 0.48
		// group_column_index = 36 group_column_name = impactxointertotincorrct data = 6
		// group_column_index = 37 group_column_name = impactxointeravgincorrrtdur data = 0.44
		// group_column_index = 38 group_column_name = impactsymbmatchvistotcorrct data = 26
		// group_column_index = 39 group_column_name = impactsymbmatchvisavgcorrrtdur data = 1.39
		// group_column_index = 40 group_column_name = impactsymbmatchhidtotcorrct data = 9
		// group_column_index = 41 group_column_name = impactsymbmatchhidavgcorrrtdur data = 1.65
		// group_column_index = 42 group_column_name = impactcolormatchtotcorrct data = 9
		// group_column_index = 43 group_column_name = impactcolormatchavgcorrrtdur data = 0.69
		// group_column_index = 44 group_column_name = impactcolormatchtotcommct data = 1
		// group_column_index = 45 group_column_name = impactcolormatchavgcommrtdur data = 0.5
		// group_column_index = 46 group_column_name = impactthreelettotseqcorrct data = 5
		// group_column_index = 47 group_column_name = impactthreelettotletcorrct data = 15
		// group_column_index = 48 group_column_name = impactthreletpcttotletcorpval data = 100
		// group_column_index = 49 group_column_name = impactthreeletavgtmfstclickdur data = 2.14
		// group_column_index = 50 group_column_name = impactthreeletavgct data = 16.4
		// group_column_index = 51 group_column_name = impactthreeletavcorrct data = 15.8
		// group_column_index = 52 group_column_name = impactinvalidassind data = Yes
		// repeatable_group_id = 5
		// rgTable.getRepeatableGroupName() = ImPACT Learning History
		// rgTable.getSize() = 7
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 7
		// group_column_index = 0 group_column_name = impactreceivedspeechtherind data = No
		// group_column_index = 1 group_column_name = specialeduind data = No
		// group_column_index = 2 group_column_name = specialeduindoth data = No
		// group_column_index = 3 group_column_name = impactrepeatyrsschoolind data = No
		// group_column_index = 4 group_column_name = learningdisabilityind data = No
		// group_column_index = 5 group_column_name = impactprobaddhyperind data = No
		// group_column_index = 6 group_column_name = impactstudentperftype data = null
		// repeatable_group_id = 6
		// rgTable.getRepeatableGroupName() = ImPACT Test Administration
		// rgTable.getSize() = 3
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 3
		// group_column_index = 0 group_column_name = impactexamtype data = Baseline
		// group_column_index = 1 group_column_name = impactexamlanguagetype data = English
		// group_column_index = 2 group_column_name = impacttestversiontype data = 2.1
		// repeatable_group_id = 7
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBILU463GNX
		// group_column_index = 1 group_column_name = subjectidnum data = 42
		// group_column_index = 2 group_column_name = ageyrs data = 18
		// group_column_index = 3 group_column_name = vitstatus data = Alive
		// group_column_index = 4 group_column_name = visitdate data = 2015-03-26T00:00:00Z
		// group_column_index = 5 group_column_name = casecontrlind data = Control
		// group_column_index = 6 group_column_name = sitename data = null
		// group_column_index = 7 group_column_name = dayssincebaseline data = null
		// group_column_index = 8 group_column_name = generalnotestxt data = null
		Vector<Vector<String>> columnNameVector2;
        Vector<Vector<String>> dataVector2;
        Vector<String> columnNameVector;
        Vector<String> dataVector;
        int i, j, k;
        String message;
        Vector<String> bufColumnNameVector = new Vector<String>();
        Vector<String> bufDataVector = new Vector<String>();
        Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
        Vector<Integer> bufGroup_row_index = new Vector<Integer>();
        Vector<Integer> bufIndex = new Vector<Integer>();
        Vector<String> bufRepeatableGroupName = new Vector<String>();
        String repeatableGroupName;
        String guid = null;
        String impactExamType = null;
        int group_row_index = -1;
        int repeatable_group_id;
        RepeatableGroupTable rgTable = null;
        ArrayList<Integer> rgEntries = null;
        int index = -1;
        String data;
        boolean haveMain = true;
        RepeatableGroupTable mainTable = null;
        int bufSizeIndex = -1;
        int guidIndex =-1;
        int ageyrsIndex = -1;
        boolean haveTestAdministration = true;
        RepeatableGroupTable testAdministrationTable = null;
        int examTypeIndex = -1;
        boolean havePCSS = true;
        RepeatableGroupTable PCSSTable = null;
        int PCSSIndex[] = new int[22];
        for (i = 0; i < 22; i++) {
        	PCSSIndex[i] = -1;
        }
        int totalSymptomScoreIndex = -1;
        int lastRow = table.getRowCount() - 1;
        
        if (guidHaveBaselineMap == null) {
        	guidHaveBaselineMap = new HashMap<String, Boolean>();
        }
        // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("ImPACT Test Administration")) {
					haveTestAdministration = false;
					testAdministrationTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Post-Concussion Symptom Scale (PCSS)")) {
					havePCSS = false;
					PCSSTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		 // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		 // for (i = 0; i < columnNameVector.size(); i++) {
		    // System.out.println("group_column_index = " + i +
		    	// " group_column_name = " + columnNameVector.get(i) +
		    	// " data = " + dataVector.get(i)) ;	
		 // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("ImPACT Test Administration")) {
				if (columnNameVector.get(i).equalsIgnoreCase("impactexamtype")) {
			        examTypeIndex = bufSizeIndex;	
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Post-Concussion Symptom Scale (PCSS)")) {
				if (columnNameVector.get(i).equalsIgnoreCase("impactpcssheadachescore")) {
					PCSSIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssnauseascore")) {
					PCSSIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssvomitingscore")) {
					PCSSIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssbalanceproblemscore")) {
					PCSSIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssdizzinessscore")) {
					PCSSIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssfatiguescore")) {
					PCSSIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcsstroubfallasleepscore")) {
					PCSSIndex[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssslpmorethnusualscore")) {
					PCSSIndex[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssslplessthnusualscore")) {
					PCSSIndex[8] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssdrowsinessscore")) {
					PCSSIndex[9] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcsssensitivelightscore")) {
					PCSSIndex[10] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcsssensitivenoisescore")) {
					PCSSIndex[11] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssirritabilityscore")) {
					PCSSIndex[12] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcsssadnessscore")) {
					PCSSIndex[13] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssnervousnessscore")) {
					PCSSIndex[14] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssfeelemotionalscore")) {
					PCSSIndex[15] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssnumbtinglescore")) {
					PCSSIndex[16] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssfeelslowdownscore")) {
					PCSSIndex[17] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssfeelmentfogscore")) {
					PCSSIndex[18] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssdiffconcentratescore")) {
					PCSSIndex[19] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssdiffremeberscore")) {
					PCSSIndex[20] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impactpcssvisualprobscore")) {
					PCSSIndex[21] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("impacttotalsymptomscore")) {
					totalSymptomScoreIndex = bufSizeIndex;
				}
			}
		}
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				}
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 12) || (age > 60)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "12 to 60 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "12 to 60 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		if (!haveTestAdministration) {
			impactExamType = null;
			if (testAdministrationTable.getDataFilePositionMapping(0) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								testAdministrationTable.getRepeatableGroupName(),
								testAdministrationTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(testAdministrationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								testAdministrationTable.getDataFilePositionMapping(0),
								testAdministrationTable.getRepeatableGroupName(),
								testAdministrationTable.getColumnName(0));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(testAdministrationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						testAdministrationTable.getDataFilePositionMapping(0), message));
			}
	    } // if (!haveTestAdministration)
		else {// haveTestAdministration
			if (examTypeIndex >= 0) {
				data = bufDataVector.get(examTypeIndex);
				impactExamType = data;
				repeatable_group_id = bufRepeatable_group_id.get(examTypeIndex);
				group_row_index = bufGroup_row_index.get(examTypeIndex);
				index = bufIndex.get(examTypeIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));
	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}	
			}
			else {
				impactExamType = null;
			}
	    } // else haveTestAdministration
			
	    if (guid != null) {
	    	if (guidHaveBaselineMap.get(guid) == null) {
	    		if ((impactExamType != null) && (impactExamType.equalsIgnoreCase("Baseline"))) {
	    			guidHaveBaselineMap.put(guid, true);
	    		}
	    		else {
	    			guidHaveBaselineMap.put(guid, false);
	    		}
	    	}
	    	else if ((guidHaveBaselineMap.get(guid)  == false) && (impactExamType != null) && (impactExamType.equalsIgnoreCase("Baseline"))) {
	    		guidHaveBaselineMap.replace(guid, true);
	    	}
	    }
		
		if (!havePCSS) {
			for (i = 0; i <= 21; i++) {
				if (PCSSTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									PCSSTable.getRepeatableGroupName(),
									PCSSTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(PCSSTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									PCSSTable.getDataFilePositionMapping(i),
									PCSSTable.getRepeatableGroupName(),
									PCSSTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(PCSSTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							PCSSTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 21; i++)			
	    } // if (!havePCSS)
		else { // havePCSS
			int calculatedTotalSymptomScore = 0;
			int actualTotalSymptomScore = -1;
			int numberScoresMissing = 0;
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    int numberScoresNotInteger = 0;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
			for (j = 0; j < PCSSIndex.length; j++) { 
		    	i = PCSSIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					        calculatedTotalSymptomScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalSymptomScoreIndex >= 0) {
				data = bufDataVector.get(totalSymptomScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalSymptomScoreIndex);
				group_row_index = bufGroup_row_index.get(totalSymptomScoreIndex);
				index = bufIndex.get(totalSymptomScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));     	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalSymptomScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message)); 
						}
					}
				}
			}
		    
		    if (actualTotalSymptomScore > -1) {
		    	if (actualTotalSymptomScore != calculatedTotalSymptomScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalSymptomScore), String.valueOf(calculatedTotalSymptomScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalSymptomScore), String.valueOf(calculatedTotalSymptomScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }
		} // else havePCSS
		
		if (subject_row_id == lastRow) {
			String guids[] = guidHaveBaselineMap.keySet().toArray(new String[guidHaveBaselineMap.size()]);
			Boolean values[] = guidHaveBaselineMap.values().toArray(new Boolean[guidHaveBaselineMap.size()]);
			for (i = 0; i < guids.length; i++) {
				if (values[i] == false) {
					message = "For the guid " + guids[i] + ", the ImPACT Test Administration.ImPACTExamType = Baseline is missing.";
	    			table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, -1, -1, message));
				}
			}
		} // if (subject_row_id == lastRow)
	}
	
	private void validateSCAT3(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	SCAT3
		// table.getColumnCount = 19
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Glasgow Coma Scale Adult
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Glasgow Coma Scale Pediatric
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Maddocks Score
		// rgTable.getSize() = 6
		// rgEntries.size() = 0
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = SAC Cognitive Assessment - Concentration
		// rgTable.getSize() = 7
		// rgEntries.size() = 0
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = Indications for Emergency Management
		// rgTable.getSize() = 1
		// rgEntries.size() = 0
		// repeatable_group_id = 5
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBI_INVTJ452XKB
		// group_column_index = 1 group_column_name = subjectidnum data = 7010071
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = vitstatus data = null
		// group_column_index = 4 group_column_name = visitdate data = 2016-08-03T00:00:00Z
		// group_column_index = 5 group_column_name = sitename data = null
		// group_column_index = 6 group_column_name = dayssincebaseline data = 0
		// group_column_index = 7 group_column_name = casecontrlind data = null
		// group_column_index = 8 group_column_name = generalnotestxt data = Age not submitted
		// repeatable_group_id = 6
		// rgTable.getRepeatableGroupName() = Symptom Evaluation
		// rgTable.getSize() = 26
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 26
		// group_column_index = 0 group_column_name = scat3headache data = 0
		// group_column_index = 1 group_column_name = scat3pressureinhead data = 0
		// group_column_index = 2 group_column_name = scat3neckpain data = 0
		// group_column_index = 3 group_column_name = scat3nauseavomiting data = 0
		// group_column_index = 4 group_column_name = scat3dizziness data = 0
		// group_column_index = 5 group_column_name = scat3blurryvision data = 0
		// group_column_index = 6 group_column_name = scat3balanceproblem data = 0
		// group_column_index = 7 group_column_name = scat3senssivitylight data = 0
		// group_column_index = 8 group_column_name = scat3sensitivitynoise data = 0
		// group_column_index = 9 group_column_name = scat3feelslowdown data = 0
		// group_column_index = 10 group_column_name = scat3feelfog data = 0
		// group_column_index = 11 group_column_name = scat3dontfeelright data = 0
		// group_column_index = 12 group_column_name = scat3difficultyconcent data = 0
		// group_column_index = 13 group_column_name = scat3difficultyremembering data = 0
		// group_column_index = 14 group_column_name = scat3fatglowenergy data = 0
		// group_column_index = 15 group_column_name = scat3confusion data = 0
		// group_column_index = 16 group_column_name = scat3drowsiness data = 0
		// group_column_index = 17 group_column_name = scat3troublfallasleep data = 0
		// group_column_index = 18 group_column_name = scat3moreemotional data = 0
		// group_column_index = 19 group_column_name = scat3irritable data = 0
		// group_column_index = 20 group_column_name = scat3sadness data = 0
		// group_column_index = 21 group_column_name = scat3nervousanxious data = 0
		// group_column_index = 22 group_column_name = scat3sympphysactvty data = null
		// group_column_index = 23 group_column_name = scat3sympmentactvty data = null
		// group_column_index = 24 group_column_name = scat3datasourcetyp data = null
		// group_column_index = 25 group_column_name = scat3differathleteactscore data = null
		// repeatable_group_id = 7
		// rgTable.getRepeatableGroupName() = Potential signs of concussion
		// rgTable.getSize() = 9
		// rgEntries.size() = 0
		// repeatable_group_id = 8
		// rgTable.getRepeatableGroupName() = Background
		// rgTable.getSize() = 6
		// rgEntries.size() = 0
		// repeatable_group_id = 9
		// rgTable.getRepeatableGroupName() = Mechanism of Injury
		// rgTable.getSize() = 1
		// rgEntries.size() = 0
		// repeatable_group_id = 10
		// rgTable.getRepeatableGroupName() = SAC Cognitive Assessment- Orientation
		// rgTable.getSize() = 5
		// rgEntries.size() = 0
		// repeatable_group_id = 11
		// rgTable.getRepeatableGroupName() = Balance examination (BESS)
		// rgTable.getSize() = 13
		// rgEntries.size() = 0
		// repeatable_group_id = 12
		// rgTable.getRepeatableGroupName() = Background Most Recent Concussion
		// rgTable.getSize() = 2
		// rgEntries.size() = 0
		// repeatable_group_id = 13
		// rgTable.getRepeatableGroupName() = Coordination Examination Upper Limb
		// rgTable.getSize() = 2
		// rgEntries.size() = 0
		// repeatable_group_id = 14
		// rgTable.getRepeatableGroupName() = Neck Examination
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		// repeatable_group_id = 15
		// rgTable.getRepeatableGroupName() = SAC Cognitive Assessment - Immediate Memory
		// rgTable.getSize() = 7
		// rgEntries.size() = 0
		// repeatable_group_id = 16
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = contexttype data = Before injury
		// group_column_index = 1 group_column_name = contexttypeoth data = Baseline
		// group_column_index = 2 group_column_name = datasource data = null
		// group_column_index = 3 group_column_name = datasourceoth data = null
		// repeatable_group_id = 17
		// rgTable.getRepeatableGroupName() = Background Medical History
		// rgTable.getSize() = 7
		// rgEntries.size() = 0
		// repeatable_group_id = 18
		// rgTable.getRepeatableGroupName() = Scoring Summary
		// rgTable.getSize() = 12
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 12
		// group_column_index = 0 group_column_name = scat3totalsymptoms data = 0
		// group_column_index = 1 group_column_name = scat3totsympscore data = 0
		// group_column_index = 2 group_column_name = sacorientationsubsetscore data = null
		// group_column_index = 3 group_column_name = sacimmdmemorysubsetscore data = null
		// group_column_index = 4 group_column_name = sacimmdmemorytrialscore data = null
		// group_column_index = 5 group_column_name = sacconcentationsubsetscore data = null
		// group_column_index = 6 group_column_name = sacdelayedrecallsubsetscore data = null
		// group_column_index = 7 group_column_name = sactotalscore data = null
		// group_column_index = 8 group_column_name = besstotalerrorct data = null
		// group_column_index = 9 group_column_name = fulltandemstanddur data = null
		// group_column_index = 10 group_column_name = scat3upperlimbcoordinatscore data = null
		// group_column_index = 11 group_column_name = generalnotestxt data = null
		Vector<Vector<String>> columnNameVector2;
        Vector<Vector<String>> dataVector2;
        Vector<String> columnNameVector;
        Vector<String> dataVector;
        int i, j, k;
        String message;
        Vector<String> bufColumnNameVector = new Vector<String>();
        Vector<String> bufDataVector = new Vector<String>();
        Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
        Vector<Integer> bufGroup_row_index = new Vector<Integer>();
        Vector<Integer> bufIndex = new Vector<Integer>();
        Vector<String> bufRepeatableGroupName = new Vector<String>();
        String repeatableGroupName;
        String guid = null;
        int group_row_index = -1;
        int repeatable_group_id;
        RepeatableGroupTable rgTable = null;
        ArrayList<Integer> rgEntries = null;
        int index = -1;
        String data;
        boolean haveMain = true;
        RepeatableGroupTable mainTable = null;
        boolean haveSymptomEvaluation = true;
        RepeatableGroupTable symptomEvaluationTable = null;
        boolean haveScoringSummary = true;
        RepeatableGroupTable scoringSummaryTable = null;
        boolean haveConcussionScore = true;
        RepeatableGroupTable concussionScoreTable = null;
        boolean haveGlasgowComaScore = true;
        RepeatableGroupTable GlasgowComaScoreTable = null;
        boolean haveMaddocksScore = true;
        RepeatableGroupTable MaddocksScoreTable = null;
        boolean haveMechanismInjury = true;
        RepeatableGroupTable mechanismInjuryTable = null;
        boolean haveBackground = true;
        RepeatableGroupTable backgroundTable = null;
        boolean haveBackgroundConcussion = true;
        RepeatableGroupTable backgroundConcussionTable = null;
        boolean haveBackgroundMedicalHistory = true;
        RepeatableGroupTable backgroundMedicalHistoryTable = null;
        boolean haveSACOrientation = true;
        RepeatableGroupTable SACOrientationTable = null;
        boolean haveSACImmediateMemory = true;
        RepeatableGroupTable SACImmediateMemoryTable = null;
        boolean haveSACConcentration = true;
        RepeatableGroupTable SACConcentrationTable = null;
        boolean haveNeckExamination = true;
        RepeatableGroupTable neckExaminationTable = null;
        boolean haveBESS = true;
        RepeatableGroupTable BESSTable = null;
        boolean haveCoordination = true;
        RepeatableGroupTable coordinationTable = null;
        int bufSizeIndex = -1;
        int guidIndex =-1;
        int ageyrsIndex = -1;
        int potentialConcussionIndex[] = new int[8];
        for (i = 0; i < 8; i++) {
        	potentialConcussionIndex[i] =-1;
        }
        int GCSIndex[] = new int[3];
        for (i = 0; i < 3; i++) {
        	GCSIndex[i] = -1;
        }
        int GCSTotalScoreIndex = -1;
        int MaddocksIndex[] = new int[5];
        for (i = 0; i < 5; i++) {
        	MaddocksIndex[i] = -1;
        }
        int MaddocksScoreTotalScoreIndex = -1;
        int MedclHistCondTxtIndex = -1;
        int backgroundIndex[] = new int[6];
        for (i = 0; i < 6; i++) {
        	backgroundIndex[i] = -1;
        }
        int backgroundConcussionIndex[] = new int[2];
        for (i = 0; i < 2; i++) {
        	backgroundConcussionIndex[i] = -1;
        }
        int backgroundMedicalHistoryIndex[] = new int[7];
        for (i = 0; i < 7; i++) {
        	backgroundMedicalHistoryIndex[i] = -1;
        }
        int symptomIndex[] = new int[26];
        for (i = 0; i < 26; i++) {
        	symptomIndex[i] = -1;
        }
        int Scat3TotalSymptomsIndex = -1;
        int Scat3TotSympScoreIndex = -1;
        int SACOrientationIndex[] = new int[5];
        for (i = 0; i < 5; i++) {
        	SACOrientationIndex[i] = -1;
        }
        int SACOrientationSubsetScoreIndex = -1;
        int SACImmediateMemoryIndex[][] = new int[3][7];
        for (i = 0; i < 3; i++) {
        	for (j = 0; j < 7; j++) {
        		SACImmediateMemoryIndex[i][j] = -1;
        	}
        }
        int SACImmdMemorySubsetScoreIndex = -1;
        boolean haveSACImmdMemorySubsetScoreData = false;
        int SACConcentrationIndex[] = new int[7];
        for (i = 0; i < 7; i++) {
        	SACConcentrationIndex[i] = -1;
        }
        int SACConcentationSubsetScoreIndex = -1;
        int SACDelayedRecallSubsetScoreIndex = -1;
        int SACTotalScoreIndex = -1;
        int neckIndex[] = new int[4];
        for (i = 0; i < 4; i++) {
        	neckIndex[i] = -1;
        }
        int BESSIndex[] = new int[10];
        for (i = 0; i < 10; i++) {
        	BESSIndex[i] = -1;
        }
        int BESSDblLegTotalErrorCtIndex = -1;
        int BESSSglLegTotalErrorCtIndex = -1;
        int BESSTandemStncTotalErrorCtIndex = -1;
        int BESSTotalErrorCtIndex = -1;
        int FullTandemStandDurIndex = -1;
        int coordinationIndex[] = new int[2];
        for (i = 0; i < 2; i++) {
        	coordinationIndex[i] = -1;
        }
        int SCAT3UpperLimbCoordinatScoreIndex = -1;
        int SACImmdMemoryTrialScoreIndex = -1;
        
		 //System.out.println("table.getColumnCount = " + table.getColumnCount());
        	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
        		 
        		//System.out.println("repeatable_group_id = " + repeatable_group_id);
        		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
        		dataVector2 = dataVector3.get(repeatable_group_id);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				//System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
				//System.out.println("rgTable.getSize() = " + rgTable.getSize());
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if (rgEntries.size() == 0) {
					repeatableGroupName = rgTable.getRepeatableGroupName();
					if (repeatableGroupName.equalsIgnoreCase("Main")) {
						haveMain = false;
						mainTable = rgTable;
					}
					else if  (repeatableGroupName.equalsIgnoreCase("Symptom Evaluation")) {
					    haveSymptomEvaluation = false;
					    symptomEvaluationTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("Scoring Summary")) {
						haveScoringSummary = false;
						scoringSummaryTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("Potential signs of concussion")) {
						haveConcussionScore = false;
						concussionScoreTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("Glasgow Coma Scale Adult")) {
						haveGlasgowComaScore = false;
						GlasgowComaScoreTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("Maddocks Score")) {
					    haveMaddocksScore = false;
					    MaddocksScoreTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("Mechanism of Injury")) {
						haveMechanismInjury = false;
						mechanismInjuryTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("Background")) {
						haveBackground = false;
						backgroundTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("Background Most Recent Concussion")) {
						haveBackgroundConcussion = false;
						backgroundConcussionTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("Background Medical History")) {
					    haveBackgroundMedicalHistory = false;
					    backgroundMedicalHistoryTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("SAC Cognitive Assessment- Orientation"))	{
						haveSACOrientation = false;
						SACOrientationTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("SAC Cognitive Assessment - Immediate Memory")) {
						haveSACImmediateMemory = false;
						SACImmediateMemoryTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("SAC Cognitive Assessment - Concentration")) {
						haveSACConcentration = false;
						SACConcentrationTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("Neck Examination")) {
						haveNeckExamination = false;
						neckExaminationTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("Balance examination (BESS)")) {
						haveBESS = false;
						BESSTable = rgTable;
					}
					else if (repeatableGroupName.equalsIgnoreCase("Coordination Examination Upper Limb")) {
						haveCoordination = false;
						coordinationTable = rgTable;
					}
				} // if (rgEntries.size() == 0)
				//System.out.println("rgEntries.size() = " + rgEntries.size());
				for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
        	 //System.out.println("group_row_index = " + group_row_index);
			columnNameVector = columnNameVector2.get(group_row_index);
			dataVector = dataVector2.get(group_row_index);
			 //System.out.println("columnNameVector.size() = " + columnNameVector.size());
			 //for (i = 0; i < columnNameVector.size(); i++) {
			    //System.out.println("group_column_index = " + i +
			    	//" group_column_name = " + columnNameVector.get(i) +
			    	//" data = " + dataVector.get(i)) ;	
			 //}
			for (i = 0; i < columnNameVector.size(); i++) {
				bufSizeIndex = bufColumnNameVector.size();
				bufColumnNameVector.add(columnNameVector.get(i));
				bufDataVector.add(dataVector.get(i));
				bufRepeatable_group_id.add(repeatable_group_id);
				bufGroup_row_index.add(group_row_index);
				bufIndex.add(i);
				bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
						guidIndex = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
						ageyrsIndex = bufSizeIndex;
					}
				}
				else if  (repeatableGroupName.equalsIgnoreCase("Symptom Evaluation")) {
					if (columnNameVector.get(i).equalsIgnoreCase("Scat3Headache")) {
						symptomIndex[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3Pressureinhead")) {
						symptomIndex[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3Neckpain")) {
						symptomIndex[2] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3Nauseavomiting")) {
						symptomIndex[3] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3Dizziness")) {
						symptomIndex[4] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3BlurryVision")) {
						symptomIndex[5] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3BalanceProblem")) {
						symptomIndex[6] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3SenssivityLight")) {
						symptomIndex[7] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3SensitivityNoise")) {
						symptomIndex[8] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3FeelSlowDown")) {
						symptomIndex[9] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3FeelFog")) {
						symptomIndex[10] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3DontFeelRight")) {
						symptomIndex[11] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3DifficultyConcent")) {
						symptomIndex[12] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3DifficultyRemembering")) {
						symptomIndex[13] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3FatgLowEnergy")) {
						symptomIndex[14] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3Confusion")) {
						symptomIndex[15] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3Drowsiness")) {
						symptomIndex[16] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3TroublFallAsleep")) {
						symptomIndex[17] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3MoreEmotional")) {
						symptomIndex[18] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3Irritable")) {
						symptomIndex[19] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3Sadness")) {
						symptomIndex[20] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3NervousAnxious")) {
						symptomIndex[21] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3SympPhysActvty")) {
						symptomIndex[22] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3SympMentActvty")) {
						symptomIndex[23] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3DataSourceTyp")) {
						symptomIndex[24] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3DifferAthleteActScore")) {
						symptomIndex[25] = bufSizeIndex;
					}
				}
				else if (repeatableGroupName.equalsIgnoreCase("Scoring Summary")) {
					if (columnNameVector.get(i).equalsIgnoreCase("Scat3TotalSymptoms")) {
						Scat3TotalSymptomsIndex = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("Scat3TotSympScore")) {
						Scat3TotSympScoreIndex = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACOrientationSubsetScore")) {
						SACOrientationSubsetScoreIndex = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACImmdMemorySubsetScore")) {
						if (((dataVector.get(i) == null) || (dataVector.get(i).isEmpty()) || (dataVector.get(i).trim() == null) ||
								(dataVector.get(i).trim().isEmpty())) && (!haveSACImmdMemorySubsetScoreData)) {	
							SACImmdMemorySubsetScoreIndex = bufSizeIndex;
						}
						else if (!((dataVector.get(i) == null) || (dataVector.get(i).isEmpty()) || (dataVector.get(i).trim() == null) ||
								(dataVector.get(i).trim().isEmpty()))) {
							SACImmdMemorySubsetScoreIndex = bufSizeIndex;
							haveSACImmdMemorySubsetScoreData = true;
						}
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACConcentationSubsetScore")) {
					    SACConcentationSubsetScoreIndex = bufSizeIndex;	
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACDelayedRecallSubsetScore")) {
						SACDelayedRecallSubsetScoreIndex = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACTotalScore")) {
						SACTotalScoreIndex = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSTotalErrorCt")) {
						BESSTotalErrorCtIndex = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("FullTandemStandDur")) {
						FullTandemStandDurIndex = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3UpperLimbCoordinatScore")) {
						SCAT3UpperLimbCoordinatScoreIndex = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACImmdMemoryTrialScore")) {
						SACImmdMemoryTrialScoreIndex = bufSizeIndex;
					}
				}
				else if (repeatableGroupName.equalsIgnoreCase("Potential signs of concussion")) {
					if (columnNameVector.get(i).equalsIgnoreCase("LOCInd")) {
						potentialConcussionIndex[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BalanceIssueInd")) {
						potentialConcussionIndex[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3DisorientConfInd")) {
						potentialConcussionIndex[2] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("PstTraumtcAmnsInd")) {
						potentialConcussionIndex[3] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("PstTraumAmnsDurRang")) {
						potentialConcussionIndex[4] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("AmnsType")) {
						potentialConcussionIndex[5] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3BlankVacantLookInd")) {
						potentialConcussionIndex[6] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3FacialInjuryInd")) {
						potentialConcussionIndex[7] = bufSizeIndex;
					}
				}
				else if (repeatableGroupName.equalsIgnoreCase("Glasgow Coma Scale Adult")) {
				    if (columnNameVector.get(i).equalsIgnoreCase("GCSEyeRespnsScale")) {
				    	GCSIndex[0] = bufSizeIndex;
				    }
				    else if (columnNameVector.get(i).equalsIgnoreCase("GCSMotorRespnsScale")) {
				    	GCSIndex[1] = bufSizeIndex;
				    }
				    else if (columnNameVector.get(i).equalsIgnoreCase("GCSVerbalRspnsScale")) {
				    	GCSIndex[2] = bufSizeIndex;
				    }
				    else if (columnNameVector.get(i).equalsIgnoreCase("GCSTotalScore")) {
				    	GCSTotalScoreIndex = bufSizeIndex;
				    }
				}
				else if (repeatableGroupName.equalsIgnoreCase("Maddocks Score")) {
					 if (columnNameVector.get(i).equalsIgnoreCase("MaddocksScoreCorrVenueInd")) {
						 MaddocksIndex[0] = bufSizeIndex;
					 }
					 else if (columnNameVector.get(i).equalsIgnoreCase("MaddocksScoreCorrQuarterInd")) {
						 MaddocksIndex[1] = bufSizeIndex;
					 }
					 else if (columnNameVector.get(i).equalsIgnoreCase("MaddocksScoreCorrTeamScoreInd")) {
						 MaddocksIndex[2] = bufSizeIndex;
					 }
					 else  if (columnNameVector.get(i).equalsIgnoreCase("MaddocksScoreCorrTeamPlayInd")) {
						 MaddocksIndex[3] = bufSizeIndex; 
					 }
					 else  if (columnNameVector.get(i).equalsIgnoreCase("MaddocksScoreCorrTeamWonInd")) {
						 MaddocksIndex[4] = bufSizeIndex;
					 }
					 else  if (columnNameVector.get(i).equalsIgnoreCase("MaddocksScoreTotalScore")) {
						 MaddocksScoreTotalScoreIndex = bufSizeIndex;
					 }
				}
				else if (repeatableGroupName.equalsIgnoreCase("Mechanism of Injury")) {
					if (columnNameVector.get(i).equalsIgnoreCase("MedclHistCondTxt")) {
						MedclHistCondTxtIndex = bufSizeIndex;
					}
				}
				else if (repeatableGroupName.equalsIgnoreCase("Background")) {
					if (columnNameVector.get(i).equalsIgnoreCase("EduYrCt")) {
						backgroundIndex[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("HandPrefTyp")) {
						backgroundIndex[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("ConcussionPriorNum")) {
						backgroundIndex[2] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SportTeamParticipationTyp")) {
						backgroundIndex[3] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SportTeamParticipationTypOTH")) {
						backgroundIndex[4] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SportsTeamCat")) {
						backgroundIndex[5] = bufSizeIndex;
					}
				}
				else if (repeatableGroupName.equalsIgnoreCase("Background Most Recent Concussion")) {
				    if (columnNameVector.get(i).equalsIgnoreCase("ConcussionEventDate")) {
				    	backgroundConcussionIndex[0] = bufSizeIndex;
				    }
				    else if (columnNameVector.get(i).equalsIgnoreCase("ConcussionSymptomDurDays")) {
				    	backgroundConcussionIndex[1] = bufSizeIndex;
				    }
				}
				else if (repeatableGroupName.equalsIgnoreCase("Background Medical History")) {
					if (columnNameVector.get(i).equalsIgnoreCase("SCAT3HospitalImgHeadInjInd")) {
						backgroundMedicalHistoryIndex[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("HeadachMigranDiagnsInd")) {
						backgroundMedicalHistoryIndex[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("LearnDisableADHDDiagnosInd")) {
						backgroundMedicalHistoryIndex[2] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3AnxDeprPsychDxInd")) {
						backgroundMedicalHistoryIndex[3] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3AnxDeprPsychFamHistInd")) {
						backgroundMedicalHistoryIndex[4] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("MedctPrConcomOngoingInd")) {
						backgroundMedicalHistoryIndex[5] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("MedicationsText")) {
						backgroundMedicalHistoryIndex[6] = bufSizeIndex;
					}
				}
				else if (repeatableGroupName.equalsIgnoreCase("SAC Cognitive Assessment- Orientation"))	{
					if (columnNameVector.get(i).equalsIgnoreCase("SACOrientationCurrMonthScore")) {
						SACOrientationIndex[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACOrientationCurrDateScore")) {
						SACOrientationIndex[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACOrientationCurrDayWeekScore")) {
						SACOrientationIndex[2] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACOrientationCurrYearScore")) {
						SACOrientationIndex[3] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACOrientationCurrTimeScore")) {
						SACOrientationIndex[4] = bufSizeIndex;
					}
				}
				else if (repeatableGroupName.equalsIgnoreCase("SAC Cognitive Assessment - Immediate Memory")) {
					if (columnNameVector.get(i).equalsIgnoreCase("TrialNumber")) {
						if (SACImmediateMemoryIndex[1][0] >= 0) {
							SACImmediateMemoryIndex[2][0] = bufSizeIndex;
						}
						else if (SACImmediateMemoryIndex[0][0] >= 0) {
							SACImmediateMemoryIndex[1][0] = bufSizeIndex;
						}
						else {
							SACImmediateMemoryIndex[0][0] = bufSizeIndex;
						}
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACListTyp")) {
						if (SACImmediateMemoryIndex[1][1] >= 0) {
							SACImmediateMemoryIndex[2][1] = bufSizeIndex;
						}
						else if (SACImmediateMemoryIndex[0][1] >= 0) {
							SACImmediateMemoryIndex[1][1] = bufSizeIndex;
						}
						else {
							SACImmediateMemoryIndex[0][1] = bufSizeIndex;
						}	
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACImmediateMemoryWord1Score")) {
						if (SACImmediateMemoryIndex[1][2] >= 0) {
							SACImmediateMemoryIndex[2][2] = bufSizeIndex;
						}
						else if (SACImmediateMemoryIndex[0][2] >= 0) {
							SACImmediateMemoryIndex[1][2] = bufSizeIndex;
						}
						else {
							SACImmediateMemoryIndex[0][2] = bufSizeIndex;
						}		
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACImmediateMemoryWord2Score")) {
						if (SACImmediateMemoryIndex[1][3] >= 0) {
							SACImmediateMemoryIndex[2][3] = bufSizeIndex;
						}
						else if (SACImmediateMemoryIndex[0][3] >= 0) {
							SACImmediateMemoryIndex[1][3] = bufSizeIndex;
						}
						else {
							SACImmediateMemoryIndex[0][3] = bufSizeIndex;
						}		
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACImmediateMemoryWord3Score")) {
						if (SACImmediateMemoryIndex[1][4] >= 0) {
							SACImmediateMemoryIndex[2][4] = bufSizeIndex;
						}
						else if (SACImmediateMemoryIndex[0][4] >= 0) {
							SACImmediateMemoryIndex[1][4] = bufSizeIndex;
						}
						else {
							SACImmediateMemoryIndex[0][4] = bufSizeIndex;
						}		
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACImmediateMemoryWord4Score")) {
						if (SACImmediateMemoryIndex[1][5] >= 0) {
							SACImmediateMemoryIndex[2][5] = bufSizeIndex;
						}
						else if (SACImmediateMemoryIndex[0][5] >= 0) {
							SACImmediateMemoryIndex[1][5] = bufSizeIndex;
						}
						else {
							SACImmediateMemoryIndex[0][5] = bufSizeIndex;
						}		
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACImmediateMemoryWord5Score")) {
						if (SACImmediateMemoryIndex[1][6] >= 0) {
							SACImmediateMemoryIndex[2][6] = bufSizeIndex;
						}
						else if (SACImmediateMemoryIndex[0][6] >= 0) {
							SACImmediateMemoryIndex[1][6] = bufSizeIndex;
						}
						else {
							SACImmediateMemoryIndex[0][6] = bufSizeIndex;
						}		
					}
				}
				else if (repeatableGroupName.equalsIgnoreCase("SAC Cognitive Assessment - Concentration")) {
					if (columnNameVector.get(i).equalsIgnoreCase("TrialNumber")) {
						SACConcentrationIndex[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACListTyp")) {
						SACConcentrationIndex[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACConcDigitBackwrdsSet1Score")) {
						SACConcentrationIndex[2] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACConcDigitBackwrdsSet2Score")) {
						SACConcentrationIndex[3] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACConcDigitBackwrdsSet3Score")) {
						SACConcentrationIndex[4] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACConcDigitBackwrdsSet4Score")) {
						SACConcentrationIndex[5] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SACConcMonthReverseScore")) {
						SACConcentrationIndex[6] = bufSizeIndex;
					}
				}
				else if (repeatableGroupName.equalsIgnoreCase("Neck Examination")) {
					if (columnNameVector.get(i).equalsIgnoreCase("SCAT3NeckExamRangOfMotionTxt")) {
						neckIndex[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3NeckExamTendernessTxt")) {
						neckIndex[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3NeckExamLowerLimbSensTxt")) {
						neckIndex[2] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3NeckExamUpperLimbSensTxt")) {
						neckIndex[3] = bufSizeIndex;
					}
				}
				else if (repeatableGroupName.equalsIgnoreCase("Balance examination (BESS)")) {
					if (columnNameVector.get(i).equalsIgnoreCase("FootwearUseTyp")) {
						BESSIndex[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSFootTestAnatSite")) {
						BESSIndex[1] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("GroundSurfTyp")) {
						BESSIndex[2] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSDblLegFirmErrorCt")) {
						BESSIndex[3] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSDblLegFoamErrorCt")) {
						BESSIndex[4] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSSglLegFirmErrorCt")) {
						BESSIndex[5] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSSglLegFoamErrorCt")) {
						BESSIndex[6] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSTandemFirmErrorCt")) {
						BESSIndex[7] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSTandemStncFoamSrfcErrorCt")) {
						BESSIndex[8] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSFullTandemStandDur")) {
						BESSIndex[9] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSDblLegTotalErrorCt")) {
						BESSDblLegTotalErrorCtIndex = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSSglLegTotalErrorCt")) {
						BESSSglLegTotalErrorCtIndex = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("BESSTandemStncTotalErrorCt")) {
						BESSTandemStncTotalErrorCtIndex = bufSizeIndex;
					}
				}
				else if (repeatableGroupName.equalsIgnoreCase("Coordination Examination Upper Limb")) {
					if (columnNameVector.get(i).equalsIgnoreCase("LatTyp")) {
						coordinationIndex[0] = bufSizeIndex;
					}
					else if (columnNameVector.get(i).equalsIgnoreCase("SCAT3UpperLimbCoordinatScore")) {
						coordinationIndex[1] = bufSizeIndex;
					}
				}
			}
			} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
            } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
        	if (guidIndex > -1) {
				guid = bufDataVector.get(guidIndex);
        	}
        
	    
			if (ageyrsIndex > -1) {
				String ageData = bufDataVector.get(ageyrsIndex);
				repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
				group_row_index = bufGroup_row_index.get(ageyrsIndex);
				index = bufIndex.get(ageyrsIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
						(ageData.trim().isEmpty())) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}	
				else {
					double age = Double.valueOf(ageData).doubleValue();
					if (age < 13) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "13 or more years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));		
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
											  ageData, "13 or more years");
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
					}
				}
			  } // if (ageyrsIndex > -1)
	    
	    int numberScoresMissing = 0;
	    Vector<Integer>missingIndices = new Vector<Integer>();
	    int missing_repeatable_group_id = -1;
	    int missing_group_row_index = -1;
	    if (!haveConcussionScore) {
			for (i = 1; i <= 8; i++) {
				if (concussionScoreTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									concussionScoreTable.getRepeatableGroupName(),
									concussionScoreTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(concussionScoreTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								concussionScoreTable.getDataFilePositionMapping(i),
								concussionScoreTable.getRepeatableGroupName(),
								concussionScoreTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(concussionScoreTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						concussionScoreTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 1; i <= 8; i++)			
	    } // if (!haveConcussionScore)
        else { // haveConcussionScore   
		    for (j = 0; j < potentialConcussionIndex.length; j++) {
		    	i = potentialConcussionIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));		
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
	    
    } // else haveConcussionScore 
	    
    int numberScoresNotInteger = 0;
    Vector<Integer>notIntegerIndices = new Vector<Integer>();
    int notInteger_repeatable_group_id = -1;
    int notInteger_group_row_index = -1;
    Vector<String>notIntegerData = new Vector<String>();
    int calculatedGCSSum = 0;
	if (!haveGlasgowComaScore) {
		for (i = 0; i <= 2; i++) {
			if (GlasgowComaScoreTable.getDataFilePositionMapping(i) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								GlasgowComaScoreTable.getRepeatableGroupName(),
								GlasgowComaScoreTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(GlasgowComaScoreTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								GlasgowComaScoreTable.getDataFilePositionMapping(i),
								GlasgowComaScoreTable.getRepeatableGroupName(),
								GlasgowComaScoreTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(GlasgowComaScoreTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						GlasgowComaScoreTable.getDataFilePositionMapping(i), message));
			}
		} // for (i = 0; i <= 2; i++)
	}  // if (!haveGlasgowComaScore)
    else { // haveGlasgowComaScore
	    
	    numberScoresMissing = 0;
	    missingIndices.clear();
	    missing_repeatable_group_id = -1;
	    missing_group_row_index = -1;
	    
	    for (j = 0; j < GCSIndex.length; j++) { 
	    	i = GCSIndex[j];
	    	if (i >= 0) {
	    		data = bufDataVector.get(i);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(i));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
					missing_group_row_index = bufGroup_row_index.get(i);
		    	}
		    	else {
					try {
				        calculatedGCSSum += Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						numberScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(i));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
						notInteger_group_row_index = bufGroup_row_index.get(i);
						notIntegerData.add(data);
					}
				}
	        }
	    }
	    
	    if (numberScoresMissing >= 1) {
	    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					missing_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresMissing; i++) {
	    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresMissing >= 1)
	    
	    if (numberScoresNotInteger >= 1) {
	    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					notInteger_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresNotInteger; i++) {
	    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresNotInteger >= 1)  
	    
	    int actualGCSSum = -1;
		if (GCSTotalScoreIndex >= 0) {
			data = bufDataVector.get(GCSTotalScoreIndex);
			repeatable_group_id = bufRepeatable_group_id.get(GCSTotalScoreIndex);
			group_row_index = bufGroup_row_index.get(GCSTotalScoreIndex);
			index = bufIndex.get(GCSTotalScoreIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							    -1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
			    }
			}
		    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
		    	if (rgTable.getDataFilePositionMapping(index) == null) {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
		    	}
		    	else {
			    	message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
		    	}
		    }
			else {
				try {
			        actualGCSSum = Integer.valueOf(data).intValue();
				}
				catch (NumberFormatException e) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));  	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index),message));  
					}
				}
			}
		}
	    
	    if (actualGCSSum > -1) {
	    	if (actualGCSSum != calculatedGCSSum) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualGCSSum), String.valueOf(calculatedGCSSum));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualGCSSum), String.valueOf(calculatedGCSSum));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
    } // else haveGlasgowComaScore 
	
	if (!haveMaddocksScore) {
		for (i = 0; i <= 4; i++) {
			if (MaddocksScoreTable.getDataFilePositionMapping(i) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								MaddocksScoreTable.getRepeatableGroupName(),
								MaddocksScoreTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(MaddocksScoreTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0),
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								MaddocksScoreTable.getDataFilePositionMapping(i),
								MaddocksScoreTable.getRepeatableGroupName(),
								MaddocksScoreTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(MaddocksScoreTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0),
						MaddocksScoreTable.getDataFilePositionMapping(i), message));
			}
		} // for (i = 0; i <= 4; i++)
    } // if (!haveMaddocksScore)
	else { // haveMaddocksScore    
	    numberScoresMissing = 0;
	    missingIndices.clear();
	    missing_repeatable_group_id = -1;
	    missing_group_row_index = -1;
	    numberScoresNotInteger = 0;
	    notIntegerIndices.clear();
	    notInteger_repeatable_group_id = -1;
	    notInteger_group_row_index = -1;
	    notIntegerData.clear();
	    int calculatedMaddocksSum = 0;
	    for (j = 0; j < MaddocksIndex.length; j++) {
	    	i = MaddocksIndex[j];
	    	if (i >= 0) {
	    		data = bufDataVector.get(i);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(i));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
					missing_group_row_index = bufGroup_row_index.get(i);
		    	}
		    	else {
					try {
				        calculatedMaddocksSum += Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						numberScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(i));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
						notInteger_group_row_index = bufGroup_row_index.get(i);
						notIntegerData.add(data);
					}
				}
	        }
	    }
	    
	    if (numberScoresMissing >= 1) {
	    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					missing_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresMissing; i++) {
	    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresMissing >= 1)
	    
	    if (numberScoresNotInteger >= 1) {
	    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					notInteger_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresNotInteger; i++) {
	    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresNotInteger >= 1)
	    
	    int actualMaddocksSum = -1;
		if (MaddocksScoreTotalScoreIndex >= 0) {
			data = bufDataVector.get(MaddocksScoreTotalScoreIndex);
			repeatable_group_id = bufRepeatable_group_id.get(MaddocksScoreTotalScoreIndex);
			group_row_index = bufGroup_row_index.get(MaddocksScoreTotalScoreIndex);
			index = bufIndex.get(MaddocksScoreTotalScoreIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message)); 
					}
				}
			}
			else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
				if (rgTable.getDataFilePositionMapping(index) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
				}
				else {
			    	message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
				}
		    }
			else {
				try {
			        actualMaddocksSum = Integer.valueOf(data).intValue();
				}
				catch (NumberFormatException e) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index), 
								-1, message));   	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index), 
								rgTable.getDataFilePositionMapping(index), message));   
					}
				}
			}
		}
	    
	    if (actualMaddocksSum > -1) {
	    	if (actualMaddocksSum != calculatedMaddocksSum) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualMaddocksSum), String.valueOf(calculatedMaddocksSum));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualMaddocksSum), String.valueOf(calculatedMaddocksSum));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	} // else haveMaddocksScore
	
    if (!haveMechanismInjury) {
		if (mechanismInjuryTable.getDataFilePositionMapping(0) == null) {
			message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							mechanismInjuryTable.getRepeatableGroupName(),
							mechanismInjuryTable.getColumnName(0));
	
			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(mechanismInjuryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0),
					-1, message));	
		}
		else {
			message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							mechanismInjuryTable.getDataFilePositionMapping(0),
							mechanismInjuryTable.getRepeatableGroupName(),
							mechanismInjuryTable.getColumnName(0));
	
			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(mechanismInjuryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0),
					mechanismInjuryTable.getDataFilePositionMapping(0), message));
		}
    } // if (!haveMechanismInjury)
    else {// haveMechansimInjury
		if (MedclHistCondTxtIndex >= 0) {
			data = bufDataVector.get(MedclHistCondTxtIndex);
			repeatable_group_id = bufRepeatable_group_id.get(MedclHistCondTxtIndex);
			group_row_index = bufGroup_row_index.get(MedclHistCondTxtIndex);
			index = bufIndex.get(MedclHistCondTxtIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
					(data.trim().isEmpty())) {
				if (rgTable.getDataFilePositionMapping(index) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
				}
			}	
			
		  } // if (MedclHistCondTxtIndex >= 0) {
    } // else haveMechanismInjury
    
    if (!haveBackground) {
			for (i = 0; i <= 5; i++) {
				if (backgroundTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									backgroundTable.getRepeatableGroupName(),
									backgroundTable.getColumnName(i));
	
					message =
							message
									+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
					table.addOutput(new ValidationOutput(backgroundTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									backgroundTable.getDataFilePositionMapping(i),
									backgroundTable.getRepeatableGroupName(),
									backgroundTable.getColumnName(i));
	
					message =
							message
									+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
					table.addOutput(new ValidationOutput(backgroundTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							backgroundTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 5; i++)
			
    } // if (!haveBackground)
    else { // haveBackground    
		numberScoresMissing = 0;
		missingIndices.clear();
		missing_repeatable_group_id = -1;
		missing_group_row_index = -1;    
		for (j = 0; j < backgroundIndex.length; j++) {
			i = backgroundIndex[j];
			if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
				  } // if (i >= 0)
				} // for (j = 0; i < backgroundIndex.length; j++)
		
		if (numberScoresMissing >= 1) {
			rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					missing_repeatable_group_id, null);
			for (i = 0; i < numberScoresMissing; i++) {
				if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
			
					message =
							message
									+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
			
					message =
							message
									+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
				}
			}
		} // if (numberScoresMissing >= 1)
    } // else haveBackground 
    
    if (!haveBackgroundConcussion) {
		for (i = 0; i <= 1; i++) {
			if (backgroundConcussionTable.getDataFilePositionMapping(i) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								backgroundConcussionTable.getRepeatableGroupName(),
								backgroundConcussionTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
				table.addOutput(new ValidationOutput(backgroundConcussionTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								backgroundConcussionTable.getDataFilePositionMapping(i),
								backgroundConcussionTable.getRepeatableGroupName(),
								backgroundConcussionTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
				table.addOutput(new ValidationOutput(backgroundConcussionTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						backgroundConcussionTable.getDataFilePositionMapping(i), message));
			}
		} // for (i = 0; i <= 1; i++)		
    } // if (!haveBackgroundConcussion)
    else { // haveBackgroundConcussion
    
	    numberScoresMissing = 0;
		missingIndices.clear();
		missing_repeatable_group_id = -1;
		missing_group_row_index = -1;
		for (j = 0; j < backgroundConcussionIndex.length; j++) {
			i = backgroundConcussionIndex[j];
			if (i >= 0) {
				data = bufDataVector.get(i);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(i));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
					missing_group_row_index = bufGroup_row_index.get(i);
		    	}
		    }
	    }
	
	    if (numberScoresMissing >= 1) {
			rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					missing_repeatable_group_id, null);
			for (i = 0; i < numberScoresMissing; i++) {
				if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
			
					message =
							message
									+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
			
					message =
							message
									+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
				}
			}
		} // if (numberScoresMissing >= 1)
    } // else haveBackgroundConcussion	

    if (!haveBackgroundMedicalHistory) {
		for (i = 0; i <= 6; i++) {
			if (backgroundMedicalHistoryTable.getDataFilePositionMapping(i) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								backgroundMedicalHistoryTable.getRepeatableGroupName(),
								backgroundMedicalHistoryTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
				table.addOutput(new ValidationOutput(backgroundMedicalHistoryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								backgroundMedicalHistoryTable.getDataFilePositionMapping(i),
								backgroundMedicalHistoryTable.getRepeatableGroupName(),
								backgroundMedicalHistoryTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
				table.addOutput(new ValidationOutput(backgroundMedicalHistoryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						backgroundMedicalHistoryTable.getDataFilePositionMapping(i), message));
			}
		} // for (i = 0; i <= 6; i++)	
    } // if (!haveBackgroundMedicalHistory)
    else { // haveBackgroundMedicalHistory
		    numberScoresMissing = 0;
			missingIndices.clear();
			missing_repeatable_group_id = -1;
			missing_group_row_index = -1;
			for (j = 0; j < backgroundMedicalHistoryIndex.length; j++) {
				i = backgroundMedicalHistoryIndex[j];
				if (i >= 0) {
					data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    }
		    }

	    if (numberScoresMissing >= 1) {
			rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					missing_repeatable_group_id, null);
			for (i = 0; i < numberScoresMissing; i++) {
				if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
			
					message =
							message
									+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
			
					message =
							message
									+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
				}
			}
		} // if (numberScoresMissing >= 1)
    } // else haveBackgroundHistory   
		
		
		int calculatedScat3TotalSymptoms = 0;
		int calculatedScat3TotSympScore = 0;
		if (!haveSymptomEvaluation) {
			numberScoresMissing  = 22;
			for (i = 0; i <= 25; i++) {
				if (symptomEvaluationTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									symptomEvaluationTable.getRepeatableGroupName(),
									symptomEvaluationTable.getColumnName(i));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(symptomEvaluationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									symptomEvaluationTable.getDataFilePositionMapping(i),
									symptomEvaluationTable.getRepeatableGroupName(),
									symptomEvaluationTable.getColumnName(i));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(symptomEvaluationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							symptomEvaluationTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 25; i++) 			
		} // if (!haveSymptomEvaluation)
		else { // haveSymptomEvaluation
		    numberScoresMissing = 0;
			missingIndices.clear();
			missing_repeatable_group_id = -1;
			missing_group_row_index = -1;
			numberScoresNotInteger = 0;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notInteger_group_row_index = -1;
		    notIntegerData.clear();
			for (j = 0; j < symptomIndex.length; j++) {
				i = symptomIndex[j];
				if (i >= 0) {
					data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else if (j <= 21) {
			    		try {
					        calculatedScat3TotSympScore += Integer.valueOf(data).intValue();
					        calculatedScat3TotalSymptoms++;
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}	
			    	}
			    }
		} 
			
			
	    if (numberScoresMissing >= 1) {
			rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					missing_repeatable_group_id, null);
			for (i = 0; i < numberScoresMissing; i++) {
				if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
			
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
			
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
				}
			}
		} // if (numberScoresMissing >= 1)
		    
	    if (numberScoresNotInteger >= 1) {
	    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					notInteger_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresNotInteger; i++) {
	    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresNotInteger >= 1)
		    
	} // else haveSymptomEvaluation
		
	if (!haveScoringSummary) { 
		if (scoringSummaryTable.getDataFilePositionMapping(0) == null) {
			message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(0));

			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					-1, message));	
		}
		else {
			message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getDataFilePositionMapping(0),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(0));

			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					scoringSummaryTable.getDataFilePositionMapping(0), message));
		}
			if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
				if (scoringSummaryTable.getDataFilePositionMapping(1) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									scoringSummaryTable.getRepeatableGroupName(),
									scoringSummaryTable.getColumnName(1));

					message =
							message
								 	+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						     -1, message));	
				}
				else {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoringSummaryTable.getDataFilePositionMapping(1),
										scoringSummaryTable.getRepeatableGroupName(),
										scoringSummaryTable.getColumnName(1));

						message =
								message
									 	+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
								scoringSummaryTable.getDataFilePositionMapping(1), message));
				}
		    } // if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0))
			
    } // if (!haveScoringSummary)
	else { // haveScoringSummary
	    
	    int actualScat3TotalSymptoms = -1;
			if (Scat3TotalSymptomsIndex >= 0) {
				data = bufDataVector.get(Scat3TotalSymptomsIndex);
				repeatable_group_id = bufRepeatable_group_id.get(Scat3TotalSymptomsIndex);
				group_row_index = bufGroup_row_index.get(Scat3TotalSymptomsIndex);
				index = bufIndex.get(Scat3TotalSymptomsIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message)); 
					}
				}
				else {
					try {
				        actualScat3TotalSymptoms = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
			}
	    
    
	    
	    if (actualScat3TotalSymptoms > -1) {
	    	if (actualScat3TotalSymptoms != calculatedScat3TotalSymptoms) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualScat3TotalSymptoms), String.valueOf(calculatedScat3TotalSymptoms));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualScat3TotalSymptoms), String.valueOf(calculatedScat3TotalSymptoms));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
	    int actualScat3TotSympScore = -1;
			if (Scat3TotSympScoreIndex >= 0) {
				data = bufDataVector.get(Scat3TotSympScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(Scat3TotSympScoreIndex);
				group_row_index = bufGroup_row_index.get(Scat3TotSympScoreIndex);
				index = bufIndex.get(Scat3TotSympScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if (calculatedScat3TotalSymptoms == 22) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
				else if (calculatedScat3TotalSymptoms < 22) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
			    }
				else {
					try {
				        actualScat3TotSympScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
			}
	    
    
	    
	    if (actualScat3TotSympScore > -1) {
	    	if (actualScat3TotSympScore != calculatedScat3TotSympScore) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualScat3TotSympScore), String.valueOf(calculatedScat3TotSympScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
						     -1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualScat3TotSympScore), String.valueOf(calculatedScat3TotSympScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	} // else haveScoringSummary
	
	int numberCognitiveScoresMissing = 0;
	int calculatedSACOrientationSubsetScore = 0;
	int numberCognitiveScoresNotInteger = 0;
	if (!haveSACOrientation) {
		numberScoresMissing = 5;
		numberCognitiveScoresMissing = 5;
		for (i = 0; i <= 4; i++) {
			if (SACOrientationTable.getDataFilePositionMapping(i) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								SACOrientationTable.getRepeatableGroupName(),
								SACOrientationTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(SACOrientationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								SACOrientationTable.getDataFilePositionMapping(i),
								SACOrientationTable.getRepeatableGroupName(),
								SACOrientationTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(SACOrientationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						SACOrientationTable.getDataFilePositionMapping(i), message));
			}
		} // for (i = 0; i <= 4; i++)	
    }
	else { // haveSACOrientation
	    
	    numberScoresMissing = 0;
	    missingIndices.clear();
	    missing_repeatable_group_id = -1;
	    missing_group_row_index = -1;
	    numberScoresNotInteger = 0;
	    notIntegerIndices.clear();
	    notInteger_repeatable_group_id = -1;
	    notInteger_group_row_index = -1;
	    notIntegerData.clear();
	    for (j = 0; j < SACOrientationIndex.length; j++) {
	    	i = SACOrientationIndex[j];
	    	if (i >= 0) {
	    		data = bufDataVector.get(i);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(i));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
					missing_group_row_index = bufGroup_row_index.get(i);
		    	}
		    	else {
					try {
				        calculatedSACOrientationSubsetScore += Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						numberScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(i));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
						notInteger_group_row_index = bufGroup_row_index.get(i);
						notIntegerData.add(data);
					}
				}
	        }
	    }
	    numberCognitiveScoresMissing = numberScoresMissing;
	    numberCognitiveScoresNotInteger = numberScoresNotInteger;
	    
	    if (numberScoresMissing >= 1) {
	    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					missing_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresMissing; i++) {
	    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresMissing >= 1)
	    
	    if (numberScoresNotInteger >= 1) {
	    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					notInteger_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresNotInteger; i++) {
	    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresNotInteger >= 1)
	} // else haveSACOrientation
	    
	    
	    
	    int actualSACOrientationSubsetScore = -1;
			if (SACOrientationSubsetScoreIndex >= 0) {
				data = bufDataVector.get(SACOrientationSubsetScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(SACOrientationSubsetScoreIndex);
				group_row_index = bufGroup_row_index.get(SACOrientationSubsetScoreIndex);
				index = bufIndex.get(SACOrientationSubsetScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));  
						}
					}
				}
				else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
			    }
				else {
					try {
				        actualSACOrientationSubsetScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
			}
	    
    if ((!haveScoringSummary) && (numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
    	if (scoringSummaryTable.getDataFilePositionMapping(2) == null) {
    		message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(2));
	
			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					-1, message));	
    	}
    	else {
			message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getDataFilePositionMapping(2),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(2));
	
			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					scoringSummaryTable.getDataFilePositionMapping(2), message));
    	}
	    }
	    
	    if (haveSACOrientation && (actualSACOrientationSubsetScore > -1)) {
	    	if (actualSACOrientationSubsetScore != calculatedSACOrientationSubsetScore) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualSACOrientationSubsetScore), String.valueOf(calculatedSACOrientationSubsetScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualSACOrientationSubsetScore), String.valueOf(calculatedSACOrientationSubsetScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
	    int trialNumber = 1;
	    int numberTrials = 0;
	    int calculatedSACImmdMemorySubsetScore = 0;
	    Vector<Integer> missingGroupRowIndices = new Vector<Integer>();
	    Vector<Integer> notIntegerGroupRowIndices = new Vector<Integer>();
	    if (!haveSACImmediateMemory) {
	    	       numberScoresMissing = 7;
	    	       numberCognitiveScoresMissing += 5;
	    	
	    			for (j = 0; j <= 0; j++) {
	    			for (i = 0; i <= 6; i++) {
	    				if (SACImmediateMemoryTable.getDataFilePositionMapping(i) == null) {
	    					message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, j),
											SACImmediateMemoryTable.getRepeatableGroupName(),
											SACImmediateMemoryTable.getColumnName(i));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(SACImmediateMemoryTable, OutputType.ERROR, getRawDataRow(subject_row_id, j), 
									-1, message));	
	    				}
	    				else {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, j),
											SACImmediateMemoryTable.getDataFilePositionMapping(i),
											SACImmediateMemoryTable.getRepeatableGroupName(),
											SACImmediateMemoryTable.getColumnName(i));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(SACImmediateMemoryTable, OutputType.ERROR, getRawDataRow(subject_row_id, j), 
									SACImmediateMemoryTable.getDataFilePositionMapping(i), message));
	    				}
	    			} // for (i = 0; i <= 6; i++)
	    			} // for (j = 0; j <= 0; j++)
	    			
	    } // if (!haveSACImmediateMemory)
        else { // haveSACImmediateMemory
	    
		    numberScoresMissing = 0;
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    numberScoresNotInteger = 0;
		    notIntegerIndices.clear();
		    notInteger_repeatable_group_id = -1;
		    notIntegerData.clear();
		    boolean haveTrial1 = false;
		    boolean haveTrial2 = false;
		    boolean haveTrial3 = false;
		    for (j = 0; j < 3; j++) {
		    	for (k = 0; k < 7; k++) {
		    	i = SACImmediateMemoryIndex[j][k];
		    	if (i >= 0) {
		    	
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missingGroupRowIndices.add(bufGroup_row_index.get(i));
						if (k >= 2) {
							numberCognitiveScoresMissing++;
						}
			    	}
			    	else {
			    		if (k >= 2) {
						try {
					        calculatedSACImmdMemorySubsetScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
							numberCognitiveScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notIntegerGroupRowIndices.add(bufGroup_row_index.get(i));
							notIntegerData.add(data);
						}
			    		}
						else if (k == 0) {
							try {
								trialNumber = Integer.valueOf(data).intValue();
								if (trialNumber == 1) {
									if (!haveTrial1) {
										numberTrials++;
									}
									haveTrial1 = true;
								}
								else if (trialNumber == 2) {
									if (!haveTrial2) {
										numberTrials++;
									}
									haveTrial2 = true;
								}
								else if (trialNumber == 3) {
									if (!haveTrial3) {
										numberTrials++;
									}
									haveTrial3 = true;
								}
							}
							catch (NumberFormatException e){ 
								numberScoresNotInteger++;
							    notIntegerIndices.add(bufIndex.get(i));
							    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
								notIntegerGroupRowIndices.add(bufGroup_row_index.get(i));
								notIntegerData.add(data);
							}
						}
					} // else data not blank
		        } // if (i >= 0)
		    	} // for (k = 0; k < 7; k++)
		    } // for (j = 0; j < 3; j++)
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missingGroupRowIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missingGroupRowIndices.get(i)),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missingGroupRowIndices.get(i)),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missingGroupRowIndices.get(i)),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notIntegerGroupRowIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notIntegerGroupRowIndices.get(i)),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notIntegerGroupRowIndices.get(i)),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notIntegerGroupRowIndices.get(i)),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
    } // else haveSACImmediateMemory
	    
	    
	    int actualSACImmdMemorySubsetScore = -1;
			if (SACImmdMemorySubsetScoreIndex >= 0) {
				data = bufDataVector.get(SACImmdMemorySubsetScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(SACImmdMemorySubsetScoreIndex);
				group_row_index = bufGroup_row_index.get(SACImmdMemorySubsetScoreIndex);
				index = bufIndex.get(SACImmdMemorySubsetScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberCognitiveScoresMissing == 0) && (numberCognitiveScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
						if (numberTrials < 3) {
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_TOO_FEW_TRIALS,
														trialNumber, 3);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										-1, message)); 	
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_TOO_FEW_TRIALS,
														trialNumber, 3);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message)); 
							}
						}
					}
				}
				else if ((numberCognitiveScoresMissing >= 1) || (numberCognitiveScoresNotInteger >= 1)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));		
					}
					else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
					}

					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
											data);
					if ((numberCognitiveScoresMissing == 1) && (numberCognitiveScoresNotInteger == 0)) {
						message = message + " due to 1 missing value";			
					}
					else if  ((numberCognitiveScoresMissing > 1) && (numberCognitiveScoresNotInteger == 0)) {
						message = message + " due to " + String.valueOf(numberCognitiveScoresMissing) +
								" missing values";
					}
					else if  ((numberCognitiveScoresMissing == 0) && (numberCognitiveScoresNotInteger == 1)) {
						message = message + " due to 1 noninteger value";
					}
					else if  ((numberCognitiveScoresMissing == 0) && (numberCognitiveScoresNotInteger > 1)) {
						message = message + " due to " + String.valueOf(numberCognitiveScoresNotInteger) +
								" noninteger values";
					}
					else {
						int totalScores = numberCognitiveScoresMissing + numberCognitiveScoresNotInteger;
						message = message + " due to " + String.valueOf(totalScores) + " missing and noninteger values";
					    
					}
					if (rgTable.getDataFilePositionMapping(index) == null) {
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
			    }
				else {
					try {
				        actualSACImmdMemorySubsetScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
					}
					if (trialNumber < 3) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_TOO_FEW_TRIALS,
													trialNumber, 3);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_TOO_FEW_TRIALS,
													trialNumber, 3);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));  
						}
					} // if (trialNumber < 3)
				}
			}
	    
    if ((!haveScoringSummary) && (numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
    	if (scoringSummaryTable.getDataFilePositionMapping(3) == null) {
    		message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(3));

			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					-1, message));	
    	}
    	else {
			message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getDataFilePositionMapping(3),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(3));

			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					scoringSummaryTable.getDataFilePositionMapping(3), message));
    	}
	    			
	    }
	    
	    if (haveSACImmediateMemory && (actualSACImmdMemorySubsetScore > -1)) {
	    	if (actualSACImmdMemorySubsetScore != calculatedSACImmdMemorySubsetScore) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualSACImmdMemorySubsetScore), String.valueOf(calculatedSACImmdMemorySubsetScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualSACImmdMemorySubsetScore), String.valueOf(calculatedSACImmdMemorySubsetScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
	int calculatedSACConcentrationSubsetScore = 0;
	if (!haveSACConcentration) {
    	numberScoresMissing = 7;
    	numberCognitiveScoresMissing += 5;
		for (j = 0; j <= 0; j++) {
		for (i = 0; i <= 6; i++) {
			if (SACConcentrationTable.getDataFilePositionMapping(i) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, j),
								SACConcentrationTable.getRepeatableGroupName(),
								SACConcentrationTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(SACConcentrationTable, OutputType.ERROR, getRawDataRow(subject_row_id, j), 
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, j),
								SACConcentrationTable.getDataFilePositionMapping(i),
								SACConcentrationTable.getRepeatableGroupName(),
								SACConcentrationTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(SACConcentrationTable, OutputType.ERROR, getRawDataRow(subject_row_id, j), 
						SACConcentrationTable.getDataFilePositionMapping(i), message));
			}
		} // for (i = 0; i <= 6; i++)
		} // for (j = 0; j <= 0; j++)
	    } // if (!haveSACConcentration)
    else { // haveSACConcentration
	    numberScoresMissing = 0;
	    missingIndices.clear();
	    missing_repeatable_group_id = -1;
	    missingGroupRowIndices.clear();
	    numberScoresNotInteger = 0;
	    notIntegerIndices.clear();
	    notInteger_repeatable_group_id = -1;
	    notIntegerGroupRowIndices.clear();
	    notIntegerData.clear();
	    for (j = 0; j < SACConcentrationIndex.length; j++) {
	    	i = SACConcentrationIndex[j];
	    	if (i >= 0) {
	    		data = bufDataVector.get(i);
	    		if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(i));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
					missingGroupRowIndices.add(bufGroup_row_index.get(i));
					if (j >= 2) {
						numberCognitiveScoresMissing++;
					}
		    	}
		    	else {
		    		if (j >= 2) {
					try {
				        calculatedSACConcentrationSubsetScore += Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						numberScoresNotInteger++;
						numberCognitiveScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(i));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
						notIntegerGroupRowIndices.add(bufGroup_row_index.get(i));
						notIntegerData.add(data);
					}
		    		}
					else if (j == 0) {
						try {
							trialNumber = Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e){ 
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notIntegerGroupRowIndices.add(bufGroup_row_index.get(i));
							notIntegerData.add(data);
						}
					}
				} // else data not blank
	        }
	    }
	    
	    if (numberScoresMissing >= 1) {
	    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					missing_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresMissing; i++) {
	    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, missingGroupRowIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missingGroupRowIndices.get(i)),
							-1, message));		
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, missingGroupRowIndices.get(i)),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missingGroupRowIndices.get(i)),
							rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresMissing >= 1)
	    
	    if (numberScoresNotInteger >= 1) {
	    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					notInteger_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresNotInteger; i++) {
	    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, notIntegerGroupRowIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notIntegerGroupRowIndices.get(i)),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, notIntegerGroupRowIndices.get(i)),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notIntegerGroupRowIndices.get(i)),
							rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresNotInteger >= 1)
    } // else haveSACConcentration
	    
	    
	    
	    int actualSACConcentrationSubsetScore = -1;
			if (SACConcentationSubsetScoreIndex >= 0) {
				data = bufDataVector.get(SACConcentationSubsetScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(SACConcentationSubsetScoreIndex);
				group_row_index = bufGroup_row_index.get(SACConcentationSubsetScoreIndex);
				index = bufIndex.get(SACConcentationSubsetScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
				else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
			    }
				else {
					try {
				        actualSACConcentrationSubsetScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
			}
	    
    if ((!haveScoringSummary) && (numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
    	if (scoringSummaryTable.getDataFilePositionMapping(5) == null) {
    		message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(5));

			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					-1, message));	
    	}
    	else {
			message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getDataFilePositionMapping(5),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(5));

			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					scoringSummaryTable.getDataFilePositionMapping(5), message));
    	}
	    			
	    }
	    
	    if (haveSACConcentration && (actualSACConcentrationSubsetScore > -1)) {
	    	if (actualSACConcentrationSubsetScore != calculatedSACConcentrationSubsetScore) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualSACConcentrationSubsetScore), String.valueOf(calculatedSACConcentrationSubsetScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualSACConcentrationSubsetScore), String.valueOf(calculatedSACConcentrationSubsetScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
	    int SACDelayedRecallSubsetScore = -1;
			if (SACDelayedRecallSubsetScoreIndex >= 0) {
				data = bufDataVector.get(SACDelayedRecallSubsetScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(SACDelayedRecallSubsetScoreIndex);
				group_row_index = bufGroup_row_index.get(SACDelayedRecallSubsetScoreIndex);
				index = bufIndex.get(SACDelayedRecallSubsetScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					numberCognitiveScoresMissing++;
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
				else {
					try {
				        SACDelayedRecallSubsetScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						numberCognitiveScoresNotInteger++;
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
			}
	    
    if (!haveScoringSummary) {
	    	numberCognitiveScoresMissing++;
	    	if (scoringSummaryTable.getDataFilePositionMapping(6) == null) {
	    		message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								scoringSummaryTable.getRepeatableGroupName(),
								scoringSummaryTable.getColumnName(6));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
	    	}
	    	else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								scoringSummaryTable.getDataFilePositionMapping(6),
								scoringSummaryTable.getRepeatableGroupName(),
								scoringSummaryTable.getColumnName(6));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						scoringSummaryTable.getDataFilePositionMapping(6), message));
	    	}
	    }
	    
	    int calculatedSACTotalScore = calculatedSACOrientationSubsetScore +
	    		calculatedSACImmdMemorySubsetScore + calculatedSACConcentrationSubsetScore +
	    		SACDelayedRecallSubsetScore;
	    
	    int actualSACTotalScore = -1;
			if (SACTotalScoreIndex >= 0) {
				data = bufDataVector.get(SACTotalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(SACTotalScoreIndex);
				group_row_index = bufGroup_row_index.get(SACTotalScoreIndex);
				index = bufIndex.get(SACTotalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberCognitiveScoresMissing == 0) && (numberCognitiveScoresNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));  
						}
					}
				}
				else if ((numberCognitiveScoresMissing >= 1) || (numberCognitiveScoresNotInteger >= 1)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
			    }
				else {
					try {
				        actualSACTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
			}
	    
    if ((!haveScoringSummary) && (numberCognitiveScoresMissing == 0) && (numberCognitiveScoresNotInteger == 0)) {
    	if (scoringSummaryTable.getDataFilePositionMapping(7) == null) {
    		message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(7));
	
			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					-1, message));	
    	}
    	else {
			message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getDataFilePositionMapping(7),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(7));
	
			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					scoringSummaryTable.getDataFilePositionMapping(7), message));
    	}
	    			
	    }
	    
	    if (actualSACTotalScore > -1) {
	    	if (actualSACTotalScore != calculatedSACTotalScore) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualSACTotalScore), String.valueOf(calculatedSACTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualSACTotalScore), String.valueOf(calculatedSACTotalScore));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
    if (!haveNeckExamination) {
			for (i = 0; i <= 3; i++) {
				if (neckExaminationTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									neckExaminationTable.getRepeatableGroupName(),
									neckExaminationTable.getColumnName(i));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(neckExaminationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									neckExaminationTable.getDataFilePositionMapping(i),
									neckExaminationTable.getRepeatableGroupName(),
									neckExaminationTable.getColumnName(i));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(neckExaminationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							neckExaminationTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 3; i++)	
	    } // if (!haveNeckExamination)
        else { // haveNeckExamination
		    numberScoresMissing = 0;
		    missingIndices.clear();
		    missing_repeatable_group_id = -1;
		    missing_group_row_index = -1;
		    for (j = 0; j < neckIndex.length; j++) {
		    	i = neckIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));		
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
		
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
        } // else haveNeckExamination
	    
	    
    int numberBESSDblMissing = 0;
    int numberBESSDblNotInteger = 0;
    int calculatedBESSDblLegTotalErrorCt = 0;
    int numberBESSSglMissing = 0;
    int numberBESSSglNotInteger = 0;
    int calculatedBESSSglLegTotalErrorCt = 0;
    int numberBESSTandemMissing = 0;
    int numberBESSTandemNotInteger = 0;
    int calculatedBESSTandemStncTotalErrorCt = 0;
    int numberBESSMissing = 0;
    int numberBESSNotInteger = 0;
    int FullTandemStandDur = -1;
    int calculatedBESSTotalErrorCt = 0;
    if (!haveBESS) {
    	numberScoresMissing = 7;
    	numberBESSDblMissing = 1;
    	numberBESSSglMissing = 1;
    	numberBESSTandemMissing = 1;
    	numberBESSMissing = 3;
		for (i = 0; i <= 12; i++) {
			if (BESSTable.getDataFilePositionMapping(i) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								BESSTable.getRepeatableGroupName(),
								BESSTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(BESSTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								BESSTable.getDataFilePositionMapping(i),
								BESSTable.getRepeatableGroupName(),
								BESSTable.getColumnName(i));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(BESSTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						BESSTable.getDataFilePositionMapping(i), message));
			}
		} // for (i = 0; i <= 12; i++)	
    } // if (!haveBESS)
    else { // haveBESS
	    numberScoresMissing = 0;
	    missingIndices.clear();
	    missing_repeatable_group_id = -1;
	    missing_group_row_index = -1;
	    numberScoresNotInteger = 0;
	    notIntegerIndices.clear();
	    notInteger_repeatable_group_id = -1;
	    notInteger_group_row_index = -1;
	    notIntegerData.clear();
	    int BESSValue;
	    boolean isFirm = true;
	    int BESSFullTandemStandDur = -1;
	    for (j = 0; j < BESSIndex.length; j++) {
	    	i = BESSIndex[j];
	    	if (i >= 0) {
	    		// BESSFullTandemStandDur in BESS can be different from
	    		// FullTandemStandDur in Scoring Summary
	    		data = bufDataVector.get(i);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((isFirm && (j == 3)) ||
	    		    ((!isFirm) && (j == 4))) {
						numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
						numberBESSDblMissing++;
					}
					else if ((isFirm && (j == 5)) ||
	    		    ((!isFirm) && (j == 6))) {
						numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
						numberBESSSglMissing++;
					}
					else if ((isFirm && (j == 7)) ||
	    		    ((!isFirm) && (j == 8))) {
						numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
					    numberBESSTandemMissing++;	
					}
					else if ((j == 0) ||
				             (j == 1) ||
				    		 (j == 2)||
				    		(j == 9)) {
						numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);	
					}
		    	}
		    	else {
		    		if (((isFirm && (j == 3)) ||
			    		    ((!isFirm) && (j == 4))) ||
		    				((isFirm && (j == 5)) ||
		    		    		    ((!isFirm) && (j == 6))) ||
		    				((isFirm && (j == 7)) ||
		    		    		    ((!isFirm) && (j == 8))) ||
		    				(j == 9)) {
					try {
				        BESSValue = Integer.valueOf(data).intValue();
				        if ((j == 3) || (j == 4)) {
				        	calculatedBESSDblLegTotalErrorCt = BESSValue;	
						}
						else if ((j == 5) || (j == 6)) {
							calculatedBESSSglLegTotalErrorCt = BESSValue;
						}
						else if ((j == 7) || (j == 8)) {
							calculatedBESSTandemStncTotalErrorCt = BESSValue;    	
						}
						else if (j == 9) {
							BESSFullTandemStandDur = BESSValue;
						}
					}
					catch (NumberFormatException e) {
						numberScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(i));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
						notInteger_group_row_index = bufGroup_row_index.get(i);
						notIntegerData.add(data);
						if ((j == 3) || (j == 4)) {
							numberBESSDblNotInteger++;
						}
						else if ((j == 5) ||(j == 6)) {
							numberBESSSglNotInteger++;
						}
						else if ((j == 7) || (j == 8)) {
						    numberBESSTandemNotInteger++;	
						}
					}
		    		}
		    		else if (j == 2) {
						if (data.equalsIgnoreCase("Firm")) {
							isFirm = true;
						}
						else if (data.equalsIgnoreCase("Foam")) {
							isFirm = false;
						}
						else {
							repeatable_group_id = bufRepeatable_group_id.get(i);
							group_row_index = bufGroup_row_index.get(i);
							index = bufIndex.get(i);
							rgTable = table.getRepeatableGroupTable(repeatable_group_id);
							rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
							if (rgTable.getDataFilePositionMapping(index) == null) {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_ILLEGAL_GROUNDSURFTYP, data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										-1, message));		
							}
							else {
								message =
										String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
												guid,
												getRawDataRow(subject_row_id, group_row_index),
												rgTable.getDataFilePositionMapping(index),
												rgTable.getRepeatableGroupName(),
												rgTable.getColumnName(index));
	
								message =
										message
												+ String.format(ApplicationsConstants.ERR_ILLEGAL_GROUNDSURFTYP, data);
								table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index), message));	
							}
						}
					} // else if (j == 2)
		    		else if ((((!isFirm) && (j == 3)) ||
			    		    (isFirm && (j == 4))) ||
		    				(((!isFirm) && (j == 5)) ||
		    		    		    (isFirm && (j == 6))) ||
		    				(((!isFirm) && (j == 7)) ||
		    		    		    (isFirm && (j == 8)))) {
		    			repeatable_group_id = bufRepeatable_group_id.get(i);
						group_row_index = bufGroup_row_index.get(i);
						index = bufIndex.get(i);
						rgTable = table.getRepeatableGroupTable(repeatable_group_id);
						rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED, data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED, data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
		    		}
				} // else data not blank
	        } // if (i >= 0) ||
	    } // for (j = 0; j < BESSIndex.length; j++)
	    numberBESSMissing = numberBESSDblMissing + numberBESSSglMissing +
	    		            numberBESSTandemMissing;
	    numberBESSNotInteger = numberBESSDblNotInteger + numberBESSSglNotInteger +
	    		               numberBESSTandemNotInteger;
	    calculatedBESSTotalErrorCt = calculatedBESSDblLegTotalErrorCt +
	    		calculatedBESSSglLegTotalErrorCt +
	    		calculatedBESSTandemStncTotalErrorCt;
	    
	    if (numberScoresMissing >= 1) {
	    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					missing_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresMissing; i++) {
	    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresMissing >= 1)
	    
	    if (numberScoresNotInteger >= 1) {
	    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					notInteger_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresNotInteger; i++) {
	    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresNotInteger >= 1)
    } // else haveBESS
	    
	    
	    int actualBESSDblLegTotalErrorCt = -1;
			if (BESSDblLegTotalErrorCtIndex >= 0) {
				data = bufDataVector.get(BESSDblLegTotalErrorCtIndex);
				repeatable_group_id = bufRepeatable_group_id.get(BESSDblLegTotalErrorCtIndex);
				group_row_index = bufGroup_row_index.get(BESSDblLegTotalErrorCtIndex);
				index = bufIndex.get(BESSDblLegTotalErrorCtIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberBESSDblMissing == 0) && (numberBESSDblNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
				    }
				}
			    else if ((numberBESSDblMissing >= 1) || (numberBESSDblNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualBESSDblLegTotalErrorCt = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));   
						}
					}
				}
			}
	    
	    if (haveBESS && (actualBESSDblLegTotalErrorCt > -1)) {
	    	if (actualBESSDblLegTotalErrorCt != calculatedBESSDblLegTotalErrorCt) {
	    		if (rgTable.getDataFilePositionMapping(index) == null)  {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualBESSDblLegTotalErrorCt), String.valueOf(calculatedBESSDblLegTotalErrorCt));
					//table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							//-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualBESSDblLegTotalErrorCt), String.valueOf(calculatedBESSDblLegTotalErrorCt));
					//table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							//rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
	    int actualBESSSglLegTotalErrorCt = -1;
			if (BESSSglLegTotalErrorCtIndex >= 0) {
				data = bufDataVector.get(BESSSglLegTotalErrorCtIndex);
				repeatable_group_id = bufRepeatable_group_id.get(BESSSglLegTotalErrorCtIndex);
				group_row_index = bufGroup_row_index.get(BESSSglLegTotalErrorCtIndex);
				index = bufIndex.get(BESSSglLegTotalErrorCtIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberBESSSglMissing == 0) && (numberBESSSglNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
				    }
				}
			    else if ((numberBESSSglMissing >= 1) || (numberBESSSglNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualBESSSglLegTotalErrorCt = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
			}
	    
	    if (haveBESS && (actualBESSSglLegTotalErrorCt > -1)) {
	    	if (actualBESSSglLegTotalErrorCt != calculatedBESSSglLegTotalErrorCt) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualBESSSglLegTotalErrorCt), String.valueOf(calculatedBESSSglLegTotalErrorCt));
					//table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							//-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualBESSSglLegTotalErrorCt), String.valueOf(calculatedBESSSglLegTotalErrorCt));
					//table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							//rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
	    int actualBESSTandemStncTotalErrorCt = -1;
			if (BESSTandemStncTotalErrorCtIndex >= 0) {
				data = bufDataVector.get(BESSTandemStncTotalErrorCtIndex);
				repeatable_group_id = bufRepeatable_group_id.get(BESSTandemStncTotalErrorCtIndex);
				group_row_index = bufGroup_row_index.get(BESSTandemStncTotalErrorCtIndex);
				index = bufIndex.get(BESSTandemStncTotalErrorCtIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberBESSTandemMissing == 0) && (numberBESSTandemNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
				    }
				}
			    else if ((numberBESSTandemMissing >= 1) || (numberBESSTandemNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualBESSTandemStncTotalErrorCt = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
			}
	    
	    if (haveBESS && (actualBESSTandemStncTotalErrorCt > -1)) {
	    	if (actualBESSTandemStncTotalErrorCt != calculatedBESSTandemStncTotalErrorCt) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualBESSTandemStncTotalErrorCt), String.valueOf(calculatedBESSTandemStncTotalErrorCt));
					//table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							//-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualBESSTandemStncTotalErrorCt), String.valueOf(calculatedBESSTandemStncTotalErrorCt));
					//table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							//rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
    if ((!haveScoringSummary) && (numberBESSMissing == 0) && (numberBESSNotInteger == 0)) {
	    if (scoringSummaryTable.getDataFilePositionMapping(8) == null) {
	    	message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(8));

			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					-1, message));	
	    }
	    else {
			message =
					String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
							guid,
							getRawDataRow(subject_row_id, 0),
							scoringSummaryTable.getDataFilePositionMapping(8),
							scoringSummaryTable.getRepeatableGroupName(),
							scoringSummaryTable.getColumnName(8));

			message =
					message
							+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
			table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
					scoringSummaryTable.getDataFilePositionMapping(8), message));
	    }
	    			
	    }
	    
	    int actualBESSTotalErrorCt = -1;
			if (BESSTotalErrorCtIndex >= 0) {
				data = bufDataVector.get(BESSTotalErrorCtIndex);
				repeatable_group_id = bufRepeatable_group_id.get(BESSTotalErrorCtIndex);
				group_row_index = bufGroup_row_index.get(BESSTotalErrorCtIndex);
				index = bufIndex.get(BESSTotalErrorCtIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberBESSMissing == 0) && (numberBESSNotInteger == 0)) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
				    }
				}
			    else if ((numberBESSMissing >= 1) || (numberBESSNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualBESSTotalErrorCt = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
			}
	    
	    if (haveBESS && (actualBESSTotalErrorCt > -1)) {
	    	if (actualBESSTotalErrorCt != calculatedBESSTotalErrorCt) {
	    		if (rgTable.getDataFilePositionMapping(index) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualBESSTotalErrorCt), String.valueOf(calculatedBESSTotalErrorCt));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(index));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
											String.valueOf(actualBESSTotalErrorCt), String.valueOf(calculatedBESSTotalErrorCt));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							rgTable.getDataFilePositionMapping(index), message));
	    		}
	    	}
	    }
	    
			if (FullTandemStandDurIndex >= 0) {
				data = bufDataVector.get(FullTandemStandDurIndex);
				repeatable_group_id = bufRepeatable_group_id.get(FullTandemStandDurIndex);
				group_row_index = bufGroup_row_index.get(FullTandemStandDurIndex);
				index = bufIndex.get(FullTandemStandDurIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message)); 
					}
				}
				else {
					try {
				        FullTandemStandDur = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message)); 	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
			}
	    
	    if (!haveScoringSummary) {
	    	// FullTandemStandDur is not present
	    	if (scoringSummaryTable.getDataFilePositionMapping(9) == null) {
	    		message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								scoringSummaryTable.getRepeatableGroupName(),
								scoringSummaryTable.getColumnName(9));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
	    	}
	    	else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								scoringSummaryTable.getDataFilePositionMapping(9),
								scoringSummaryTable.getRepeatableGroupName(),
								scoringSummaryTable.getColumnName(9));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
				table.addOutput(new ValidationOutput(scoringSummaryTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						scoringSummaryTable.getDataFilePositionMapping(9), message));
	    	}
	    			
	    }
	    
	    // SCAT3UpperLimbCoordinatScore appears twice
	    // Once in Coordination Examination Upper Limb and once in Scoring Summary
	    // The 2 values are allowed to be different.
	    int SCAT3UpperLimbCoordinatScore1 = -1;
	    int SCAT3UpperLimbCoordinatScore2 = -1;
	    if (!haveCoordination) {
	    			for (i = 0; i <= 1; i++) {
	    				if (coordinationTable.getDataFilePositionMapping(i) == null) {
	    					message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											coordinationTable.getRepeatableGroupName(),
											coordinationTable.getColumnName(i));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(coordinationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0),
									-1, message));	
	    				}
	    				else {
			    			message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, 0),
											coordinationTable.getDataFilePositionMapping(i),
											coordinationTable.getRepeatableGroupName(),
											coordinationTable.getColumnName(i));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(coordinationTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0),
									coordinationTable.getDataFilePositionMapping(i), message));
	    				}
	    			} // for (i = 0; i <= 1; i++)
	    			
	} // if (!haveCoordination)
    else { // haveCoordination    
	    
	    numberScoresMissing = 0;
	    missingIndices.clear();
	    missing_repeatable_group_id = -1;
	    missing_group_row_index = -1;
	    numberScoresNotInteger = 0;
	    notIntegerIndices.clear();
	    notInteger_repeatable_group_id = -1;
	    notInteger_group_row_index = -1;
	    notIntegerData.clear();
	    for (j = 0; j < coordinationIndex.length; j++) {
	    	i = coordinationIndex[j];
	    	if (i >= 0) {
	    		data = bufDataVector.get(i);
		    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
		    		numberScoresMissing++;
		    		missingIndices.add(bufIndex.get(i));
				    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
					missing_group_row_index = bufGroup_row_index.get(i);
		    	}
		    	else if (j == 1) {
					try {
						SCAT3UpperLimbCoordinatScore1 = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						numberScoresNotInteger++;
					    notIntegerIndices.add(bufIndex.get(i));
					    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
						notInteger_group_row_index = bufGroup_row_index.get(i);
						notIntegerData.add(data);
					}
				}
	    	}
	    }
	    
	    if (numberScoresMissing >= 1) {
	    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					missing_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresMissing; i++) {
	    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index), 
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(missingIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index), 
							rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresMissing >= 1)
	    
	    if (numberScoresNotInteger >= 1) {
	    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, 
					notInteger_repeatable_group_id, null);
	    	for (i = 0; i < numberScoresNotInteger; i++) {
	    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
	    			message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							-1, message));	
	    		}
	    		else {
		    		message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, notInteger_group_row_index),
									rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
									rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(notIntegerIndices.get(i)));
	
					message =
							message
									+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
											notIntegerData.get(i));
					table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
							rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
	    		}
	    	}
	    } // if (numberScoresNotInteger >= 1)
    } // else haveCoordination 
	    	
			if (SCAT3UpperLimbCoordinatScoreIndex >= 0) {
				data = bufDataVector.get(SCAT3UpperLimbCoordinatScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(SCAT3UpperLimbCoordinatScoreIndex);
				group_row_index = bufGroup_row_index.get(SCAT3UpperLimbCoordinatScoreIndex);
				index = bufIndex.get(SCAT3UpperLimbCoordinatScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							     -1, message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message)); 
					}
				}
				else {
					try {
				        SCAT3UpperLimbCoordinatScore2 = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
    								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
    										guid,
    										getRawDataRow(subject_row_id, group_row_index),
    										rgTable.getRepeatableGroupName(),
    										rgTable.getColumnName(index));

    						message =
    								message
    										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
    												data);
    						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
    								-1, message)); 	
						}
						else {
    						message =
    								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
    										guid,
    										getRawDataRow(subject_row_id, group_row_index),
    										rgTable.getDataFilePositionMapping(index),
    										rgTable.getRepeatableGroupName(),
    										rgTable.getColumnName(index));

    						message =
    								message
    										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
    												data);
    						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
    								rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
	    } // if (SCAT3UpperLimbCoordinatScoreIndex >= 0)
	    
	    
	    int SACImmdMemoryTrialScore= -1;
			if (SACImmdMemoryTrialScoreIndex >= 0) {
				data = bufDataVector.get(SACImmdMemoryTrialScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(SACImmdMemoryTrialScoreIndex);
				group_row_index = bufGroup_row_index.get(SACImmdMemoryTrialScoreIndex);
				index = bufIndex.get(SACImmdMemoryTrialScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message)); 	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message)); 
					}
				}
				else {
					try {
				        SACImmdMemoryTrialScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message)); 
						}
					}
				}
	    }
	}
	
	private void validateSF12(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	SF12
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 4
		// rgEntries.size() = 0
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = SF-12
		// rgTable.getSize() = 12
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 12
		// group_column_index = 0 group_column_name = sf36genhlthscore data = 3
		// group_column_index = 1 group_column_name = sf36hlthlmtmodactscore data = 2
		// group_column_index = 2 group_column_name = sf36hlthlmtclmbsvrlstairscore data = 3
		// group_column_index = 3 group_column_name = sf12lesaccompphyhlthscale data = 4
		// group_column_index = 4 group_column_name = sf12lmtwrkactphyhlthscale data = 3
		// group_column_index = 5 group_column_name = sf12lesaccompemotprobscale data = 5
		// group_column_index = 6 group_column_name = sf12wknotcarefulemotprobscale data = 5
		// group_column_index = 7 group_column_name = sf36paininterfwrkscore data = 1
		// group_column_index = 8 group_column_name = sf12timescalmpcfulscale data = 2
		// group_column_index = 9 group_column_name = sf12timesenrgyscale data = 2
		// group_column_index = 10 group_column_name = sf12timesdowndepressedscale data = 5
		// group_column_index = 11 group_column_name = sf12interfsocphyemotscale data = 3
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBIZH491VR0
		// group_column_index = 1 group_column_name = subjectidnum data = 02-1094
		// group_column_index = 2 group_column_name = ageyrs data = 26
		// group_column_index = 3 group_column_name = vitstatus data = null
		// group_column_index = 4 group_column_name = visitdate data = 2015-12-15T00:00:00Z
		// group_column_index = 5 group_column_name = sitename data = 2
		// group_column_index = 6 group_column_name = dayssincebaseline data = 186
		// group_column_index = 7 group_column_name = casecontrlind data = null
		// group_column_index = 8 group_column_name = generalnotestxt data = null

		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveSF12 = true;
	    RepeatableGroupTable SF12Table = null;
	    int physicalIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	physicalIndex[i] = -1;
	    }
	    int mentalIndex[] = new int[6];
	    for (i = 0; i < 6; i++) {
	    	mentalIndex[i] = -1;
	    }
	    
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("SF-12")) {
					haveSF12 = false;
					SF12Table = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		        // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		        // for (i = 0; i < columnNameVector.size(); i++) {
		       //    System.out.println("group_column_index = " + i +
		       //    " group_column_name = " + columnNameVector.get(i) +
		       //    " data = " + dataVector.get(i)) ;	
		     //    }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("SF-12")) {
				if (columnNameVector.get(i).equalsIgnoreCase("sf36genhlthscore")) {
					physicalIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlmtmodactscore")) {
					physicalIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlmtclmbsvrlstairscore")) {
					physicalIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf12lesaccompphyhlthscale")) {
					physicalIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf12lmtwrkactphyhlthscale")) {
					physicalIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36paininterfwrkscore")) {
					physicalIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf12lesaccompemotprobscale")) {
					mentalIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf12wknotcarefulemotprobscale")) {
					mentalIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf12timescalmpcfulscale")) {
					mentalIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf12timesenrgyscale")) {
					mentalIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf12timesdowndepressedscale")) {
					mentalIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf12interfsocphyemotscale")) {
					mentalIndex[5] = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));		
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveSF12) {
			for (i = 0; i <= 4; i++) {
				if (SF12Table.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									SF12Table.getRepeatableGroupName(),
									SF12Table.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
									" in tbe Physical Functioning (PF) domain";
					table.addOutput(new ValidationOutput(SF12Table, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									SF12Table.getDataFilePositionMapping(i),
									SF12Table.getRepeatableGroupName(),
									SF12Table.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
									" in tbe Physical Functioning (PF) domain";
					table.addOutput(new ValidationOutput(SF12Table, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							SF12Table.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 4; i++)			
			for (i = 5; i <= 6; i++) {
				if (numberWarnings < 1000) {
					if (SF12Table.getDataFilePositionMapping(i) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										SF12Table.getRepeatableGroupName(),
										SF12Table.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
										" in tbe Mental Health (MH) domain";
		
						table.addOutput(new ValidationOutput(SF12Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										SF12Table.getDataFilePositionMapping(i),
										SF12Table.getRepeatableGroupName(),
										SF12Table.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
										" in tbe Mental Health (MH) domain";
		
						table.addOutput(new ValidationOutput(SF12Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								SF12Table.getDataFilePositionMapping(i), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			} // for (i = 5; i <= 6; i++)
			if (SF12Table.getDataFilePositionMapping(7) == null) {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								SF12Table.getRepeatableGroupName(),
								SF12Table.getColumnName(7));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
								" in tbe Physical Functioning (PF) domain";
				table.addOutput(new ValidationOutput(SF12Table, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						-1, message));	
			}
			else {
				message =
						String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
								guid,
								getRawDataRow(subject_row_id, 0),
								SF12Table.getDataFilePositionMapping(7),
								SF12Table.getRepeatableGroupName(),
								SF12Table.getColumnName(7));
	
				message =
						message
								+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
								" in tbe Physical Functioning (PF) domain";
				table.addOutput(new ValidationOutput(SF12Table, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
						SF12Table.getDataFilePositionMapping(7), message));
			}
			for (i = 8; i <= 11; i++) {
				if (numberWarnings < 1000) {
					if (SF12Table.getDataFilePositionMapping(i) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										SF12Table.getRepeatableGroupName(),
										SF12Table.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
										" in tbe Mental Health (MH) domain";
						table.addOutput(new ValidationOutput(SF12Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										SF12Table.getDataFilePositionMapping(i),
										SF12Table.getRepeatableGroupName(),
										SF12Table.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
										" in tbe Mental Health (MH) domain";
						table.addOutput(new ValidationOutput(SF12Table, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
								SF12Table.getDataFilePositionMapping(i), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)

			} // for (i = 8; i <= 11; i++)
			
	    } // if (!haveSF12)
		else { // haveSF12
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
			for (j = 0; j < physicalIndex.length; j++) { 
		    	i = physicalIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
										" in tbe Physical Functioning (PF) domain";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));		
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
										" in tbe Physical Functioning (PF) domain";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) +
										" in tbe Physical Functioning (PF) domain";;
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) +
										" in tbe Physical Functioning (PF) domain";;
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    numberScoresMissing = 0;
		    numberScoresNotInteger = 0;
		    missingIndices.clear();
		    notIntegerIndices.clear();
		    notIntegerData.clear();
			for (j = 0; j < mentalIndex.length; j++) { 
		    	i = mentalIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if ((numberScoresMissing + numberScoresNotInteger) == 6) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
											" in the Mental Helath (MH) domain";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getDataFilePositionMapping(missingIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND) +
											" in the Mental Helath (MH) domain";
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if ((numberScoresMissing + numberScoresNotInteger) == 6)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) +
										" in the Mental Health (MH) domain";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i)) +
										" in the Mental Health (MH) domain";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		} // else haveSF12	
	}
	
	private void validateSF36v2(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	SF36v2
		// table.getColumnCount = 10
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = guid data = TBIDE982KEA
		// group_column_index = 1 group_column_name = subjectidnum data = 49
		// group_column_index = 2 group_column_name = ageyrs data = null
		// group_column_index = 3 group_column_name = vitstatus data = Alive
		// group_column_index = 4 group_column_name = visitdate data = 2013-04-03T00:00:00Z
		// group_column_index = 5 group_column_name = sitename data = University of Washington
		// group_column_index = 6 group_column_name = dayssincebaseline data = 30
		// group_column_index = 7 group_column_name = casecontrlind data = Control
		// group_column_index = 8 group_column_name = generalnotestxt data = age not submitted
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = z scores
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = sf36v2emotlwellbeingzscore data = -1.970419643
		// group_column_index = 1 group_column_name = sf36v2enrgyfatiguezscore data = -1.351905643
		// group_column_index = 2 group_column_name = sf36v2genhlthzscore data = -1.947053633
		// group_column_index = 3 group_column_name = sf36v2painzscore data = -1.281589148
		// group_column_index = 4 group_column_name = sf36v2physfunctzscore data = -2.242995131
		// group_column_index = 5 group_column_name = sf36v2rolelimitemotlzscore data = -3.29934645
		// group_column_index = 6 group_column_name = sf36v2rolelimitphyszscore data = -2.498391083
		// group_column_index = 7 group_column_name = sf36v2socialfunctzscore data = -2.042064277
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Response Consistency Index
		// rgTable.getSize() = 1
		// rgEntries.size() = 0
		// repeatable_group_id = 3
		// rgTable.getRepeatableGroupName() = Licence info
		// rgTable.getSize() = 1
		// rgEntries.size() = 0
		// repeatable_group_id = 4
		// rgTable.getRepeatableGroupName() = Total Raw Scores
		// rgTable.getSize() = 8
		// rgEntries.size() = 0
		// repeatable_group_id = 5
		// rgTable.getRepeatableGroupName() = T scores
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = sf36v2emotlwellbeingtscore data = 30.29580357
		// group_column_index = 1 group_column_name = sf36v2enrgyfatiguetscore data = 36.48094357
		// group_column_index = 2 group_column_name = sf36v2genhlthtscore data = 30.52946367
		// group_column_index = 3 group_column_name = sf36v2paintscore data = 37.18410852
		// group_column_index = 4 group_column_name = sf36v2physfuncttscore data = 27.57004869
		// group_column_index = 5 group_column_name = sf36v2rolelimitemotltscore data = 17.0065355
		// group_column_index = 6 group_column_name = sf36v2rolelimitphystscore data = 25.01608917
		// group_column_index = 7 group_column_name = sf36v2socialfuncttscore data = 29.57935723
		// repeatable_group_id = 6
		// rgTable.getRepeatableGroupName() = Form Administration
		// rgTable.getSize() = 6
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 6
		// group_column_index = 0 group_column_name = langcrfadministratisocode data = eng
		// group_column_index = 1 group_column_name = langcrfadministratisocodeoth data = null
		// group_column_index = 2 group_column_name = contexttype data = At time of assessment
		// group_column_index = 3 group_column_name = contexttypeoth data = null
		// group_column_index = 4 group_column_name = datasource data = Participant/subject
		// group_column_index = 5 group_column_name = datasourceoth data = null
		// repeatable_group_id = 7
		// rgTable.getRepeatableGroupName() = Aggregated scores
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = sf36v2pfcaggregatedscore data = -1.676301533
		// group_column_index = 1 group_column_name = sf36v2mcsaggregatedscore data = -2.27718681
		// group_column_index = 2 group_column_name = sf36v2pfctscore data = null
		// group_column_index = 3 group_column_name = sf36v2mcstscore data = null
		// repeatable_group_id = 8
		// rgTable.getRepeatableGroupName() = Questionnaire
		// rgTable.getSize() = 36
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 36
		// group_column_index = 0 group_column_name = sf36genhlthscore data = 5
		// group_column_index = 1 group_column_name = sf36nowhlthscore data = 4
		// group_column_index = 2 group_column_name = sf36hlthlmtvigoractscore data = 1
		// group_column_index = 3 group_column_name = sf36hlthlmtmodactscore data = 2
		// group_column_index = 4 group_column_name = sf36hlthlmtcrrygrocryscore data = 2
		// group_column_index = 5 group_column_name = sf36hlthlmtclmbsvrlstairscore data = 1
		// group_column_index = 6 group_column_name = sf36hlthlmtclmb1stairscore data = 2
		// group_column_index = 7 group_column_name = sf36hlthlmtbndknlstpscore data = 1
		// group_column_index = 8 group_column_name = sf36hlthlmtwlksvrlmilscore data = 1
		// group_column_index = 9 group_column_name = sf36hlthlmtwlksvrlblckscore data = 2
		// group_column_index = 10 group_column_name = sf36hlthlmtwlk1blckscore data = 2
		// group_column_index = 11 group_column_name = sf36hlthlimtbthdrssscore data = 2
		// group_column_index = 12 group_column_name = sf36v2cuttimewrkactphyhlthscl data = 2
		// group_column_index = 13 group_column_name = sf36v2lesaccompphyhlthscl data = 3
		// group_column_index = 14 group_column_name = sf36v2lmtwrkactphyhlthscl data = 1
		// group_column_index = 15 group_column_name = sf36v2diffcltwrkactphyhlthscl data = 1
		// group_column_index = 16 group_column_name = sf36v2cuttmewrkactemotprobscl data = 2
		// group_column_index = 17 group_column_name = sf36v2lesaccompemotprobscl data = 2
		// group_column_index = 18 group_column_name = sf36v2wknotcarefulemotprobscl data = 1
		// group_column_index = 19 group_column_name = sf36interfsocphyemotscore data = 4
		// group_column_index = 20 group_column_name = sf36bodypainscore data = 4
		// group_column_index = 21 group_column_name = sf36paininterfwrkscore data = 3
		// group_column_index = 22 group_column_name = sf36v2timespepscl data = 4
		// group_column_index = 23 group_column_name = sf36v2timesnervsscl data = 3
		// group_column_index = 24 group_column_name = sf36v2timesdownscl data = 3
		// group_column_index = 25 group_column_name = sf36v2timescalmpcfulscl data = 4
		// group_column_index = 26 group_column_name = sf36v2timesenrgyscl data = 4
		// group_column_index = 27 group_column_name = sf36v2timesdownbluescl data = 2
		// group_column_index = 28 group_column_name = sf36v2timeswornoutscl data = 2
		// group_column_index = 29 group_column_name = sf36v2timeshppyscl data = 3
		// group_column_index = 30 group_column_name = sf36v2timestiredscl data = 3
		// group_column_index = 31 group_column_name = sf36v2timesintersocphyemtscl data = 3
		// group_column_index = 32 group_column_name = sf36sckeasierscore data = 4
		// group_column_index = 33 group_column_name = sf36hlthyasanybodyscore data = 5
		// group_column_index = 34 group_column_name = sf36expworshlthscore data = 3
		// group_column_index = 35 group_column_name = sf36excelhlthscore data = 4
		// repeatable_group_id = 9
		// rgTable.getRepeatableGroupName() = Transformed scaled scores
		// rgTable.getSize() = 9
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 9
		// group_column_index = 0 group_column_name = sf36v2physfuncttotalscore data = 30
		// group_column_index = 1 group_column_name = sf36v2rolelimitphystotalscore data = 18.75
		// group_column_index = 2 group_column_name = sf36v2paintotalscore data = 41
		// group_column_index = 3 group_column_name = sf36v2genhlthtotalscore data = 30
		// group_column_index = 4 group_column_name = sf36v2enrgyfatiguetotalscore data = 31.25
		// group_column_index = 5 group_column_name = sf36v2emotlwellbeingtotalscore data = 40
		// group_column_index = 6 group_column_name = sf36v2socialfuncttotalscore data = 37.5
		// group_column_index = 7 group_column_name = sf36v2rolelimitemotltotalscore data = 16.66666667
		// group_column_index = 8 group_column_name = sf36v2rephealthtranstotalscore data = null
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean haveQues = true;
	    RepeatableGroupTable quesTable = null;
        boolean haveLicence = true;
        RepeatableGroupTable licenceTable = null;
        int physicalIndex[] = new int[10];
        for (i = 0; i < 10; i++) {
        	physicalIndex[i] = -1;
        }
        int generalIndex[] = new int[6];
        for (i = 0; i < 6; i++) {
        	generalIndex[i] = -1;
        }
        int rolePhysicalIndex[] = new int[4];
        for (i = 0; i < 4; i++) {
        	rolePhysicalIndex[i] = -1;
        }
        int roleEmotionalIndex[] = new int[3];
        for (i = 0; i < 3; i++) {
        	roleEmotionalIndex[i] = -1;
        }
        int socialIndex[] = new int[2];
        for (i = 0; i < 2; i++) {
        	socialIndex[i] = -1;
        }
        int painIndex[] = new int[2];
        for (i = 0; i < 2; i++) {
        	painIndex[i] = -1;
        }
        int mentalIndex[] = new int[5];
        for (i = 0; i < 5; i++) {
        	mentalIndex[i] = -1;
        }
        int vitalityIndex[] = new int[4];
        for (i = 0; i < 4; i++) {
        	vitalityIndex[i] = -1;
        }
        int licenceIndex = -1;
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Questionnaire")) {
				    haveQues = false;
				    quesTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Licence info")) {
				    haveLicence = false;
				    licenceTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		        // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		        // for (i = 0; i < columnNameVector.size(); i++) {
		        //    System.out.println("group_column_index = " + i +
		        //    " group_column_name = " + columnNameVector.get(i) +
		        //    " data = " + dataVector.get(i)) ;	
		        // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Questionnaire")) {
				if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlmtvigoractscore")) {
					physicalIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlmtmodactscore")) {
					physicalIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlmtcrrygrocryscore")) {
					physicalIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlmtclmbsvrlstairscore")) {
					physicalIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlmtclmb1stairscore")) {
					physicalIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlmtbndknlstpscore")) {
					physicalIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlmtwlksvrlmilscore")) {
					physicalIndex[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlmtwlksvrlblckscore")) {
					physicalIndex[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlmtwlksvrlblckscore")) {
					physicalIndex[8] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthlimtbthdrssscore")) {
					physicalIndex[9] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36genhlthscore")) {
					generalIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36nowhlthscore")) {
					generalIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36sckeasierscore")) {
					generalIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36hlthyasanybodyscore")) {
					generalIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36expworshlthscore")) {
					generalIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36excelhlthscore")) {
					generalIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2cuttimewrkactphyhlthscl")) {
					rolePhysicalIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2lesaccompphyhlthscl")) {
					rolePhysicalIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2lmtwrkactphyhlthscl")) {
					rolePhysicalIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2diffcltwrkactphyhlthscl")) {
					rolePhysicalIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2cuttmewrkactemotprobscl")) {
					roleEmotionalIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2lesaccompemotprobscl")) {
					roleEmotionalIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2wknotcarefulemotprobscl")) {
					roleEmotionalIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36interfsocphyemotscore")) {
					socialIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2timesintersocphyemtscl")) {
					socialIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36bodypainscore")) {
					painIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36paininterfwrkscore")) {
					painIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2timesnervsscl")) {
					mentalIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2timesdownscl")) {
					mentalIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2timescalmpcfulscl")) {
					mentalIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2timesdownbluescl")) {
					mentalIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2timeshppyscl")) {
					mentalIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2timespepscl")) {
					vitalityIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2timesenrgyscl")) {
					vitalityIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2timeswornoutscl")) {
					vitalityIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("sf36v2timestiredscl")) {
					vitalityIndex[3] = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Licence info")) {
				if (columnNameVector.get(i).equalsIgnoreCase("sf36v2licencetxt")) {	
					licenceIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));    	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveQues) {
			for (i = 0; i <= 35; i++) {
				if (quesTable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									quesTable.getRepeatableGroupName(),
									quesTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(quesTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							-1, message));   	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									quesTable.getDataFilePositionMapping(i),
									quesTable.getRepeatableGroupName(),
									quesTable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(quesTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
							quesTable.getDataFilePositionMapping(i), message));
				}
			} // for (i = 0; i <= 35; i++)			
	    } // if (!haveQues)
		else { // haveQues
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
			for (j = 0; j < physicalIndex.length; j++) { 
		    	i = physicalIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
							     -1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
			notIntegerIndices.clear();
			notIntegerData.clear();
			
			for (j = 0; j < generalIndex.length; j++) { 
		    	i = generalIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if ((numberScoresMissing + numberScoresNotInteger) == 6) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the General Health scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the General Health scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if ((numberScoresMissing + numberScoresNotInteger) == 6)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the General Health scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the General Health scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
			notIntegerIndices.clear();
			notIntegerData.clear();
			
			for (j = 0; j < rolePhysicalIndex.length; j++) { 
		    	i = rolePhysicalIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if ((numberScoresMissing + numberScoresNotInteger) == 4) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the Role-Physical (RP) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the Role-Physical (RP) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if ((numberScoresMissing + numberScoresNotInteger) == 4)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the Role-Physical (RP) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the Role-Physical (RP) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
			notIntegerIndices.clear();
			notIntegerData.clear();
			
			for (j = 0; j < roleEmotionalIndex.length; j++) { 
		    	i = roleEmotionalIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if ((numberScoresMissing + numberScoresNotInteger) == 3) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the Role-Emotional (RE) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the Role-Emotional (RE) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if ((numberScoresMissing + numberScoresNotInteger) == 3)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the Role-Emotional (RE) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the Role-Emotional (RE) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
			notIntegerIndices.clear();
			notIntegerData.clear();
			
			for (j = 0; j < socialIndex.length; j++) { 
		    	i = socialIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if ((numberScoresMissing + numberScoresNotInteger) == 2) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the Social Functioning (SF) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the Social Functioning (SF) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if ((numberScoresMissing + numberScoresNotInteger) == 2)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the Social Functioning (SF) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the Social Functioning (SF) scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
			notIntegerIndices.clear();
			notIntegerData.clear();
			
			for (j = 0; j < painIndex.length; j++) { 
		    	i = painIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if ((numberScoresMissing + numberScoresNotInteger) == 2) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the Pain scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the Pain scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if ((numberScoresMissing + numberScoresNotInteger) == 2)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the Pain scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the Pain scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
			notIntegerIndices.clear();
			notIntegerData.clear();
			
			for (j = 0; j < mentalIndex.length; j++) { 
		    	i = mentalIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if ((numberScoresMissing + numberScoresNotInteger) == 5) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in Mental Health";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in Mental Health";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if ((numberScoresMissing + numberScoresNotInteger) == 5)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in Mental Health";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in Mental Health";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    numberScoresMissing = 0;
			numberScoresNotInteger = 0;
			missingIndices.clear();
			notIntegerIndices.clear();
			notIntegerData.clear();
			
			for (j = 0; j < vitalityIndex.length; j++) { 
		    	i = vitalityIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if ((numberScoresMissing + numberScoresNotInteger) == 4) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
							  			guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the Vitality (VT) Scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
							  			guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND)
										+ " in the Vitality (VT) Scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if ((numberScoresMissing + numberScoresNotInteger) == 4)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the Vitality (VT) Scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i))
										+ " in the Vitality (VT) Scale";
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		} // else haveQues	
		
		if (!haveLicence) {
			if (numberWarnings < 1000) {
				if (licenceTable.getDataFilePositionMapping(0) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									licenceTable.getRepeatableGroupName(),
									licenceTable.getColumnName(0));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(licenceTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							-1, message));	
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									licenceTable.getDataFilePositionMapping(0),
									licenceTable.getRepeatableGroupName(),
									licenceTable.getColumnName(0));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(licenceTable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							licenceTable.getDataFilePositionMapping(0), message));
				}
				numberWarnings++;
			} // if (numberWarnings < 1000)			
	    } // if (!haveLicence)
		else { // haveLicence
			if (licenceIndex > -1) {
				String licenceData = bufDataVector.get(licenceIndex);
				repeatable_group_id = bufRepeatable_group_id.get(licenceIndex);
				group_row_index = bufGroup_row_index.get(licenceIndex);
				index = bufIndex.get(licenceIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((licenceData == null) || (licenceData.isEmpty()) || (licenceData.trim() == null) ||
						(licenceData.trim().isEmpty())) {
					if (numberWarnings < 1000) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
		
							message =
									message
											+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
						}
					numberWarnings++;
					} // if (numberWarnings < 1000)
				}
			}
		} // else haveLicence
	}
	
	
	private void validateMoCA(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	MoCA
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Required Fields
		// rgTable.getSize() = 7
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 7
		// group_column_index = 0 group_column_name = sitename data = SiteName1
		// group_column_index = 1 group_column_name = visittyppdbp data = 24 months
		// group_column_index = 2 group_column_name = visitdate data = 3-Aug-20
		// group_column_index = 3 group_column_name = guid data = TBI_INVABC12XYZ
		// group_column_index = 4 group_column_name = ageyrs data = null
		// group_column_index = 5 group_column_name = ageremaindrmonths data = 6
		// group_column_index = 6 group_column_name = ageval data = #VALUE!
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 0
		// rgEntries.size() = 0
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = MoCA
		// rgTable.getSize() = 15
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 15
		// group_column_index = 0 group_column_name = moca_visuospatialexec data = 1
		// group_column_index = 1 group_column_name = moca_naming data = 2
		// group_column_index = 2 group_column_name = moca_digits data = 0
		// group_column_index = 3 group_column_name = moca_letters data = 0
		// group_column_index = 4 group_column_name = moca_serial7 data = 0
		// group_column_index = 5 group_column_name = moca_langrepeat data = 1
		// group_column_index = 6 group_column_name = moca_langfluency data = 0
		// group_column_index = 7 group_column_name = moca_abstraction data = 1
		// group_column_index = 8 group_column_name = moca_delydrecall data = 0
		// group_column_index = 9 group_column_name = moca_delydrecalloptnlcatcue data = null
		// group_column_index = 10 group_column_name = moca_delydrecaloptnlmultchoice data = null
		// group_column_index = 11 group_column_name = moca_orient data = 0
		// group_column_index = 12 group_column_name = moca_imageresponse data = null
		// group_column_index = 13 group_column_name = moca_eduind data = 1
		// group_column_index = 14 group_column_name = moca_total data = 6
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;	    
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveRequired = true;
	    RepeatableGroupTable requiredTable = null;
	    boolean haveMoCA = true;
	    RepeatableGroupTable MoCATable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    int MoCAIndex[] = new int[11];
	    for (i = 0; i < 11; i++) {
	    	MoCAIndex[i] = -1;
	    }
        int totalScoreIndex = -1;
        int neededIndex[] = new int[] {0,1,2,3,4,5,6,7,8,11,13};
	     // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		 // System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			 // System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			 // System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("RequiredFields")) {
					haveRequired = false;
					requiredTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("MoCA")) {
				    haveMoCA = false;
				    MoCATable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			 // System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	 // System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
				dataVector = dataVector2.get(group_row_index);
		      // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		      // for (i = 0; i < columnNameVector.size(); i++) {
		       // System.out.println("group_column_index = " + i +
		       // " group_column_name = " + columnNameVector.get(i) +
		       // " data = " + dataVector.get(i)) ;	
		     // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Required Fields")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("MoCA")) {
				if (columnNameVector.get(i).equalsIgnoreCase("moca_visuospatialexec")) {	
					MoCAIndex[0] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("moca_naming")) {	
					MoCAIndex[1] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("moca_digits")) {	
					MoCAIndex[2] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("moca_letters")) {	
					MoCAIndex[3] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("moca_serial7")) {	
					MoCAIndex[4] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("moca_langrepeat")) {	
					MoCAIndex[5] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("moca_langfluency")) {	
					MoCAIndex[6] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("moca_abstraction")) {	
					MoCAIndex[7] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("moca_delydrecall")) {	
					MoCAIndex[8] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("moca_orient")) {	
					MoCAIndex[9] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("moca_eduind")) {	
					MoCAIndex[10] = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("moca_total")) {	
					totalScoreIndex = bufSizeIndex;
				}
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if (age < 18) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "18 or more years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int calculatedTotalScore = 0;
		int actualTotalScore = -1;
		int numberScoresMissing = 0;
		int numberScoresNotInteger = 0;
		if (!haveMoCA) {
			for (j = 0; j < neededIndex.length; j++) {
				if (numberWarnings < 1000) {
				i = neededIndex[j];
				if (MoCATable.getDataFilePositionMapping(i) == null) {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									MoCATable.getRepeatableGroupName(),
									MoCATable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(MoCATable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							-1, message));
				}
				else {
					message =
							String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
									guid,
									getRawDataRow(subject_row_id, 0),
									MoCATable.getDataFilePositionMapping(i),
									MoCATable.getRepeatableGroupName(),
									MoCATable.getColumnName(i));
		
					message =
							message
									+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
					table.addOutput(new ValidationOutput(MoCATable, OutputType.WARNING, getRawDataRow(subject_row_id, 0), 
							MoCATable.getDataFilePositionMapping(i), message));
				}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			} // for (j = 0; j < neededIndex.length; j++)			
	    } // if (!haveMoCA)
		else { // haveMoCA
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notIntegerIndices = new Vector<Integer>();
		    int notInteger_repeatable_group_id = -1;
		    int notInteger_group_row_index = -1;
		    Vector<String>notIntegerData = new Vector<String>();
		    int value;
			for (j = 0; j < MoCAIndex.length; j++) { 
		    	i = MoCAIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       calculatedTotalScore += Integer.valueOf(data).intValue();
						}
						catch (NumberFormatException e) {
							numberScoresNotInteger++;
						    notIntegerIndices.add(bufIndex.get(i));
						    notInteger_repeatable_group_id = bufRepeatable_group_id.get(i);
							notInteger_group_row_index = bufGroup_row_index.get(i);
							notIntegerData.add(data);
						}
					}
		        }
		    }
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (numberWarnings < 1000) {
		    			if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    				message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									-1, message));	
		    			}
		    			else {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, missing_group_row_index),
											rgTable.getDataFilePositionMapping(missingIndices.get(i)),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(missingIndices.get(i)));
		
							message =
									message
											+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, missing_group_row_index),
									rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    			}
					numberWarnings++;
		    		} // if (numberWarnings < 1000)
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotInteger >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notInteger_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notInteger_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotInteger; i++) {
		    		if (rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notInteger_group_row_index),
										rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notIntegerIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
												notIntegerData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notInteger_group_row_index),
								rgTable.getDataFilePositionMapping(notIntegerIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		    if (totalScoreIndex >= 0) {
				data = bufDataVector.get(totalScoreIndex);
				repeatable_group_id = bufRepeatable_group_id.get(totalScoreIndex);
				group_row_index = bufGroup_row_index.get(totalScoreIndex);
				index = bufIndex.get(totalScoreIndex);
				rgTable = table.getRepeatableGroupTable(repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
				if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
						(data.trim().isEmpty())) {
					if ((numberScoresMissing == 0) && (numberScoresNotInteger == 0)) {
				    if (numberWarnings < 1000) {
				    	if (rgTable.getDataFilePositionMapping(index) == null) {
				    		message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									-1, message));	
				    	}
				    	else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
													"blank",String.valueOf(calculatedTotalScore));
							table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index), message));
				    	}
						numberWarnings++;
				    } // if (numberWarnings < 1000)
				    }
				}
			    else if ((numberScoresMissing >= 1) || (numberScoresNotInteger >= 1)) {
			    	if (rgTable.getDataFilePositionMapping(index) == null) {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
							     -1, message));	
			    	}
			    	else {
				    	message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_REQUIRED,
												data);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
			    	}
			    }
				else {
					try {
				        actualTotalScore = Integer.valueOf(data).intValue();
					}
					catch (NumberFormatException e) {
						if (rgTable.getDataFilePositionMapping(index) == null) {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									-1, message));  	
						}
						else {
							message =
									String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
											guid,
											getRawDataRow(subject_row_id, group_row_index),
											rgTable.getDataFilePositionMapping(index),
											rgTable.getRepeatableGroupName(),
											rgTable.getColumnName(index));
	
							message =
									message
											+ String.format(ApplicationsConstants.ERR_NOT_INTEGER,
													data);
							table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
									rgTable.getDataFilePositionMapping(index),message));  
						}
					}
				}
			}
		    
		    if (actualTotalScore > -1) {
		    	if (actualTotalScore != calculatedTotalScore) {
		    		if (rgTable.getDataFilePositionMapping(index) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_INCORRECT_SUM,
												String.valueOf(actualTotalScore), String.valueOf(calculatedTotalScore));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
		    		}
		    	}
		    }	
		} // else haveMoCA
		
	}
	
	
	private void validateTMT(StructuralFormStructure structure,
			Vector<Vector<Vector<String>>> columnNameVector3, 
			Vector<Vector<Vector<String>>>dataVector3, int subject_row_id,
			DataStructureTable table) throws Exception {
		// Structure Name:	TMT_Standard
		// table.getColumnCount = 3
		// repeatable_group_id = 0
		// rgTable.getRepeatableGroupName() = Image
		// rgTable.getSize() = 1
		// rgEntries.size() = 0
		// repeatable_group_id = 1
		// rgTable.getRepeatableGroupName() = Main
		// rgTable.getSize() = 8
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 8
		// group_column_index = 0 group_column_name = guid data = TBI_INVCE754KHJ
		// group_column_index = 1 group_column_name = subjectidnum data = MH13
		// group_column_index = 2 group_column_name = ageyrs data = 53
		// group_column_index = 3 group_column_name = visitdate data = 2016-03-29T00:00:00Z
		// group_column_index = 4 group_column_name = sitename data = null
		// group_column_index = 5 group_column_name = dayssincebaseline data = 0
		// group_column_index = 6 group_column_name = casecontrlind data = Control
		// group_column_index = 7 group_column_name = generalnotestxt data = Healthy Control
		// repeatable_group_id = 2
		// rgTable.getRepeatableGroupName() = Scoring
		// rgTable.getSize() = 4
		// rgEntries.size() = 1
		// group_row_index = 0
		// columnNameVector.size() = 4
		// group_column_index = 0 group_column_name = tmtpartatime data = 16
		// group_column_index = 1 group_column_name = tmtpartaerrors data = 0
		// group_column_index = 2 group_column_name = tmtpartbtime data = 56
		// group_column_index = 3 group_column_name = tmtpartberrors data = 1
		
		Vector<Vector<String>> columnNameVector2;
	    Vector<Vector<String>> dataVector2;
	    Vector<String> columnNameVector;
	    Vector<String> dataVector;
	    int i, j;
	    String message;
	    Vector<String> bufColumnNameVector = new Vector<String>();
	    Vector<String> bufDataVector = new Vector<String>();
	    Vector<Integer> bufRepeatable_group_id = new Vector<Integer>();
	    Vector<Integer> bufGroup_row_index = new Vector<Integer>();
	    Vector<Integer> bufIndex = new Vector<Integer>();
	    Vector<String> bufRepeatableGroupName = new Vector<String>();
	    String repeatableGroupName;
	    String guid = null;
	    int group_row_index = -1;
	    int repeatable_group_id;
	    RepeatableGroupTable rgTable = null;
	    ArrayList<Integer> rgEntries = null;
	    int index = -1;
	    String data;
	    boolean haveMain = true;
	    RepeatableGroupTable mainTable = null;
	    int bufSizeIndex = -1;
	    int guidIndex =-1;
	    int ageyrsIndex = -1;
	    boolean  haveScoring = true;
	    RepeatableGroupTable scoringTable = null;
	    int scoringIndex[] = new int[2];
	    for (i = 0; i < scoringIndex.length; i++) {
	    	scoringIndex[i] = -1;
	    }
	    double TMTPartATime;
	    double TMTPartBTime;
	    int neededIndex[] = new int[] {0,2};
	    
	    // System.out.println("table.getColumnCount = " + table.getColumnCount());
    	for (repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++) {
    		 
    		// System.out.println("repeatable_group_id = " + repeatable_group_id);
    		columnNameVector2 = columnNameVector3.get(repeatable_group_id);
    		dataVector2 = dataVector3.get(repeatable_group_id);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			// System.out.println("rgTable.getRepeatableGroupName() = " + rgTable.getRepeatableGroupName());
			// System.out.println("rgTable.getSize() = " + rgTable.getSize());
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if (rgEntries.size() == 0) {
				repeatableGroupName = rgTable.getRepeatableGroupName();
				if (repeatableGroupName.equalsIgnoreCase("Main")) {
					haveMain = false;
					mainTable = rgTable;
				}
				else if (repeatableGroupName.equalsIgnoreCase("Scoring")) {
				    haveScoring = false;
				    scoringTable = rgTable;
				}
			} // if (rgEntries.size() == 0)
			// System.out.println("rgEntries.size() = " + rgEntries.size());
			for (group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++) {
		    	// System.out.println("group_row_index = " + group_row_index);
				columnNameVector = columnNameVector2.get(group_row_index);
			  	dataVector = dataVector2.get(group_row_index);
		        // System.out.println("columnNameVector.size() = " + columnNameVector.size());
		        // for (i = 0; i < columnNameVector.size(); i++) {
		        //    System.out.println("group_column_index = " + i +
		        //    " group_column_name = " + columnNameVector.get(i) +
		        //    " data = " + dataVector.get(i)) ;	
		        // }
		for (i = 0; i < columnNameVector.size(); i++) {
			bufSizeIndex = bufColumnNameVector.size();
			bufColumnNameVector.add(columnNameVector.get(i));
			bufDataVector.add(dataVector.get(i));
			bufRepeatable_group_id.add(repeatable_group_id);
			bufGroup_row_index.add(group_row_index);
			bufIndex.add(i);
			bufRepeatableGroupName.add(rgTable.getRepeatableGroupName());
			repeatableGroupName = rgTable.getRepeatableGroupName();
			if (repeatableGroupName.equalsIgnoreCase("Main")) {
				if (columnNameVector.get(i).equalsIgnoreCase("guid")) {
					guidIndex = bufSizeIndex;
				}
				else if (columnNameVector.get(i).equalsIgnoreCase("ageyrs")) {
					ageyrsIndex = bufSizeIndex;
				}
			}
			else if (repeatableGroupName.equalsIgnoreCase("Scoring")) {
			    if (columnNameVector.get(i).equalsIgnoreCase("tmtpartatime")) {
			    	scoringIndex[0] = bufSizeIndex;
			    }
			    else if (columnNameVector.get(i).equalsIgnoreCase("tmtpartbtime")) {
			    	scoringIndex[1] = bufSizeIndex;
			    }
			}
	    }
		} // for (int group_row_index = 0; group_row_index < rgEntries.size(); group_row_index++)
        } // for (int repeatable_group_id = 0; repeatable_group_id < table.getColumnCount(); repeatable_group_id++)
    	if (guidIndex > -1) {
			guid = bufDataVector.get(guidIndex);
    	}
    
    
		if (ageyrsIndex > -1) {
			String ageData = bufDataVector.get(ageyrsIndex);
			repeatable_group_id = bufRepeatable_group_id.get(ageyrsIndex);
			group_row_index = bufGroup_row_index.get(ageyrsIndex);
			index = bufIndex.get(ageyrsIndex);
			rgTable = table.getRepeatableGroupTable(repeatable_group_id);
			rgEntries = table.getAllReferences(subject_row_id, repeatable_group_id, null);
			if ((ageData == null) || (ageData.isEmpty()) || (ageData.trim() == null) ||
					(ageData.trim().isEmpty())) {
				if (numberWarnings < 1000) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
		
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.WARNING, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				numberWarnings++;
				} // if (numberWarnings < 1000)
			}	
			else {
				double age = Double.valueOf(ageData).doubleValue();
				if ((age < 15) || (age > 89)) {
					if (rgTable.getDataFilePositionMapping(index) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "15 to 89 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, group_row_index),
										rgTable.getDataFilePositionMapping(index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(index));
	
						message =
								message
										+ String.format(ApplicationsConstants.WARNING_INCORRECT_AGE,
										  ageData, "15 to 89 years");
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, group_row_index),
								rgTable.getDataFilePositionMapping(index), message));
					}
				}
			}
		  } // if (ageyrsIndex > -1)
		
		int numberScoresMissing = 0;
		int numberScoresNotDouble = 0;
		if (!haveScoring) {
			for (j = 0; j < neededIndex.length; j++) {
					i = neededIndex[j];
					if (scoringTable.getDataFilePositionMapping(i) == null) {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoringTable.getRepeatableGroupName(),
										scoringTable.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(scoringTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
								-1, message));	
					}
					else {
						message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, 0),
										scoringTable.getDataFilePositionMapping(i),
										scoringTable.getRepeatableGroupName(),
										scoringTable.getColumnName(i));
			
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(scoringTable, OutputType.ERROR, getRawDataRow(subject_row_id, 0), 
								scoringTable.getDataFilePositionMapping(i), message));
					}
			} // for (j = 0; j < neededindex.length; j++)			
	    } // if (!haveScoring)
		else { // haveScoring
		    Vector<Integer>missingIndices = new Vector<Integer>();
		    int missing_repeatable_group_id = -1;
		    int missing_group_row_index = -1;
		    Vector<Integer>notDoubleIndices = new Vector<Integer>();
		    int notDouble_repeatable_group_id = -1;
		    int notDouble_group_row_index = -1;
		    Vector<String>notDoubleData = new Vector<String>();
		    int value;
			for (j = 0; j < scoringIndex.length; j++) { 
		    	i = scoringIndex[j];
		    	if (i >= 0) {
		    		data = bufDataVector.get(i);
			    	if ((data == null) || (data.isEmpty()) || (data.trim() == null) ||
							(data.trim().isEmpty())) {
			    		numberScoresMissing++;
			    		missingIndices.add(bufIndex.get(i));
					    missing_repeatable_group_id = bufRepeatable_group_id.get(i);
						missing_group_row_index = bufGroup_row_index.get(i);
			    	}
			    	else {
						try {
					       Double.valueOf(data).doubleValue();    
						}
						catch (NumberFormatException e) {
							numberScoresNotDouble++;
						    notDoubleIndices.add(bufIndex.get(i));
						    notDouble_repeatable_group_id = bufRepeatable_group_id.get(i);
							notDouble_group_row_index = bufGroup_row_index.get(i);
							notDoubleData.add(data);
						}
					}
		        }
		    }
			
			
		    
		    if (numberScoresMissing >= 1) {
		    	rgTable = table.getRepeatableGroupTable(missing_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						missing_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresMissing; i++) {
		    		if (rgTable.getDataFilePositionMapping(missingIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, missing_group_row_index),
										rgTable.getDataFilePositionMapping(missingIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(missingIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_BLANK_FOUND);
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, missing_group_row_index),
								rgTable.getDataFilePositionMapping(missingIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresMissing >= 1)
		    
		    if (numberScoresNotDouble >= 1) {
		    	rgTable = table.getRepeatableGroupTable(notDouble_repeatable_group_id);
				rgEntries = table.getAllReferences(subject_row_id, 
						notDouble_repeatable_group_id, null);
		    	for (i = 0; i < numberScoresNotDouble; i++) {
		    		if (rgTable.getDataFilePositionMapping(notDoubleIndices.get(i)) == null) {
		    			message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_NAME,
										guid,
										getRawDataRow(subject_row_id, notDouble_group_row_index),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notDoubleIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_NUMBER,
												notDoubleData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notDouble_group_row_index),
								-1, message));	
		    		}
		    		else {
			    		message =
								String.format(ApplicationsConstants.LOC_GUID_ROW_COLUMN_NAME,
										guid,
										getRawDataRow(subject_row_id, notDouble_group_row_index),
										rgTable.getDataFilePositionMapping(notDoubleIndices.get(i)),
										rgTable.getRepeatableGroupName(),
										rgTable.getColumnName(notDoubleIndices.get(i)));
	
						message =
								message
										+ String.format(ApplicationsConstants.ERR_NOT_NUMBER,
												notDoubleData.get(i));
						table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, getRawDataRow(subject_row_id, notDouble_group_row_index),
								rgTable.getDataFilePositionMapping(notDoubleIndices.get(i)), message));
		    		}
		    	}
		    } // if (numberScoresNotInteger >= 1)
		    
		} // else haveScoring
	}
	
	/**
	 * Validates the number of rows in the repeatable group to ensure that it meets the threshold requirements
	 * 
	 * @param subject_row_id (int) - relative row number for subject
	 * @param repeatable_group_id - column-wise position of repeatable group
	 * @param rg (RepeatableGroup) - repeatable group
	 * @param rgEntries (ArrayList) - list of rows in the repeatable group
	 */
	private void validateRepeatableGroupCount(int subject_row_id, int repeatable_group_id, RepeatableGroup rg,
			ArrayList<Integer> rgEntries) {

		// Validate the count of repeatable groups
		// If there are no data elements in this repeatable group, then we do not want to validate the number of
		// instances. Do NOT throw a warning.
		if (!rg.getThreshold().equals(0) && !rg.getSize().equals(0)) {

			if (RepeatableType.MORETHAN.equals(rg.getType())) {
				if (rgEntries.size() < rg.getThreshold()) {
					String message =
							String.format(ApplicationsConstants.LOC_ENTRY, getRawDataRow(subject_row_id, 0))
									+ String.format(ApplicationsConstants.ERR_MANY_RGS, rg.getThreshold(), rg.getName());
					table.addOutput(new ValidationOutput(table, OutputType.ERROR, subject_row_id, repeatable_group_id,
							message));
				}
			} else {
				if (RepeatableType.LESSTHAN.equals(rg.getType())) {
					if (rgEntries.size() > rg.getThreshold()) {
						String message =
								String.format(ApplicationsConstants.LOC_ENTRY, getRawDataRow(subject_row_id, 0))
										+ String.format(ApplicationsConstants.ERR_FEW_RGS, rg.getThreshold(),
												rg.getName());
						table.addOutput(new ValidationOutput(table, OutputType.ERROR, subject_row_id,
								repeatable_group_id, message));
					}
				} else {
					if (rgEntries.size() != rg.getThreshold().intValue()) {
						String message =
								String.format(ApplicationsConstants.LOC_ENTRY, getRawDataRow(subject_row_id, 0))
										+ String.format(ApplicationsConstants.ERR_EXACTLY_RGS, rg.getThreshold(),
												rg.getName());
						table.addOutput(new ValidationOutput(table, OutputType.ERROR, subject_row_id,
								repeatable_group_id, message));
					}
				}
			}
		}
	}

	/**
	 * This method checks accessions by splitting accessions into chunks of predetermined size. This is to prevent GUID
	 * server timeout errors when checking a large amount of accessions at once.
	 * 
	 * @param accessions
	 * @return
	 */
	private List<Accession> checkAccessions(List<Accession> accessions) {
		List<Accession> checkedAccessions = new ArrayList<Accession>();

		int startIndex = 0;
		int endIndex = Math.min(GUID_CHUNK_SIZE, accessions.size());

		while (startIndex < accessions.size()) {
			checkedAccessions.addAll(accClient.doAccessionsExist(accessions.subList(startIndex, endIndex)));
			startIndex += GUID_CHUNK_SIZE;
			endIndex = Math.min(endIndex += GUID_CHUNK_SIZE, accessions.size());
		}

		return checkedAccessions;
	}

	private void validateAccessions(HashMap<MapElement, List<Accession>> accessions, MapElement element, String name,
			String type, String rgName) {
	
	    try {
			logger.debug("Checking accessions");
			List<Accession> accessionsList = checkAccessions(accessions.get(element));
	
			for (int i = 0; i < accessionsList.size(); i++) {
				String accessionValue = accessionsList.get(i).getValue();
				String accessionType = AccessionReturnType.ERROR.name();
				String accessionComment = accessionsList.get(i).getComment();
	
				if (accessionsList.get(i) != null && accessionsList.get(i).getReturnValue() != null) {
					accessionType = accessionsList.get(i).getReturnValue().name();
				}
	
				if (!accessionValue.isEmpty()) {
	
					// TODO: Michael - These errors messages still need to be calculated properly
					if (type.equalsIgnoreCase("GUID")
							&& accessionType.equalsIgnoreCase(AccessionReturnType.PSUEDO_GUID.name())) {
						String message =accessionValue+
								";;;"+
								"Entry is a pseudo-GUID for a subject who has now been assigned the real GUID "
										+ accessionComment + ".; ; ";
						table.addOutput(new ValidationOutput(table, OutputType.WARNING, i, i, message));
						// Translation to the GUID
						// String[] row = table.getRow(i);
						// row[loc] = found;
					} else if (accessionType.contains("ERROR")) {
						String message =accessionValue+
								";;;"+
								"An error occured while validating the GUID entry; ; ";
						table.addOutput(new ValidationOutput(table, OutputType.ERROR, i, i, message));
					} else if (!accessionType.equals("VALID")) {
						String message = accessionValue+
								";;;"+
								"GUID is invalid or doesn't exist, please check the value to ensure it is correct.; ; ";
						table.addOutput(new ValidationOutput(table, OutputType.ERROR, i, i, message));
					}
	
				}
			}
		} catch (WebServiceException e) {
			String message =
					"Element "
							+ name
							+ ", in column "
							+ rgName
							+ " could not be validated due to connectivity problems. Please check your connection and revalidate.";
			table.addOutput(new ValidationOutput(table, OutputType.ERROR, -1, -1, message));
		}
	}

	private void validateInputRestrictions(int i, RepeatableGroupTable rgTable, ArrayList<Integer> rgEntries, int x,
			int y, StructuralDataElement element, String data) {

		String[] dataArr = data.split(";");

		if (InputRestrictions.SINGLE.equals(element.getRestrictions()) && dataArr.length > 1) {
			/*
			 * String message = String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data, getRawDataRow(i, x),
			 * rgTable.getRepeatableGroupName(), rgTable.getDataFilePositionMapping(y), rgTable.getColumnName(y));
			 */



			String message =
					String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data, getRawDataRow(i, x),
							convertColumnNumToChar(rgTable.getDataFilePositionMapping(y)), rgTable.getRepeatableGroupName(),
							rgTable.getColumnName(y));
			// message = message + String.format(ApplicationsConstants.ERR_RESTRICT_ONLY_SINGLE);
			message = message.concat(String.format(ApplicationsConstants.ERR_SINGLE_SELECT_ADDENDUM));

			table.addOutput(new ValidationOutput(table, OutputType.ERROR, rgEntries.get(x), y, message));
		}
		
		if(InputRestrictions.FREE_FORM.equals(element.getRestrictions()) && data.indexOf(";")!=-1) {

			String message =
					String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data, getRawDataRow(i, x),
							rgTable.getDataFilePositionMapping(y), rgTable.getRepeatableGroupName(),
							rgTable.getColumnName(y));
			message =
					message
							+ String.format(ApplicationsConstants.ERR_TYPE_INCORRECT,
									rgTable.getElementMapping(y).getStructuralDataElement().getType()
											.getValue());

			table.addOutput(new ValidationOutput(table, OutputType.ERROR, rgEntries.get(x), y, message));
		}

	}

	private void validateBiosample(int i, RepeatableGroupTable rgTable, ArrayList<Integer> rgEntries, int x, int y,
			StructuralDataElement element, String data) {

		String[] dataArr = null;

		if (InputRestrictions.FREE_FORM.equals(element.getRestrictions())) {
			dataArr = new String[1];
			dataArr[0] = data;
		} else {
			dataArr = data.split(ApplicationsConstants.SEMI_COLON);

			// only need to validate if it can be split if it is not a free form.
			validateInputRestrictions(i, rgTable, rgEntries, x, y, element, data);
		}

		for (String value : dataArr) {

			/*
			 * If the Biosample is greater than 9, an error is returned. The length can be changed in the
			 * ServiceConstants.java file.
			 */
			if (value.length() > ServiceConstants.MAX_BIOSAMPLE_LENGTH) {
				String message =
						String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data, getRawDataRow(i, x),
								rgTable.getDataFilePositionMapping(y), rgTable.getRepeatableGroupName(),
								rgTable.getColumnName(y));

				message =
						message
								+ String.format(ApplicationsConstants.ERR_TYPE_STRING_SIZE,
										ServiceConstants.MAX_BIOSAMPLE_LENGTH);

				table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, rgEntries.get(x), y, message));
			}
		}
	}

	private void validateAlphanumeric(int i, RepeatableGroupTable rgTable, ArrayList<Integer> rgEntries, int x, int y,
			StructuralDataElement element, String data) {

		String[] dataArr = null;

		if (InputRestrictions.FREE_FORM.equals(element.getRestrictions())) {
			dataArr = new String[1];
			dataArr[0] = data;
		} else {
			dataArr = data.split(ApplicationsConstants.SEMI_COLON);

			// only need to validate if it can be split if it is not a free form.
			validateInputRestrictions(i, rgTable, rgEntries, x, y, element, data);
		}

		for (String value : dataArr) {

			if (element.getSize() != null && value.length() > element.getSize()) {
				String message =
						String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data, getRawDataRow(i, x),
								rgTable.getDataFilePositionMapping(y), rgTable.getRepeatableGroupName(),
								rgTable.getColumnName(y));

				message = message + String.format(ApplicationsConstants.ERR_TYPE_STRING_SIZE, element.getSize());

				table.addOutput(new ValidationOutput(rgTable, OutputType.ERROR, rgEntries.get(x), y, message));
			}
		}
	}

	private void validateFile(int i, RepeatableGroupTable rgTable, ArrayList<Integer> rgEntries, int x, int y,
			StructuralDataElement element, String data, Set<String> fileNames) {

		// Attempt to find the fileNode using the relative path
		FileNode parent = (FileNode) node.getParent();
		String canonicalPath = parent.getConicalPath() + data;
		File file = new File(canonicalPath);
		FileNode fileNode = getFileNode(parent, file.getAbsolutePath(), false);

		// If the relative path isn't found, attempt to use the data as a whole path
		if (fileNode == null) {
			file = new File(data);
			fileNode = getFileNode(parent, file.getAbsolutePath(), false);
		}

		if (fileNode != null) {
			if (fileNode.isIncluded()) {
				if (file.canRead()) {
					String fileName = file.getAbsolutePath();
					fileNode.setStructureName(table.getStructureName());
					fileNode.setAssociation(node);
					if (fileNames.contains(fileName)) {
						String message =
								String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data,
										getRawDataRow(i, x), rgTable.getDataFilePositionMapping(y),
										rgTable.getRepeatableGroupName(), rgTable.getColumnName(y));

						message = message + String.format(ApplicationsConstants.ERR_TYPE_FILE_NAME_DUPLICATE);
						table.addOutput(new ValidationOutput(table, OutputType.WARNING, rgEntries.get(x), y, message));

					} else {

						fileNames.add(fileName);

						if (DataType.FILE.equals(element.getType())) {
							if (fileNode.getType() == FileType.UNKNOWN) {
								fileNode.setType(FileType.ASSOCIATED);
							}
						} else if (DataType.TRIPLANAR.equals(element.getType())) {
							if (fileNode.getType() == FileType.UNKNOWN) {
								fileNode.setType(FileType.TRIPLANAR);
							}
						} else if (DataType.THUMBNAIL.equals(element.getType())) {
							if (loadImage(file) == null) {
								String message =
										String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data,
												getRawDataRow(i, x), rgTable.getDataFilePositionMapping(y),
												rgTable.getRepeatableGroupName(), rgTable.getColumnName(y));

								message = message + String.format(ApplicationsConstants.ERR_TYPE_THUMBNAIL);

								table.addOutput(new ValidationOutput(table, OutputType.ERROR, rgEntries.get(x), y,
										message));
							} else {
								if (fileNode.getType() == FileType.UNKNOWN) {
									fileNode.setType(FileType.THUMBNAIL);
								}
							}
						} else if (fileNode.getType().equals(FileType.TRANSLATION_RULE)) {
							fileNode.setType(FileType.ASSOCIATED);
						}
					}
				} else {

					String message =
							String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data, getRawDataRow(i, x),
									rgTable.getDataFilePositionMapping(y), rgTable.getRepeatableGroupName(),
									rgTable.getColumnName(y));

					message = message + String.format(ApplicationsConstants.ERR_TYPE_FILE_PERMISSION);

					table.addOutput(new ValidationOutput(table, OutputType.ERROR, rgEntries.get(x), y, message));
				}
			} else {

				String message =
						String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data, getRawDataRow(i, x),
								rgTable.getDataFilePositionMapping(y), rgTable.getRepeatableGroupName(),
								rgTable.getColumnName(y));

				message = message + String.format(ApplicationsConstants.ERR_TYPE_FILE_EXCLUDED);

				table.addOutput(new ValidationOutput(table, OutputType.ERROR, rgEntries.get(x), y, message));
			}
		} else {
			FileNode fileNodeIgnoreCase = getFileNode(parent, canonicalPath, true);
			if (fileNodeIgnoreCase != null) {

				String message =
						String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data, getRawDataRow(i, x),
								rgTable.getDataFilePositionMapping(y), rgTable.getRepeatableGroupName(),
								rgTable.getColumnName(y));

				message = message + String.format(ApplicationsConstants.ERR_TYPE_FILE_CASE_SENSE);

				table.addOutput(new ValidationOutput(table, OutputType.ERROR, rgEntries.get(x), y, message));
			} else {
				String message =
						String.format(ApplicationsConstants.LOC_DATA_ROW_COLUMN_NAME, data, getRawDataRow(i, x),
								rgTable.getDataFilePositionMapping(y), rgTable.getRepeatableGroupName(),
								rgTable.getColumnName(y));

				message = message + String.format(ApplicationsConstants.ERR_TYPE_FILE_MISSING);

				table.addOutput(new ValidationOutput(table, OutputType.ERROR, rgEntries.get(x), y, message));
			}
		}
	}

	/**
	 * This function calculates a row on the raw data table based on the current entry and repeatable group
	 * 
	 * @param entry
	 * @param rgIter
	 * @return
	 */
	private int getRawDataRow(int entry, int rgIter) {

		int row = ApplicationsConstants.DATA_START_LINE + rgIter;
		for (int i = 0; i < entry; i++) {
			String[] rowData = table.getRow(i);
			int high = 0;
			for (String s : rowData) {
				if (s == null) {
					continue;
				}
				int count = 1;
				for (char c : s.toCharArray()) {
					if (c == ',') {
						count++;
					}
				}
				if (count > high) {
					high = count;
				}
			}
			row = row + high;
		}
		return row;
	}

	// XXX: We don't have conditionals, so this part is commented out currently
	private void evaluateConditional(HashMap<String, String> elementValues, String name, String type, String data,
			int loc, int i) {

		/*
		 * HashMap<AstTree, String> conditionals = table.getConditionals(name);
		 * 
		 * if (conditionals != null){ for(AstTree tree : conditionals.keySet()){ HashSet<String> valueRange = new
		 * HashSet<String>(); try{ tree.setConstraintTypes(this); AstTree subTree =
		 * tree.rowValuesSubsitution(elementValues); if (subTree == null || subTree.evaluate(this)){ for(String value :
		 * ValidationUtil.tokenizeRange(conditionals.get(tree))){ if(ValidationUtil.isColRef(value)){ value =
		 * value.substring(1).toLowerCase(); if (!value.contains(ValidationConstants.VALUE_REFERENCE_DIVIDER)){ value =
		 * table.getStructureName() + ValidationConstants.VALUE_REFERENCE_DIVIDER + value; } HashSet<String> refValues =
		 * references.get(value); if (refValues != null){ valueRange.addAll(refValues); }else{ String message =
		 * "In column " + table.getColumnName(loc) + ", data element," + name +
		 * ", conditional value range contains column reference " + value +
		 * " - No such data structure element pairing found in this submission."; table.addOutput(new
		 * ValidationOutput(table, OutputType.ERROR, -1, loc, message)); } }else if(ValidationUtil.isRowRef(value)){
		 * String actValue = elementValues.get(value.substring(1).toLowerCase()); if (actValue != null){
		 * valueRange.add(actValue); }else{ String message = "In column " + table.getColumnName(loc) + ", data element,"
		 * + name + ", conditional value range contains row references " + value +
		 * " - No such element found in this structure."; table.addOutput(new ValidationOutput(table, OutputType.ERROR,
		 * -1, loc, message)); } }else{ valueRange.add(value.trim()); } } } }catch (RuntimeException e){
		 * //e.printStackTrace(); String message = "The constraint, " + tree.toString() +
		 * " associated with data element, " + name + ", in column " + (loc + 1) + " could not evaluated because " +
		 * e.getMessage(); table.addOutput(new ValidationOutput(table, OutputType.ERROR, -1, loc, message)); }
		 * 
		 * if(!valueRange.isEmpty()){ if(!ranger.inRange(data, valueRange, type)){ String message; if
		 * (!tree.isRootNull()){ message = "Entry, " + data + ", at row " + (i+3) + " in column " +
		 * table.getColumnName(loc) + " is not within element, " + name + ", conditional, " + tree.toString() +
		 * ", value range - " + conditionals.get(tree) + ". The conditional evaluated to true."; }else{ message =
		 * "Entry, " + data + ", at row " + (i+3) + " in column " + table.getColumnName(loc) +
		 * " is not within element, " + name + ", conditional value range - " + conditionals.get(tree) +
		 * ". The conditional evaluated to true."; } table.addOutput(new ValidationOutput(table, OutputType.ERROR, i,
		 * loc, message)); } } } }
		 */
	}

	// XXX: We dont have any rules for conditionally required, so this can be left out for now
	private void evaluateConditional(HashMap<String, String> elementValues, String name, String data, int loc, int i,
			MapElement element) {

		// String requiredConstraint = element.getRequiredCondition();
		// if (requiredConstraint != null && !requiredConstraint.isEmpty()){
		// try {
		// AstTree required = new AstTree(table.getStructureName(),
		// ValidationUtil.tokenizeConstraint(requiredConstraint));
		// required.setConstraintTypes(this);
		// AstTree tree = required.rowValuesSubsitution(elementValues);
		// if(tree.evaluate(this) && data.isEmpty()){
		// String message = "Row " + (i+3) + " in column " + table.getColumnName(loc) + " is empty. Data structure "
		// + table.getStructureName() + " identifiies element " + name + " as being conditionally required." ;
		// table.addOutput(new ValidationOutput(table, OutputType.ERROR, i, loc, message));
		// }
		// } catch (ParseException e) {
		// //Theoretically these should all be valid
		// e.printStackTrace();
		// } catch (RuntimeException e){
		// // throw e;
		// String message = "Element " + name + ", in column " + table.getColumnName(loc) + " is Conditional Required. "
		// +
		// "The provided required constraint could not be evaluated because " + e.getMessage();
		// table.addOutput(new ValidationOutput(table, OutputType.ERROR, -1, loc, message));
		// }
		// }
		//
		// String prohibitedConstraint = element.getProhibitedCondition();
		// if (prohibitedConstraint != null && !requiredConstraint.isEmpty()){
		// try {
		// AstTree prohibited = new AstTree(table.getStructureName(),
		// ValidationUtil.tokenizeConstraint(prohibitedConstraint));
		// prohibited.setConstraintTypes(this);
		// AstTree tree = prohibited.rowValuesSubsitution(elementValues);
		// if(tree.evaluate(this) && !data.isEmpty()){
		// String message = "Row " + (i+3) + " in column " + table.getColumnName(loc) +
		// " contains data. Data structure "
		// + table.getStructureName() + " identifiies element " + name + " as being conditionally prohibited." ;
		// table.addOutput(new ValidationOutput(table, OutputType.ERROR, i, loc, message));
		// }
		// } catch (ParseException e) {
		// //Theoretically these should all be valid
		// e.printStackTrace();
		// }catch (RuntimeException e){
		// String message = "Element " + name + ", in column " + table.getColumnName(loc) +
		// " is conditionally required. " +
		// "The provided prohibited constraint could not be evaluated because " + e.getMessage();
		// table.addOutput(new ValidationOutput(table, OutputType.ERROR, -1, loc, message));
		// }
		// }
	}

	private FileNode getFileNode(FileNode parent, String canonicalPath, boolean ignoreCase) {

		for (int i = 0; i < parent.getChildCount(); i++) {
			FileNode node = (FileNode) parent.getChildAt(i);
			String nodePath = node.getConicalPath().replaceAll("\\\\", "/");
			canonicalPath = canonicalPath.replaceAll("\\\\", "/");
			if (ignoreCase) {
				nodePath = nodePath.toLowerCase();
				canonicalPath = canonicalPath.toLowerCase();
			}
			if (canonicalPath.startsWith(nodePath)) {
				if (canonicalPath.equalsIgnoreCase(nodePath)) {
					return node;
				} else {
					return getFileNode(node, canonicalPath, ignoreCase);
				}
			}
		}
		return null;
	}

	public boolean validateConstraint(String operator, String rowRef, Vector<String> valueRange, String type,
			MapElement iElement) throws RuntimeException {

		if (ValidationUtil.isRangeOperator(operator)) {
			HashSet<String> values = new HashSet<String>();
			for (String s : valueRange) {
				if (ValidationUtil.isColRef(s)) {
					s = s.substring(1).toLowerCase();
					if (references.get(s) != null) {
						values.addAll(references.get(s));
					} else {
						throw new RuntimeException("Value subsitution could not occur because " + s
								+ " - No such data structure element pairing found in this submission.");
					}
				} else {
					values.add(s);
				}
			}

			if (operator.equalsIgnoreCase("~")) {
				return ranger.inRange(rowRef, iElement);
			} else { // operator.equalsIgnoreCase("!~")
				return ValidationUtil.not(ranger.inRange(rowRef, iElement));
			}

		} else {
			String value = valueRange.get(0);
			if (operator.equalsIgnoreCase("=")) {
				return ValidationUtil.equals(rowRef, value, type);
			} else if (operator.equalsIgnoreCase("!=")) {
				return ValidationUtil.not(ValidationUtil.equals(rowRef, value, type));
			} else if (operator.equalsIgnoreCase("<")) {
				return ValidationUtil.less(rowRef, value, type);
			} else if (operator.equalsIgnoreCase(">")) {
				return ValidationUtil.greater(rowRef, value, type);
			} else if (operator.equalsIgnoreCase("<=")) {
				return (ValidationUtil.less(rowRef, value, type) || ValidationUtil.equals(rowRef, value, type));
			} else if (operator.equalsIgnoreCase(">=")) {
				return (ValidationUtil.greater(rowRef, value, type) || ValidationUtil.equals(rowRef, value, type));
			}
		}

		return false;
	}

	public FileNode call() throws Exception {

		validate();
		node.setErrorNum(table.getErrorCount());
		node.setWarnNum(table.getWarningCount());
		return node;
	}

	/**
	 * Attempts to load the specified file as a BufferedImage
	 * 
	 * @param file - The file to load
	 * @return - A new BufferedImage or null if the specified file is not an image
	 */
	private BufferedImage loadImage(File file) {

		InputStream input = null;

		try {
			input = new FileInputStream(file);
			return ImageIO.read(input);
		} catch (IOException ex) {
			// we need to catch the exception in
			// case the specified file does not
			// point to a 'real' image
		} finally {
			if (input != null) {
				try {
					input.close();
				} catch (IOException ex) {
				}
			}
		}

		return null;
	}
	

	
}
